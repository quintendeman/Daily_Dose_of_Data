{"version":3,"sources":["Navigation/NavigationSection.js","Navigation/Navigation.js","Element/Element.js","Array/Array.js","List/List.js","ArrayList/ArrayList.js","LinkedList/LinkedList.js","Stack/Stack.js","Queue/Queue.js","BinaryTree/BinaryTreeDisplay.js","BinaryTree/BinaryTree.js","BinarySearchTree/BinarySearchTree.js","AvlTree/AvlTree.js","BinaryHeap/BinaryHeap.js","HashTable/HashTable.js","Set/Set.js","Map/Map.js","InsertionSort/InsertionSort.js","SelectionSort/SelectionSort.js","BubbleSort/BubbleSort.js","MergeSort/MergeSort.js","QuickSort/QuickSort.js","HeapSort/HeapSort.js","LinearSearch/LinearSearch.js","BinarySearch/BinarySearch.js","DepthFirstSearch/DepthFirstSearch.js","BreadthFirstSearch/BreadthFirstSearch.js","Visualization/Visualization.js","Array/ArrayInformation.js","List/ListInformation.js","ArrayList/ArrayListInformation.js","LinkedList/LinkedListInformation.js","Stack/StackInformation.js","Queue/QueueInformation.js","BinaryTree/BinaryTreeInformation.js","BinarySearchTree/BinarySearchTreeInformation.js","AvlTree/AvlTreeInformation.js","BinaryHeap/BinaryHeapInformation.js","HashTable/HashTableInformation.js","Set/SetInformation.js","Map/MapInformation.js","InsertionSort/InsertionSortInformation.js","SelectionSort/SelectionSortInformation.js","BubbleSort/BubbleSortInformation.js","MergeSort/MergeSortInformation.js","QuickSort/QuickSortInformation.js","HeapSort/HeapSortInformation.js","LinearSearch/LinearSearchInformation.js","BinarySearch/BinarySearchInformation.js","DepthFirstSearch/DepthFirstSearchInformation.js","BreadthFirstSearch/BreadthFirstSearchInformation.js","App.js","index.js"],"names":["NavigationList","props","list","map","value","index","to","NavigationSection","useState","dropDown","setDropDown","toggleDropDown","prevDropDown","title","onClick","Navigation","className","Element","color","border","ArrayDisplay","array","Array","setArray","forceRender","randomSize","useRef","arraySize","setIndex","setValue","deleteIndex","arrayOutput","getIndex","forceUpdate","renders","randomArray","size","current","randInt","isNaN","parseInt","newArray","i","push","min","max","Math","floor","random","useEffect","id","ref","type","length","data","readOnly","ListDisplay","List","setList","insertIndex","insertValue","removeIndex","listOutput","randomList","newList","splice","ArrayList","Node","this","next","LinkedListClass","head","previous","newNode","curr","prev","LinkedListDisplay","componentList","focus","green","yellow","pink","LinkedList","speedSlider","interval","animationFunction","animationValue","targetIndex","animating","currentNode","currentIndex","toggleAnimation","insertAt","useCallback","clearInterval","setInterval","insertStep","getStep","get","removeStep","remove","onChange","StackDisplay","stack","Stack","setStack","stackInput","stackOutput","randomStack","newStack","pop","undefined","QueueClass","tail","temp","QueueDisplay","queue","Queue","setQueue","queueInput","queueOutput","randomQueue","newQueue","enqueue","dequeue","peek","BinaryTreeLevel","node","BinaryTreeLineLevel","lines","BinaryTreeDisplay","levelComponents","nextQueue","tree","root","currQueue","left","right","allNull","BinaryTreeNode","BinaryTreeClass","BinaryTree","setTree","randomTree","levels","newTree","nodes","newNodes","level","pow","BinarySearchTreeClass","height","parent","leftmostChild","BinarySearchTree","insertInput","removeInput","findInput","insert","findStep","getParent","cur","console","log","getHeight","getBalance","rotateRight","newRoot","T2","rotateLeft","getLeftmost","leftmost","getRightMost","rightmost","AvlTreeClass","inOrder","sortedArrayToAVL","arr","start","end","mid","AvlTree","secondRot","familyLine","status","treeList","n","rotateStep","rightTree","rotateStepDelete","family","z","abs","y","x","firstUnbalanced","l","grandP","indexOf","r","BinaryHeapClass","heap","focusNode","greenNode","pinkNode","returnValue","indices","newIndices","BinaryHeap","setHeap","animationCurrent","randomHeap","elements","newHeap","getTree","HashTableClass","loadFactor","LOADFACTOR","oldArray","resize","hashCode","hash","HashTableDisplay","hashTable","HashTable","setHashTable","randomLF","buildSize","buildLF","lastInserted","lastRemoved","lastFound","randomHashTable","parseFloat","newHashTable","find","toFixed","SetDisplay","concat","set","MySet","Set","setSet","findOutput","randomSet","newSet","add","delete","has","MapDisplay","forEach","key","MyMap","Map","setMap","insertKey","removeKey","getKey","getOutput","randomMap","newMap","readonly","InsertionSortDisplay","currentCompare","currentInserting","sortedEndIndex","InsertionSort","sorted","setSorted","sorting","toggleSortingButton","generateArrayButton","arraySizeInput","sortingStep","toggleSorting","innerHTML","classList","SelectionSortDisplay","currentMinimum","currentFocus","SelectionSort","BubbleSortDisplay","sortedStart","focusOne","focusTwo","BubbleSort","swappedOnPass","swap","MergeSortDisplay","mergedArrays","array1","arrays","array2","mergedArray","MergeSortDisplayRow","MergeSortDisplayRowHelper1","MergeSortDisplayRowHelper2","MergeSort","mergedArraysCurrs","mergeRowIndex","randomArrays","newArrays","initializeMergedArrays","ceil","j","QuickSortDisplay","pivot","low","high","sortedElements","includes","QuickSort","worklist","shift","toInsert","filter","buildSorted","SortedArrayDisplay","HeapSort","sortedArray","setSortedArray","LinearSearch","searchInput","searching","searchValue","searchingStep","upper","lower","BinarySearch","sort","DepthFirstSearch","nodeQueue","dfs","BreadthFirstSearch","bfs","Visualization","visualization","ArrayInformation","ListInformation","ArrayListInformation","LinkedListInformation","StackInformation","QueueInformation","BinaryTreeInformation","BinarySearchTreeInformation","AvlTreeInformation","BinaryHeapInformation","HashTableInformation","SetInformation","MapInformation","InsertionSortInformation","SelectionSortInformation","BubbleSortInformation","MergeSortInformation","QuickSortInformation","HeapSortInformation","LinearSearchInformation","BinarySearchInformation","DepthFirstSearchInformation","BreadthFirstSearchInformation","App","setVisualization","fetch","then","res","json","exact","path","src","alt","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d785c437.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NavigationList = (props) => {\r\n    return props.list.map((value, index) => {\r\n        return <li key={index}><Link to={\"/\"+value}>{value}</Link></li>\r\n    });\r\n}\r\n\r\nconst NavigationSection = (props) => {\r\n    \r\n    const [dropDown, setDropDown] = useState(true);\r\n\r\n    const toggleDropDown = () => {\r\n        setDropDown(prevDropDown => !prevDropDown);\r\n    }\r\n\r\n    if(dropDown) {\r\n        return (\r\n            <>\r\n                <p>{props.title}</p>\r\n                <button onClick={toggleDropDown}>&#x25BC;</button>\r\n                <ul>\r\n                    <NavigationList list={props.list} />\r\n                </ul>\r\n            </>\r\n        );\r\n    } else {\r\n        return (\r\n            <>\r\n                <p>{props.title}</p>\r\n                <button onClick={toggleDropDown}>&#x25B2;</button>\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default NavigationSection","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Navigation.scss';\r\nimport NavigationSection from './NavigationSection';\r\n\r\nconst Navigation = () => {\r\n\r\n    return (\r\n        <div className=\"navigation\">\r\n            <ul>\r\n                <li><Link to=\"/\">Home</Link></li>\r\n                <li><NavigationSection title={\"Data Structures\"} list={[\"Array\", \"List\", \"Array List\", \"Linked List\", \"Stack\", \"Queue\", \"Binary Tree\", \"Binary Search Tree\", \"AVL Tree\", \"Binary Heap\", \"Hash Table\", \"Set\", \"Map\"]} /></li>\r\n                <li><NavigationSection title={\"Algorithms\"} list={[\"Insertion Sort\", \"Selection Sort\", \"Bubble Sort\", \"Merge Sort\", \"Quick Sort\", \"Heap Sort\", \"Linear Search\", \"Binary Search\", \"Depth First Search\", \"Breadth First Search\"]} /></li>\r\n                <li><Link to=\"/about\">About Us</Link></li>\r\n            </ul>\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default Navigation","import React from 'react';\r\nimport './Element.scss';\r\n\r\nconst Element = (props) => {\r\n\treturn <p className={\"element \" + props.color + \" \" + props.border}>{props.value}</p>;\r\n}\r\n\r\nexport default Element;","import React, { useState, useRef, useEffect } from 'react';\r\nimport './Array.scss';\r\nimport Element from '../Element/Element';\r\n\r\nconst ArrayDisplay = (props) => {\r\n    return props.array.map((value, index) => {\r\n        return (\r\n            <div key={index} className=\"labeledElement\">\r\n                <label>{index}</label>\r\n                <Element value={value}></Element>\r\n            </div>\r\n        );\r\n    });\r\n}\r\n\r\nconst Array = () => {\r\n    const [array, setArray] = useState([]);\r\n    const [, forceRender] = useState(0);\r\n    const randomSize = useRef();\r\n    const arraySize = useRef();\r\n    const setIndex = useRef();\r\n    const setValue = useRef();\r\n    const deleteIndex = useRef();\r\n    const arrayOutput = useRef();\r\n    const getIndex = useRef();\r\n\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    //sets array to a randomly generated array\r\n    const randomArray = () => {\r\n        var size = randomSize.current.value;\r\n        if (size === \"\") {\r\n            size = randInt(10, 60);\r\n        }\r\n        if (!isNaN(parseInt(size)) && size > 0) {\r\n            var newArray = [];\r\n            for (let i = 0; i < size; i++)\r\n                newArray.push(randInt(-999,1000));\r\n            setArray(newArray);\r\n        }\r\n        randomSize.current.value = null;\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize list to random list\r\n    useEffect(randomArray, []);\r\n\r\n    const build = () => {\r\n        var newArray = [];\r\n            var size = parseInt(arraySize.current.value);\r\n            if(isNaN(size))\r\n                size = randInt(10, 60);\r\n            while (size > 0) {\r\n                newArray.push(null);\r\n                size--;\r\n        }\r\n        setArray(newArray);\r\n        arraySize.current.value = null;\r\n    }\r\n\r\n    const set = () => {\r\n        const index = parseInt(setIndex.current.value);\r\n        const value = parseInt(setValue.current.value);\r\n        if (!isNaN(index) && !isNaN(value) && index >= 0 && index < array.length) {\r\n            array[index] = value;\r\n            forceUpdate();\r\n        } else {\r\n            arrayOutput.current.value = \"Invalid\";\r\n        }\r\n        setIndex.current.value = null;\r\n        setValue.current.value = null;\r\n    }\r\n\r\n    const remove = () => {\r\n        const index = parseInt(deleteIndex.current.value);\r\n        if (!isNaN(index) && index >= 0 && index < array.length) {\r\n            const data = array[index];\r\n            arrayOutput.current.value = data;\r\n            if (array[index] == null) {\r\n                arrayOutput.current.value = \"Invalid\";\r\n            }\r\n            array[index] = null;\r\n            \r\n            forceUpdate();\r\n            \r\n        }\r\n        \r\n        else {\r\n            arrayOutput.current.value = \"Invalid\";\r\n        }\r\n        deleteIndex.current.value = null;\r\n    }\r\n\r\n    const get = () => {\r\n        const index = parseInt(getIndex.current.value);\r\n        if (!isNaN(index) && index >= 0 && index < array.length) {\r\n            const data = array[index];\r\n            arrayOutput.current.value = data;\r\n            if (array[index] == null) {\r\n                arrayOutput.current.value = \"null\";\r\n            }\r\n        } else {\r\n            arrayOutput.current.value = \"Invalid\";\r\n        }\r\n        getIndex.current.value = null;\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"array\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomArray}>Random</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Size</label>\r\n                    <input id=\"randomSizeInput\" ref={randomSize} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"buildButton\" onClick={build}>Build</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Size</label>\r\n                    <input type=\"text\" ref={arraySize}></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"setButton\" onClick={set}>Set</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"setIndex\" type=\"text\" ref={setIndex}></input>\r\n                </span>\r\n                <span className=\"labeledInput\">\r\n                    <label>Value</label>\r\n                    <input id=\"setValue\" type=\"text\" ref={setValue}></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"deleteButton\" onClick={remove}>Delete</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input type=\"text\" ref={deleteIndex}></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"getButton\" onClick={get}>Get</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input type=\"text\" ref={getIndex}></input>\r\n                </span>\r\n                \r\n                <br />\r\n                <input id=\"arrayOutput\" type=\"text\" ref={arrayOutput} readOnly></input>\r\n                <br />\r\n                \r\n            </div>\r\n            <div className=\"visualization\">\r\n                <ArrayDisplay array={array} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Array;","import React, { useState, useRef, useEffect } from 'react';\r\nimport './List.scss';\r\nimport Element from '../Element/Element';\r\n\r\nconst ListDisplay = (props) => {\r\n    return props.list.map((value, index) => {\r\n        return (\r\n            <div key={index} className=\"labeledElement\">\r\n                <label>{index}</label>\r\n                <Element value={value}></Element>\r\n            </div>\r\n        );\r\n    });\r\n}\r\n\r\n//main react component for list\r\nconst List = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [list, setList] = useState([]);\r\n    const randomSize = useRef();\r\n    const insertIndex = useRef();\r\n    const insertValue = useRef();\r\n    const removeIndex = useRef();\r\n    const listOutput = useRef();\r\n    const getIndex = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //sets list to a randomly generated list\r\n    const randomList = () => {\r\n        var size = randomSize.current.value;\r\n        if (size === \"\") {\r\n            size = randInt(10, 60);\r\n        }\r\n        if (!isNaN(parseInt(size)) && size > 0) {\r\n            var newList = [];\r\n            for (let i = 0; i < size; i++)\r\n                newList.push(randInt(-999,1000));\r\n            setList(newList);\r\n        }\r\n        randomSize.current.value = null;\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize list to random list\r\n    useEffect(randomList, []);\r\n\r\n    const insert = () => {\r\n        var index = parseInt(insertIndex.current.value);\r\n        var value = parseInt(insertValue.current.value);\r\n        if(isNaN(index))\r\n            index = 0;\r\n        if(isNaN(value))\r\n            value = 0;\r\n        if (index >= 0 && index <= list.length) {\r\n            list.splice(index, 0, value);\r\n            forceUpdate();\r\n        } else {\r\n            listOutput.current.value = \"Invalid\";\r\n        }\r\n        insertIndex.current.value = null;\r\n        insertValue.current.value = null;\r\n    }\r\n\r\n    const remove = () => {\r\n        var index = parseInt(removeIndex.current.value);\r\n        if(isNaN(index))\r\n            index = 0;\r\n        if (index >= 0 && index < list.length) {\r\n            const data = list.splice(index, 1);\r\n            forceUpdate();\r\n            listOutput.current.value = data;\r\n        } else {\r\n            listOutput.current.value = \"Invalid\";\r\n        }\r\n        removeIndex.current.value = null;\r\n    }\r\n\r\n    const get = () => {\r\n        var index = parseInt(getIndex.current.value);\r\n        if(isNaN(index))\r\n            index = 0;\r\n        if (index >= 0 && index < list.length) {\r\n            const data = list[index];\r\n            listOutput.current.value = data;\r\n        } else {\r\n            listOutput.current.value = \"Invalid\";\r\n        }\r\n        getIndex.current.value = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"list\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomList}>Random</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Size</label>\r\n                    <input id=\"randomSizeInput\" ref={randomSize} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"insertIndex\" ref={insertIndex} type=\"text\"></input>\r\n                </span>\r\n                <span className=\"labeledInput\">\r\n                    <label>Value</label>\r\n                    <input id=\"insertValue\" ref={insertValue} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"removeIndex\" ref={removeIndex} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <input id=\"listOutput\" type=\"text\" ref={listOutput} readOnly></input>\r\n                <br />\r\n                <button id=\"getButton\" onClick={get}>Get</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"getIndex\" ref={getIndex} type=\"text\"></input>\r\n                </span>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <ListDisplay list={list} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default List;","import React, { useState, useRef, useEffect } from 'react';\r\nimport './ArrayList.scss';\r\nimport Element from '../Element/Element';\r\n\r\nconst ListDisplay = (props) => {\r\n    return props.list.map((value, index) => {\r\n        return (\r\n            <div key={index} className=\"labeledElement\">\r\n                <label>{index}</label>\r\n                <Element value={value}></Element>\r\n            </div>\r\n        );\r\n    });\r\n}\r\n\r\n//main react component for list\r\nconst ArrayList = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [list, setList] = useState([]);\r\n    const randomSize = useRef();\r\n    const insertIndex = useRef();\r\n    const insertValue = useRef();\r\n    const removeIndex = useRef();\r\n    const listOutput = useRef();\r\n    const getIndex = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    //sets list to a randomly generated list\r\n    const randomList = () => {\r\n        var size = randomSize.current.value;\r\n        if (size === \"\") {\r\n            size = randInt(10, 60);\r\n        }\r\n        if (!isNaN(parseInt(size)) && size > 0) {\r\n            var newList = [];\r\n            for (let i = 0; i < size; i++)\r\n                newList.push(randInt(-999, 1000));\r\n            setList(newList);\r\n        }\r\n        randomSize.current.value = null;\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min) + min);\r\n    }\r\n\r\n    //initialize list to random list\r\n    useEffect(randomList, []);\r\n\r\n    const insert = () => {\r\n        var index = parseInt(insertIndex.current.value);\r\n        var value = parseInt(insertValue.current.value);\r\n        if (isNaN(index))\r\n            index = 0;\r\n        if (isNaN(value))\r\n            value = 0;\r\n        if (index >= 0 && index <= list.length) {\r\n            list.splice(index, 0, value);\r\n            forceUpdate();\r\n        } else {\r\n            listOutput.current.value = \"Invalid\";\r\n        }\r\n        insertIndex.current.value = null;\r\n        insertValue.current.value = null;\r\n    }\r\n\r\n    const remove = () => {\r\n        var index = parseInt(removeIndex.current.value);\r\n        if (isNaN(index))\r\n            index = 0;\r\n        if (index >= 0 && index < list.length) {\r\n            const data = list.splice(index, 1);\r\n            forceUpdate();\r\n            listOutput.current.value = data;\r\n        } else {\r\n            listOutput.current.value = \"Invalid\";\r\n        }\r\n        removeIndex.current.value = null;\r\n    }\r\n\r\n    const get = () => {\r\n        var index = parseInt(getIndex.current.value);\r\n        if (isNaN(index))\r\n            index = 0;\r\n        if (index >= 0 && index < list.length) {\r\n            const data = list[index];\r\n            listOutput.current.value = data;\r\n        } else {\r\n            listOutput.current.value = \"Invalid\";\r\n        }\r\n        getIndex.current.value = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"array-list\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomList}>Random</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Size</label>\r\n                    <input id=\"randomSizeInput\" ref={randomSize} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"insertIndex\" ref={insertIndex} type=\"text\"></input>\r\n                </span>\r\n                <span className=\"labeledInput\">\r\n                    <label>Value</label>\r\n                    <input id=\"insertValue\" ref={insertValue} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"removeIndex\" ref={removeIndex} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <input id=\"listOutput\" type=\"text\" ref={listOutput} readOnly></input>\r\n                <br />\r\n                <button id=\"getButton\" onClick={get}>Get</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"getIndex\" ref={getIndex} type=\"text\"></input>\r\n                </span>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <ListDisplay list={list} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ArrayList;","import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './LinkedList.scss';\r\nimport Element from '../Element/Element';\r\n\r\nclass Node {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.next = null;\r\n    }\r\n}\r\n\r\nclass LinkedListClass {\r\n    constructor(head = null) {\r\n        this.head = head;\r\n        this.size = 0;\r\n    }\r\n\r\n    //for insertion at tail -- currently unused\r\n    insert(data) {\r\n        if (this.head == null) {\r\n            this.head = new Node(data);\r\n        }\r\n        else {\r\n            var current = this.head;\r\n            while (current.next != null) {\r\n                current = current.next;\r\n            }\r\n            current.next = new Node(data);\r\n        }\r\n        this.size++;\r\n    }\r\n\r\n    insertAt(data, index) {\r\n        var newNode = new Node(data);\r\n        var current = this.head;\r\n        var previous;\r\n\r\n        if (index <= this.size) {\r\n\r\n            if (index === 0) {\r\n                newNode.next = this.head;\r\n                this.head = newNode;\r\n            }\r\n            else {\r\n                var i = 0;\r\n                while (i < index) {\r\n                    i++;\r\n                    previous = current;\r\n                    current = current.next;\r\n                }\r\n                newNode.next = current;\r\n                previous.next = newNode;\r\n            }\r\n            this.size++;\r\n        }\r\n    }\r\n\r\n    get(index) {\r\n        var i = 0;\r\n        var current = this.head;\r\n        while (i !== index) {\r\n            current = current.next;\r\n            i++;\r\n        }\r\n        return current.value;\r\n    }\r\n\r\n    remove(index) {\r\n        var i = 0;\r\n        var curr, prev, next;\r\n        if (index < this.size && this.size > 0) {\r\n            if (index === 0) {\r\n                this.head = this.head.next;\r\n                this.size--;\r\n            }\r\n            else {\r\n                i++;\r\n                prev = this.head;\r\n                curr = prev.next;\r\n                next = curr.next;\r\n                while (i !== index) {\r\n                    i++;\r\n                    prev = prev.next;\r\n                    curr = curr.next;\r\n                    next = next.next;\r\n                }\r\n                prev.next = next;\r\n                this.size--;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst LinkedListDisplay = (props) => {\r\n    var current = props.list.head;\r\n    var index = 0;\r\n    var componentList = [];\r\n    while (current != null) {\r\n        if (current === props.focus) {\r\n            componentList.push(\r\n                <div key={2*index} className=\"labeledElement\">\r\n                    <label>{index}</label>\r\n                    <Element value={current.value} border=\"bordered\"></Element>\r\n                </div>\r\n            );\r\n        } else if (current === props.green) {\r\n            componentList.push(\r\n                <div key={2*index} className=\"labeledElement\">\r\n                    <label>{index}</label>\r\n                    <Element value={current.value} color=\"green\"></Element>\r\n                </div>\r\n            );\r\n        } else if (current === props.yellow) {\r\n            componentList.push(\r\n                <div key={2*index} className=\"labeledElement\">\r\n                    <label>{index}</label>\r\n                    <Element value={current.value} color=\"yellow\"></Element>\r\n                </div>\r\n            );\r\n        } else if (current === props.pink) {\r\n            componentList.push(\r\n                <div key={2*index} className=\"labeledElement\">\r\n                    <label>{index}</label>\r\n                    <Element value={current.value} color=\"pink\"></Element>\r\n                </div>\r\n            );\r\n        } else {\r\n            componentList.push(\r\n                <div key={2*index} className=\"labeledElement\">\r\n                    <label>{index}</label>\r\n                    <Element value={current.value}></Element>\r\n                </div>\r\n            );\r\n        }\r\n        componentList.push(\r\n            <p className=\"arrow\" key={2*index+1}>&#x2192;</p>\r\n        );\r\n        current = current.next;\r\n        index++;\r\n    }\r\n    componentList.push(<Element key={2*index} value=\"null\" />);\r\n    return componentList;\r\n\r\n    \r\n}\r\n\r\nconst LinkedList = () => {\r\n\r\n    const [list, setList] = useState(new LinkedListClass());\r\n    const [, forceRender] = useState(0);\r\n    const randomSize = useRef();\r\n    const insertIndex = useRef();\r\n    const insertValue = useRef();\r\n    const removeIndex = useRef();\r\n    const listOutput = useRef();\r\n    const getIndex = useRef();\r\n    const speedSlider = useRef();\r\n    const interval = useRef();\r\n    const animationFunction = useRef();\r\n    const animationValue = useRef();\r\n    const targetIndex = useRef();\r\n    const animating = useRef();\r\n    const currentNode = useRef();\r\n    const currentIndex = useRef();\r\n    const green = useRef();\r\n    const yellow = useRef(null);\r\n    const pink = useRef(null);\r\n\r\n    //We call update on fake state variable to force rerender\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    //sets list to a randomly generated list\r\n    const randomList = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        var size = randomSize.current.value;\r\n        if (size === \"\") {\r\n            size = randInt(8, 40);\r\n        }\r\n        if (!isNaN(parseInt(size)) && size > 0) {\r\n            var newList = new LinkedListClass();\r\n            for (let i = 0; i < size; i++)\r\n                newList.insertAt(randInt(-999,1000), 0);\r\n            setList(newList);\r\n        }\r\n        randomSize.current.value = null;\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //function to pause or continue animation\r\n    const toggleAnimation = useCallback(() => {\r\n        if (animating.current) {\r\n            clearInterval(interval.current);\r\n            animating.current = false;\r\n            animationFunction.current = null;\r\n            animationValue.current = null;\r\n            targetIndex.current = null;\r\n            currentNode.current = null;\r\n            currentIndex.current = null;\r\n            pink.current = null;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            animating.current = true;\r\n            green.current = null;\r\n            yellow.current = null;\r\n        }\r\n    }, []);\r\n\r\n    //initialize list to random list\r\n    useEffect(randomList, [toggleAnimation]);\r\n\r\n    //insertion only occurs at head for now\r\n    function insert() {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        var data = parseInt(insertValue.current.value);\r\n        var index = parseInt(insertIndex.current.value);\r\n        if(isNaN(data))\r\n            data = randInt(-999,1000);\r\n        if(isNaN(index))\r\n            index = 0;\r\n        if (index === 0) {\r\n            list.insertAt(data, 0);\r\n            green.current = list.head;\r\n            yellow.current = null;\r\n            forceUpdate();\r\n        } else if (index > 0 && index < list.size) {\r\n            animationFunction.current = insertStep;\r\n            animationValue.current = data;\r\n            targetIndex.current = index;\r\n            currentNode.current = list.head;\r\n            currentIndex.current = 0;\r\n            forceUpdate();\r\n            toggleAnimation();\r\n        } else {\r\n            listOutput.current.value = \"Invalid\";\r\n        }\r\n        insertValue.current.value = null;\r\n        insertIndex.current.value = null;\r\n    }\r\n\r\n    //function for a single step of insertion animation\r\n    const insertStep = () => {\r\n        if(currentIndex.current === targetIndex.current-1) {\r\n            list.insertAt(animationValue.current, targetIndex.current);\r\n            green.current = currentNode.current.next;\r\n            toggleAnimation();\r\n        } else {\r\n            currentNode.current = currentNode.current.next;\r\n            currentIndex.current++;\r\n        }\r\n    }\r\n\r\n    function get() {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        var index = parseInt(getIndex.current.value);\r\n        if(isNaN(index))\r\n            index = 0;\r\n        if (index >= 0 && index < list.size) {\r\n            animationFunction.current = getStep;\r\n            targetIndex.current = index;\r\n            currentIndex.current = 0;\r\n            currentNode.current = list.head;\r\n            forceUpdate();\r\n            toggleAnimation();\r\n        } else {\r\n            listOutput.current.value = \"Invalid\";\r\n        }\r\n        getIndex.current.value = null;\r\n    }\r\n\r\n    //function for a single step of get animation\r\n    const getStep = () => {\r\n        if (targetIndex.current === currentIndex.current) {\r\n            if (yellow.current === null) {\r\n                yellow.current = currentNode.current;\r\n                currentNode.current = null;\r\n            } else {\r\n                listOutput.current.value = list.get(targetIndex.current);\r\n                toggleAnimation();\r\n            }\r\n        } else {\r\n            currentNode.current = currentNode.current.next;\r\n            currentIndex.current++;\r\n        }\r\n    }\r\n\r\n    function remove() {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        var index = parseInt(removeIndex.current.value);\r\n        if(isNaN(index))\r\n            index = 0;\r\n        if (index >= 0 && index < list.size) {\r\n            animationFunction.current = removeStep;\r\n            targetIndex.current = index;\r\n            currentIndex.current = 0;\r\n            currentNode.current = list.head;\r\n            forceUpdate();\r\n            toggleAnimation();\r\n        } else {\r\n            listOutput.current.value = \"Invalid\";\r\n        }\r\n        removeIndex.current.value = null;\r\n    }\r\n\r\n    //function to do 1 step of remove animation\r\n    const removeStep = () => {\r\n        if (targetIndex.current === currentIndex.current) {\r\n            if (pink.current === null) {\r\n                pink.current = currentNode.current;\r\n                currentNode.current = null;\r\n            } else {\r\n                listOutput.current.value = list.get(targetIndex.current);\r\n                list.remove(targetIndex.current);\r\n                toggleAnimation();\r\n            }\r\n        } else {\r\n            currentNode.current = currentNode.current.next;\r\n            currentIndex.current++;\r\n        }\r\n    }\r\n\r\n    //changes the animation speed when the slider changes\r\n    const updateSpeed = () => {\r\n        if (animationFunction.current != null) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"linked-list\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomList}>Random</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Size</label>\r\n                    <input id=\"randomSizeInput\" ref={randomSize} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"insertIndex\" ref={insertIndex} type=\"text\"></input>\r\n                </span>\r\n                <span className=\"labeledInput\">\r\n                    <label>Value</label>\r\n                    <input id=\"insertValue\" ref={insertValue} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button onClick={remove} id=\"removeButton\" >Remove</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"removeIndex\" ref={removeIndex} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <input id=\"listOutput\" type=\"text\" ref={listOutput} readOnly></input>\r\n                <br />\r\n                <button id=\"getButton\" onClick={get} >Get</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"getIndex\" ref={getIndex} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <span className=\"labeledSlider\">\r\n                    <label>Animation Speed</label>\r\n                    <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                </span>\r\n            </div>\r\n\r\n            <div className=\"visualization\">\r\n                <LinkedListDisplay list={list} focus={currentNode.current} green={green.current} yellow={yellow.current} pink={pink.current} />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default LinkedList;","import React, { useState, useRef, useEffect } from 'react';\r\nimport './Stack.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//returns a list of react element components from the stack component array\r\nconst StackDisplay = (props) => {\r\n\treturn props.stack.map((value, index) => {\r\n\t\treturn <Element key={index} value={value} />\r\n\t});\r\n}\r\n\r\n//main react component for stack\r\nconst Stack = () => {\r\n\t\r\n\tconst [, forceRender] = useState(0);\r\n\tconst [stack, setStack] = useState([]);\r\n\tconst stackInput = useRef();\r\n\tconst stackOutput = useRef();\r\n\t\r\n\t//We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n\t//sets queue to a randomly generated queue\r\n    const randomStack = () => {\r\n        const size = randInt(10, 60);\r\n        var newStack = [];\r\n        for (let i = 0; i < size; i++)\r\n            newStack.push(randInt(-999,1000));\r\n        setStack(newStack);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize stack to random stack\r\n    useEffect(randomStack, []);\r\n\t\r\n\tconst push = () => {\r\n\t\tvar data = parseInt(stackInput.current.value);\r\n\t\tif(isNaN(data))\r\n            data = 0;\r\n\t\tstack.push(data);\r\n\t\tforceUpdate();\r\n\t\tstackInput.current.value = null;\r\n\t}\r\n\t\r\n\tconst pop = () => {\r\n\t\tconst data = stack.pop();\r\n\t\tforceUpdate();\r\n\t\tif (data === undefined)\r\n\t\t\tstackOutput.current.value = \"None\";\r\n\t\telse\r\n\t\t\tstackOutput.current.value = data;\r\n\t}\r\n\t\r\n\tconst peek = () => {\r\n\t\tconst data = stack[stack.length-1];\r\n\t\tif (data === undefined)\r\n\t\t\tstackOutput.current.value = \"None\";\r\n\t\telse\r\n\t\t\tstackOutput.current.value = data;\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<div className=\"stack\">\r\n\t\t\t<div className=\"controls\">\r\n\t\t\t\t<button id=\"randomButton\" onClick={randomStack}>Random</button>\r\n                <br />\r\n\t\t\t\t<button id=\"pushButton\" onClick={push}>Push</button>\r\n\t\t\t\t<input id=\"stackInput\" ref={stackInput} type=\"text\" />\r\n\t\t\t\t<br />\r\n\t\t\t\t<button id=\"popButton\" onClick={pop}>Pop</button>\r\n\t\t\t\t<br />\r\n\t\t\t\t<input id=\"stackOutput\" ref={stackOutput} type=\"text\" readOnly />\r\n\t\t\t\t<br />\r\n\t\t\t\t<button id=\"peekButton\" onClick={peek}>Peek</button>\r\n\t\t\t\t<br />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"visualization\">\r\n\t\t\t\t<StackDisplay stack={stack} />\r\n\t\t\t\t<div id=\"stackTop\">\r\n\t\t\t\t\t<p>&#x2190; Push</p>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<p>&#x2192; Pop</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Stack;","import React, { useState, useRef, useEffect } from 'react';\r\nimport './Queue.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//define Queue Node class\r\nclass Node {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.next = null;\r\n    }\r\n}\r\n\r\n//define Queue class with linked list implementation\r\nclass QueueClass {\r\n    constructor() {\r\n        this.head = null;\r\n        this.tail = null;\r\n    }\r\n    enqueue (data) {\r\n        if (this.head == null) {\r\n            this.tail = new Node(data);\r\n            this.head = this.tail;\r\n        } else {\r\n            this.tail.next = new Node(data);\r\n            this.tail = this.tail.next;\r\n        }\r\n    }\r\n    dequeue () {\r\n        if (this.head == null) {\r\n            return undefined;\r\n        } else {\r\n            const temp = this.head;\r\n            this.head = this.head.next;\r\n            if (this.head == null)\r\n                this.tail = null;\r\n            return temp.value;\r\n        }\r\n    }\r\n    peek () {\r\n        if (this.head == null) {\r\n            return undefined;\r\n        } else {\r\n            return this.head.value;\r\n        }\r\n    }\r\n}\r\n\r\n//returns a list of react element components from the queue component linked list\r\nconst QueueDisplay = (props) => {\r\n\tvar current = props.queue.head;\r\n    var index = 0;\r\n    var componentList = [];\r\n    while(current != null) {\r\n        componentList.push(<Element key={index} value={current.value} />);\r\n        current = current.next;\r\n        index++;\r\n    }\r\n    return componentList;\r\n}\r\n\r\n//main react component for queue\r\nconst Queue = () => {\r\n\t\r\n\tconst [, forceRender] = useState(0);\r\n\tconst [queue, setQueue] = useState(new QueueClass());\r\n\tconst queueInput = useRef();\r\n\tconst queueOutput = useRef();\r\n\t\r\n\t//We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\t\r\n\t//sets queue to a randomly generated queue\r\n    const randomQueue = () => {\r\n        const size = randInt(10, 60);\r\n        var newQueue = new QueueClass();\r\n        for (let i = 0; i < size; i++)\r\n            newQueue.enqueue(randInt(-999,1000));\r\n        setQueue(newQueue);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize queue to random queue\r\n    useEffect(randomQueue, []);\r\n\r\n\tconst enqueue = () => {\r\n\t\tvar data = parseInt(queueInput.current.value);\r\n        if(isNaN(data))\r\n            data = 0;\r\n\t\tqueue.enqueue(data);\r\n\t\tforceUpdate();\r\n\t\tqueueInput.current.value = null;\r\n\t}\r\n\t\r\n\tconst dequeue = () => {\r\n\t\tconst data = queue.dequeue();\r\n\t\tforceUpdate();\r\n\t\tif (data === undefined)\r\n\t\t\tqueueOutput.current.value = \"None\";\r\n\t\telse\r\n\t\t\tqueueOutput.current.value = data;\r\n\t}\r\n\t\r\n\tconst peek = () => {\r\n\t\tconst data = queue.peek();\r\n\t\tif (data === undefined)\r\n\t\t\tqueueOutput.current.value = \"None\";\r\n\t\telse\r\n\t\t\tqueueOutput.current.value = data;\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<div className=\"queue\">\r\n\t\t\t<div className=\"controls\">\r\n\t\t\t\t<button id=\"randomButton\" onClick={randomQueue}>Random</button>\r\n                <br />\r\n\t\t\t\t<button id=\"enqueueButton\" onClick={enqueue}>Enqueue</button>\r\n\t\t\t\t<input id=\"queueInput\" ref={queueInput} type=\"text\" />\r\n\t\t\t\t<br />\r\n\t\t\t\t<button id=\"dequeueButton\" onClick={dequeue}>Dequeue</button>\r\n\t\t\t\t<br />\r\n\t\t\t\t<input id=\"queueOutput\" ref={queueOutput} type=\"text\" readOnly />\r\n\t\t\t\t<br />\r\n\t\t\t\t<button id=\"peekButton\" onClick={peek}>Peek</button>\r\n\t\t\t\t<br />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"visualization\">\r\n\t\t\t\t<div className=\"queueEnd\">\r\n                <p>Dequeue &#x2190;</p>\r\n                </div>\r\n                <QueueDisplay queue={queue} />\r\n\t\t\t\t<div className=\"queueEnd\">\r\n\t\t\t\t\t<p>&#x2190; Enqueue</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Queue;","import React from 'react';\r\nimport './BinaryTreeDisplay.scss';\r\nimport Element from '../Element/Element';\r\n\r\n\r\n//react component for a single level in a binary tree\r\nconst BinaryTreeLevel = (props) => {\r\n    return props.list.map((node, index) => {\r\n        if (node === null)\r\n            return <Element key={index} value={\"\"} color={\"none\"} />;\r\n        else if (node === props.green)\r\n            return <Element key={index} value={node.value} color=\"green\" />;\r\n        else if (node === props.pink)\r\n            return <Element key={index} value={node.value} color=\"pink\" />;\r\n        else if (node === props.yellow)\r\n            return <Element key={index} value={node.value} color=\"yellow\" />;\r\n        else if (node === props.border)\r\n            return <Element key={index} value={node.value} border=\"bordered\" />;\r\n        else\r\n            return <Element key={index} value={node.value} />;\r\n    });\r\n}\r\n\r\n//react component for lines between binary tree nodes\r\nconst BinaryTreeLineLevel = (props) => {\r\n    var lines = [];\r\n    for (let i = 0; i < props.list.length; i++) {\r\n        if (props.list[i] === null)\r\n            lines.push(<div key={lines.length} className=\"binary-tree-line-none\"></div>);\r\n        else if (i % 2 === 0)\r\n            lines.push(<div key={lines.length} className=\"binary-tree-line-left\"></div>);\r\n        else\r\n            lines.push(<div key={lines.length} className=\"binary-tree-line-right\"></div>);\r\n        \r\n    }\r\n    return lines;\r\n}\r\n\r\n//react component to display the tree\r\nconst BinaryTreeDisplay = (props) => {\r\n    var levelComponents = [];\r\n    var nextQueue = [];\r\n    if (props.tree !== null)\r\n        nextQueue.push(props.tree.root);\r\n    var currQueue = [];\r\n    while (true) {\r\n        //continue breadth-first traversal creating BinaryTreeLevel component every iteration\r\n        currQueue = nextQueue;\r\n        nextQueue = [];\r\n        for (let i = 0; i < currQueue.length; i++) {\r\n            //use null as placeholder empty nodes in a level\r\n            if (currQueue[i] === null) {\r\n                nextQueue.push(null);\r\n                nextQueue.push(null);\r\n            } else {\r\n                nextQueue.push(currQueue[i].left);\r\n                nextQueue.push(currQueue[i].right);\r\n            }\r\n        }\r\n        //add a level of nodes\r\n        levelComponents.push(\r\n            <div key={levelComponents.length} className=\"binary-tree-level\">\r\n                <BinaryTreeLevel list={currQueue} border={props.border} green={props.green} pink={props.pink} yellow={props.yellow} />\r\n            </div>\r\n        );\r\n        //break loop if entire level is null\r\n        var allNull = true;\r\n        for (let i = 0; i < nextQueue.length; i++) {\r\n            if (nextQueue[i] !== null) {\r\n                allNull = false;\r\n            }\r\n        }\r\n        if (allNull) {\r\n            break;\r\n        }\r\n        //add a level of lines to the next level\r\n        levelComponents.push(\r\n            <div key={levelComponents.length} className=\"binary-tree-line-level\">\r\n                <BinaryTreeLineLevel list={nextQueue} />\r\n            </div>\r\n        );\r\n    }\r\n    return levelComponents;\r\n}\r\n\r\nexport default BinaryTreeDisplay;","import React, { useState, useEffect } from 'react';\r\nimport './BinaryTree.scss';\r\nimport BinaryTreeDisplay from './BinaryTreeDisplay.js';\r\n\r\n//class for node in binary tree\r\nexport class BinaryTreeNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\n//class for binary tree data structure\r\nexport class BinaryTreeClass {\r\n    constructor(root) {\r\n        this.root = root;\r\n    }\r\n}\r\n\r\n//main react component for binary tree\r\nconst BinaryTree = () => {\r\n\r\n    const [tree, setTree] = useState(null);\r\n    \r\n    //function to generate random tree\r\n    const randomTree = () => {\r\n        var newNodeChance = 0.9;\r\n        const levels = randInt(1,5);\r\n        var newTree = new BinaryTreeClass(new BinaryTreeNode(randInt(-999,1000)));\r\n        var nodes = [newTree.root];\r\n        var newNodes = [];\r\n        for (let level = 0; level < levels; level++) {\r\n            for (let i = 0; i < nodes.length; i++) {\r\n                if (Math.random() < Math.pow(newNodeChance, level)) {\r\n                    nodes[i].left = new BinaryTreeNode(randInt(-999,1000));\r\n                    newNodes.push(nodes[i].left);\r\n                }\r\n                if (Math.random() < Math.pow(newNodeChance, level)) {\r\n                    nodes[i].right = new BinaryTreeNode(randInt(-999,1000));\r\n                    newNodes.push(nodes[i].right);\r\n                }\r\n            }\r\n            nodes = newNodes;\r\n            newNodes = [];\r\n        }\r\n        setTree(newTree);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize tree to a random tree\r\n    useEffect(randomTree, []);\r\n\r\n    return (\r\n        <div className=\"binary-tree\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomTree}>Random</button>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <BinaryTreeDisplay tree={tree} />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BinaryTree;","import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './BinarySearchTree.scss';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\r\nimport Element from '../Element/Element.js';\r\n\r\n//class for node in binary tree\r\nclass BinaryTreeNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\n//class for binary search tree\r\nclass BinarySearchTreeClass {\r\n    constructor(){\r\n        this.root = null;\r\n        this.height = 0;\r\n    }\r\n\r\n    insert(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        var height = 1;\r\n        while (current != null) {\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n                height++;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n                height++;\r\n            } else\r\n                return;\r\n        }\r\n        if (parent === null)\r\n            this.root = new BinaryTreeNode(value);\r\n        else if (value < parent.value)\r\n            parent.left = new BinaryTreeNode(value);\r\n        else\r\n            parent.right = new BinaryTreeNode(value);\r\n        if (height > this.height)\r\n            this.height = height;\r\n    }\r\n\r\n    remove(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        //find a node equal to value else exit function\r\n        while (true) {\r\n            if (current === null)\r\n                return;\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n            } else\r\n                break;\r\n        }\r\n        //if node has no children set parent child to null\r\n        if (current.left === null && current.right === null) {\r\n            if (parent === null)\r\n                this.root = null;\r\n            else if (value < parent.value)\r\n                parent.left = null;\r\n            else\r\n                parent.right = null;\r\n        }\r\n        //if node has 1 child set parent child to current child\r\n        else if (current.right === null) {\r\n            if (parent === null)\r\n                this.root = current.left;\r\n            else if (value < parent.value)\r\n                parent.left = current.left;\r\n            else\r\n                parent.right = current.left;\r\n        }\r\n        else if (current.left === null) {\r\n            if (parent === null)\r\n                this.root = current.right;\r\n            else if (value < parent.value)\r\n                parent.left = current.right;\r\n            else\r\n                parent.right = current.right;\r\n        }\r\n        //if node has 2 children set parent child to leftmost node of right subtree of current, and delete that\r\n        else {\r\n            //find the leftmost child of right subtree of current, set current to that value\r\n            var leftmostChild = current.right;\r\n            parent = current;\r\n            while (leftmostChild.left !== null) {\r\n                parent = leftmostChild;\r\n                leftmostChild = leftmostChild.left;\r\n            }\r\n            current.value = leftmostChild.value;\r\n            //delete the leftmost child of right subtree\r\n            current = leftmostChild;\r\n            if (current.left === null && current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = null;\r\n                else\r\n                    parent.right = null;\r\n            }\r\n            else if (current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.left;\r\n                else\r\n                    parent.right = current.left;\r\n            }\r\n            else {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.right;\r\n                else\r\n                    parent.right = current.right;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//react component for binary search tree\r\nconst BinarySearchTree = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [tree, setTree] = useState(new BinarySearchTreeClass());\r\n    const insertInput = useRef();\r\n    const removeInput = useRef();\r\n    const findInput = useRef();\r\n    const speedSlider = useRef();\r\n    const focus = useRef();\r\n    const green = useRef();\r\n    const pink = useRef();\r\n    const yellow = useRef();\r\n    const interval = useRef();\r\n    const animating = useRef();\r\n    const animationFunction = useRef();\r\n    const animationValue = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to generate a random BST\r\n    const randomTree = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        const height = randInt(2,6);\r\n        var newTree = new BinarySearchTreeClass();\r\n        var insertValue = null;\r\n        while(newTree.height <= height) {\r\n            insertValue = randInt(-999,1000);\r\n            newTree.insert(insertValue);\r\n        }\r\n        newTree.remove(insertValue);\r\n        setTree(newTree);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //function to pause or continue animation\r\n    const toggleAnimation = useCallback(() => {\r\n        if (animating.current) {\r\n            clearInterval(interval.current);\r\n            animating.current = false;\r\n            focus.current = null;\r\n            animationFunction.current = null;\r\n            animationValue.current = null;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            green.current = null;\r\n            yellow.current = null;\r\n            animating.current = true;\r\n        }\r\n    }, []);\r\n    \r\n    //initialize the tree to a random BST\r\n    useEffect(randomTree, [toggleAnimation]);\r\n\r\n    //function to insert into the binary search tree on button click\r\n    const insert = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        var data = parseInt(insertInput.current.value);\r\n        if (isNaN(data))\r\n            data = randInt(-999, 1000);\r\n        insertInput.current.value = null;\r\n        if (tree.root === null) {\r\n            tree.insert(data);\r\n            green.current = tree.root;\r\n            forceUpdate();\r\n        } else {\r\n            focus.current = tree.root;\r\n            forceUpdate();\r\n            animationFunction.current = insertStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    //function to do a single step of insertion animation\r\n    const insertStep = () => {\r\n        if (animationValue.current < focus.current.value) {\r\n            if (focus.current.left === null) {\r\n                tree.insert(animationValue.current);\r\n                green.current = focus.current.left;\r\n                toggleAnimation();\r\n            } else\r\n                focus.current = focus.current.left;\r\n        } else if (animationValue.current > focus.current.value) {\r\n            if (focus.current.right === null) {\r\n                tree.insert(animationValue.current);\r\n                green.current = focus.current.right;\r\n                toggleAnimation();\r\n            } else\r\n                focus.current = focus.current.right;\r\n        } else {\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    //function to remove from binary search tree on button click\r\n    const remove = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        if(tree.root !== null) {\r\n            var data = parseInt(removeInput.current.value);\r\n            if (isNaN(data))\r\n                data = tree.root.value;\r\n            focus.current = tree.root;\r\n            if (focus.current.value === data)\r\n                pink.current = focus.current;\r\n            forceUpdate();\r\n            animationFunction.current = removeStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n        }\r\n        removeInput.current.value = null;\r\n    }\r\n\r\n    //function to do a single step of remove animation\r\n    const removeStep = () => {\r\n        if (animationValue.current < focus.current.value) {\r\n            if (focus.current.left === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.left;\r\n                if (focus.current.value === animationValue.current)\r\n                    pink.current = focus.current;\r\n            }\r\n        } else if (animationValue.current > focus.current.value) {\r\n            if (focus.current.right === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.right;\r\n                if (focus.current.value === animationValue.current)\r\n                    pink.current = focus.current;\r\n            }\r\n        } else {\r\n            tree.remove(animationValue.current);\r\n            pink.current = null;\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    //function to start find animation\r\n    const find = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        if(tree.root !== null) {\r\n            var data = parseInt(findInput.current.value);\r\n            if (isNaN(data))\r\n                data = tree.root.value;\r\n            focus.current = tree.root;\r\n            animationFunction.current = findStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n            if (focus.current.value === data)\r\n                yellow.current = focus.current;\r\n            forceUpdate();\r\n        }\r\n        findInput.current.value = null;\r\n    }\r\n\r\n    //function to to a single step of find animation\r\n    const findStep = () => {\r\n        if (animationValue.current < focus.current.value) {\r\n            if (focus.current.left === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.left;\r\n                if (focus.current.value === animationValue.current)\r\n                    yellow.current = focus.current;\r\n            }\r\n        } else if (animationValue.current > focus.current.value) {\r\n            if (focus.current.right === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.right;\r\n                if (focus.current.value === animationValue.current)\r\n                    yellow.current = focus.current;\r\n            }\r\n        } else {\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    //changes the animation speed when the slider changes\r\n    const updateSpeed = () => {\r\n        if (animationFunction.current != null) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-search-tree\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" onClick={randomTree}>Random</button>\r\n                    <br />\r\n                    <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                    <input ref={insertInput} type=\"text\"></input>\r\n                    <br />\r\n                    <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                    <input ref={removeInput} type=\"text\"></input>\r\n                    <br />\r\n                    <button id=\"findButton\" onClick={find}>Find</button>\r\n                    <input ref={findInput} type=\"text\"></input>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <BinaryTreeDisplay tree={tree} border={focus.current} green={green.current} pink={pink.current} yellow={yellow.current} />\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element border=\"bordered\"></Element>\r\n                <p>= Current Focus</p>\r\n                <br />\r\n                <Element color=\"green\"></Element>\r\n                <p>= Last Inserted Element</p>\r\n                < br />\r\n                <Element color=\"pink\"></Element>\r\n                <p>= Element to Delete</p>\r\n                <br />\r\n                <Element color=\"yellow\"></Element>\r\n                <p>= Last Found Element</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BinarySearchTree;","import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './AvlTree.scss';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\r\nimport Element from '../Element/Element.js';\r\n\r\n//class for node in binary tree\r\nclass BinaryTreeNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n\r\n}\r\n\r\nfunction getParent(node, tree) {\r\n    var parent = null;\r\n    var cur = tree.root;\r\n    if (node != null) {\r\n\r\n        while (cur !== node) {\r\n            if (node.value > cur.value) {\r\n                parent = cur;\r\n                cur = parent.right;\r\n            }\r\n            else {\r\n                parent = cur;\r\n                cur = parent.left;\r\n            }\r\n        }\r\n        return parent;\r\n    }\r\n    else console.log(\"node is null, no parent\")\r\n}\r\n\r\nfunction getHeight(node) {\r\n\r\n    if (typeof node === \"object\" && node != null) {\r\n\r\n        if (getHeight(node.left) > getHeight(node.right)) {\r\n            return 1 + getHeight(node.left);\r\n        }\r\n        else return 1 + getHeight(node.right);\r\n    }\r\n    else return 0;\r\n}\r\n\r\n\r\nfunction getBalance(node) {\r\n    if (node !== null && typeof node != \"undefined\") {\r\n        return getHeight(node.right) - getHeight(node.left);\r\n    }\r\n}\r\n\r\nfunction rotateRight(node, tree) {\r\n    var newRoot = node.left;\r\n    if (node === tree.root) tree.root = newRoot;\r\n    var T2 = newRoot.right;\r\n\r\n    newRoot.right = node;\r\n    node.left = T2;\r\n\r\n}\r\n\r\nfunction rotateLeft(node, tree) {\r\n    var newRoot = node.right;\r\n    if (node === tree.root) tree.root = newRoot;\r\n    var T2 = newRoot.left;\r\n    newRoot.left = node;\r\n    node.right = T2;\r\n}\r\n\r\nfunction getLeftmost(node) {\r\n    var leftmost = node;\r\n    if (leftmost != null) {\r\n        while (leftmost.left != null) {\r\n            leftmost = leftmost.left;\r\n        }\r\n    }\r\n    return leftmost;\r\n}\r\n\r\nfunction getRightMost(node) {\r\n    var rightmost = node;\r\n    if (rightmost != null) {\r\n        while (rightmost.right != null) {\r\n            rightmost = rightmost.right;\r\n        }\r\n    }\r\n    return rightmost;\r\n}\r\n\r\n//class for binary search tree\r\nclass AvlTreeClass {\r\n    constructor() {\r\n        this.root = null;\r\n        this.height = 0;\r\n        this.list = [];\r\n    }\r\n\r\n\r\n\r\n\r\n    inOrder(node) {\r\n        if (node == null) {\r\n            return\r\n        }\r\n        this.inOrder(node.left);\r\n        this.list.push(node.value);\r\n        this.inOrder(node.right);\r\n    }\r\n\r\n    insertWithRot(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        var height = 1;\r\n        while (current != null) {\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n                height++;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n                height++;\r\n            } else\r\n                return;\r\n        }\r\n        if (parent === null)\r\n            this.root = new BinaryTreeNode(value);\r\n        else if (value < parent.value)\r\n            parent.left = new BinaryTreeNode(value);\r\n        else\r\n            parent.right = new BinaryTreeNode(value);\r\n        if (height > this.height)\r\n            this.height = height;\r\n\r\n        //do rotations\r\n    }\r\n\r\n    insert(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        var height = 1;\r\n        while (current != null) {\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n                height++;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n                height++;\r\n            } else\r\n                return;\r\n        }\r\n        if (parent === null)\r\n            this.root = new BinaryTreeNode(value);\r\n        else if (value < parent.value)\r\n            parent.left = new BinaryTreeNode(value);\r\n        else\r\n            parent.right = new BinaryTreeNode(value);\r\n        if (height > this.height)\r\n            this.height = height;\r\n    }\r\n\r\n    remove(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        //find a node equal to value else exit function\r\n        while (true) {\r\n            if (current === null)\r\n                return;\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n            } else\r\n                break;\r\n        }\r\n        //if node has no children set parent child to null\r\n        if (current.left === null && current.right === null) {\r\n            if (parent === null)\r\n                this.root = null;\r\n            else if (value < parent.value)\r\n                parent.left = null;\r\n            else\r\n                parent.right = null;\r\n        }\r\n        //if node has 1 child set parent child to current child\r\n        else if (current.right === null) {\r\n            if (parent === null)\r\n                this.root = current.left;\r\n            else if (value < parent.value)\r\n                parent.left = current.left;\r\n            else\r\n                parent.right = current.left;\r\n        }\r\n        else if (current.left === null) {\r\n            if (parent === null)\r\n                this.root = current.right;\r\n            else if (value < parent.value)\r\n                parent.left = current.right;\r\n            else\r\n                parent.right = current.right;\r\n        }\r\n        //if node has 2 children set parent child to leftmost node of right subtree of current, and delete that\r\n        else {\r\n            //find the leftmost child of right subtree of current, set current to that value\r\n            var leftmostChild = current.right;\r\n            parent = current;\r\n            while (leftmostChild.left !== null) {\r\n                parent = leftmostChild;\r\n                leftmostChild = leftmostChild.left;\r\n            }\r\n            current.value = leftmostChild.value;\r\n            //delete the leftmost child of right subtree\r\n            current = leftmostChild;\r\n            if (current.left === null && current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = null;\r\n                else\r\n                    parent.right = null;\r\n            }\r\n            else if (current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.left;\r\n                else\r\n                    parent.right = current.left;\r\n            }\r\n            else {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.right;\r\n                else\r\n                    parent.right = current.right;\r\n            }\r\n        }\r\n    }\r\n\r\n    treeHeight() {\r\n        return getHeight(this.root);\r\n    }\r\n\r\n}\r\n\r\n//converts sorted array to AVL Tree\r\nfunction sortedArrayToAVL(arr, start, end) {\r\n    if (start > end) {\r\n        return null;\r\n    }\r\n\r\n    var mid = parseInt((start + end) / 2);\r\n    var node = new BinaryTreeNode(arr[mid]);\r\n\r\n    node.left = sortedArrayToAVL(arr, start, mid - 1);\r\n\r\n    node.right = sortedArrayToAVL(arr, mid + 1, end);\r\n    return node;\r\n}\r\n\r\n//react component for binary search tree\r\nconst AvlTree = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [tree, setTree] = useState(new AvlTreeClass());\r\n    const secondRot = useRef(false);\r\n    const familyLine = useRef([]);\r\n    const insertInput = useRef();\r\n    const removeInput = useRef();\r\n    const findInput = useRef();\r\n    const speedSlider = useRef();\r\n    const focus = useRef();\r\n    const green = useRef();\r\n    const pink = useRef();\r\n    const yellow = useRef();\r\n    const interval = useRef();\r\n    const animating = useRef();\r\n    const animationFunction = useRef();\r\n    const animationValue = useRef();\r\n    const status = useRef(\"Tree is balanced\");\r\n\r\n    //We call update on fake state variable to force rerender\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    //function to generate a random BST\r\n    const randomTree = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        const height = randInt(2, 6);\r\n        var newTree = new AvlTreeClass();\r\n        var insertValue = null;\r\n        while (newTree.height <= height) {\r\n            insertValue = randInt(-999, 1000);\r\n            newTree.insert(insertValue);\r\n        }\r\n\r\n        newTree.remove(insertValue);\r\n        newTree.inOrder(newTree.root)\r\n\r\n\r\n        var treeList = newTree.list;\r\n        var n = newTree.list.length;\r\n        newTree.root = sortedArrayToAVL(treeList, 0, n - 1);\r\n\r\n        setTree(newTree);\r\n    }\r\n\r\n\r\n\r\n\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min) + min);\r\n    }\r\n\r\n    //function to pause or continue animation\r\n    const toggleAnimation = useCallback(() => {\r\n\r\n        if (animating.current) {\r\n            clearInterval(interval.current);\r\n            animating.current = false;\r\n            focus.current = null;\r\n            animationFunction.current = null;\r\n            animationValue.current = null;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n            green.current = null;\r\n            yellow.current = null;\r\n            animating.current = true;\r\n        }\r\n    }, []);\r\n\r\n    //initialize the tree to a random BST\r\n    useEffect(randomTree, [toggleAnimation]);\r\n\r\n    //function to insert into the binary search tree on button click\r\n    const insert = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        var data = parseInt(insertInput.current.value);\r\n        if (isNaN(data))\r\n            data = randInt(-999, 1000);\r\n        insertInput.current.value = null;\r\n        if (tree.root === null) {\r\n            tree.insert(data);\r\n            green.current = tree.root;\r\n            forceUpdate();\r\n        } else {\r\n            focus.current = tree.root;\r\n            forceUpdate();\r\n            animationFunction.current = insertStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n        }\r\n        familyLine.current = [];\r\n    }\r\n\r\n    //function to do a single step of insertion animation\r\n    const insertStep = () => {\r\n        status.current = \"Inserting node\";\r\n        forceUpdate();\r\n        if (animationValue.current < focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.left === null) {\r\n                tree.insert(animationValue.current);\r\n                //familyLine.current.push(focus.current);\r\n                green.current = focus.current.left;\r\n                //toggleAnimation();\r\n                //animationFunction.current = rotateStep();\r\n                focus.current = focus.current.left;\r\n            } else\r\n                focus.current = focus.current.left;\r\n\r\n        } else if (animationValue.current > focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.right === null) {\r\n                tree.insert(animationValue.current);\r\n                //familyLine.current.push(focus.current);\r\n                green.current = focus.current.right;\r\n                focus.current = focus.current.right;\r\n                //toggleAnimation();\r\n                //animationFunction.current = rotateStep();\r\n            } else\r\n                focus.current = focus.current.right;\r\n\r\n        } else {\r\n            animationFunction.current = rotateStep;\r\n        }\r\n\r\n    }\r\n\r\n    //function to remove from binary search tree on button click\r\n    const remove = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        if (tree.root !== null) {\r\n            var data = parseInt(removeInput.current.value);\r\n            if (isNaN(data))\r\n                data = tree.root.value;\r\n            focus.current = tree.root;\r\n            if (focus.current.value === data)\r\n                pink.current = focus.current;\r\n            forceUpdate();\r\n            animationFunction.current = removeStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n        }\r\n        removeInput.current.value = null;\r\n        familyLine.current = [];\r\n    }\r\n\r\n    //function to do a single step of remove animation\r\n    const removeStep = () => {\r\n        status.current = \"Removing node\";\r\n        if (animationValue.current < focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.left === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.left;\r\n                if (focus.current.value === animationValue.current)\r\n                    pink.current = focus.current;\r\n            }\r\n        } else if (animationValue.current > focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.right === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.right;\r\n                if (focus.current.value === animationValue.current)\r\n                    pink.current = focus.current;\r\n            }\r\n        } else {\r\n            if (familyLine.current.length === 0) {\r\n                var rightTree = tree.root.right;\r\n                if (rightTree != null) {\r\n                    if (getParent(getLeftmost(rightTree), tree) === tree.root) {\r\n                        tree.remove(animationValue.current);\r\n                        familyLine.current.push(tree.root);\r\n                        pink.current = null;\r\n                        animationFunction.current = rotateStepDelete;\r\n                        return;\r\n                    }\r\n                    else familyLine.current.push(getParent(getLeftmost(rightTree), tree));\r\n\r\n                }\r\n                else {\r\n\r\n                    if (getParent(getRightMost(tree.root.left), tree) === tree.root) {\r\n                        tree.remove(animationValue.current);\r\n                        familyLine.current.push(tree.root);\r\n                        pink.current = null;\r\n                        animationFunction.current = rotateStepDelete;\r\n                        return;\r\n                    }\r\n                    else familyLine.current.push(getParent(getRightMost(tree.root.left), tree));\r\n\r\n                }\r\n            }\r\n            tree.remove(animationValue.current);\r\n\r\n            pink.current = null;\r\n            animationFunction.current = rotateStepDelete;\r\n        }\r\n    }\r\n\r\n\r\n    //function to start find animation\r\n    const find = () => {\r\n        if (animating.current) {\r\n            familyLine.current = [];\r\n            toggleAnimation();\r\n        }\r\n        if (tree.root !== null) {\r\n            var data = parseInt(findInput.current.value);\r\n            if (isNaN(data))\r\n                data = tree.root.value;\r\n            focus.current = tree.root;\r\n            animationFunction.current = findStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n            if (focus.current.value === data)\r\n                yellow.current = focus.current;\r\n            forceUpdate();\r\n        }\r\n        findInput.current.value = null;\r\n    }\r\n\r\n    //function to to a single step of find animation\r\n    const findStep = () => {\r\n        if (animationValue.current < focus.current.value) {\r\n            if (focus.current.left === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.left;\r\n                if (focus.current.value === animationValue.current)\r\n                    yellow.current = focus.current;\r\n            }\r\n        } else if (animationValue.current > focus.current.value) {\r\n            if (focus.current.right === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.right;\r\n                if (focus.current.value === animationValue.current)\r\n                    yellow.current = focus.current;\r\n            }\r\n        } else {\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    const rotateStepDelete = () => {\r\n\r\n        var family = [];\r\n        for (var i = 0; i < familyLine.current.length; i++) {\r\n            family.push(familyLine.current[i]);\r\n        }\r\n\r\n        if (family.length === 0) toggleAnimation();\r\n        else {\r\n\r\n            //z is first unbalanced node\r\n\r\n            var z = family.pop();\r\n\r\n\r\n\r\n            while (family.length > 0 && Math.abs(getBalance(z)) < 2) {\r\n                z = family.pop();\r\n\r\n            }\r\n            if (Math.abs(getBalance(z)) < 2) {\r\n                status.current = \"Tree is balanced\";\r\n\r\n                toggleAnimation();\r\n            }\r\n\r\n            familyLine.current = [];\r\n            familyLine.current.push(z);\r\n            //determine largest height child\r\n\r\n            if (z == null || typeof z == \"undefined\") {\r\n                status.current = \"Tree is empty\"\r\n                toggleAnimation();\r\n            }\r\n            else if (z.left != null || z.right != null) {\r\n                var y = null; //largest height child\r\n                if (getHeight(z.left) >= getHeight(z.right)) {\r\n                    y = z.left\r\n\r\n                }\r\n                else y = z.right;\r\n                var x = null;\r\n                if (y != null) {\r\n                    if (y.value < z.value) {\r\n                        if (getHeight(y.left) >= getHeight(y.right)) x = y.left;\r\n                        else x = y.right;\r\n                    }\r\n                    else {\r\n                        if (getHeight(y.left) > getHeight(y.right)) x = y.left;\r\n                        else x = y.right;\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n            ////left left\r\n            if (getBalance(z) < -1 && x.value < y.value) {\r\n                rotateRight(z, tree);\r\n                status.current = \"Rotating Node: \" + z.value + \" right\"\r\n                let parent = getParent(y, tree);\r\n                if (parent != null) {\r\n                    if (parent.value < z.value) {\r\n                        parent.right = y;\r\n                    }\r\n                    else parent.left = y;\r\n                }\r\n                //familyLine.current.shift();\r\n            }\r\n\r\n            ////left right\r\n            if (getBalance(z) < -1 && x.value > y.value) {\r\n\r\n                rotateLeft(y, tree);\r\n                status.current = \"Rotating Node: \" + y.value + \" left\"\r\n                z.left = x;\r\n\r\n\r\n            }\r\n\r\n            ////right left\r\n            if (getBalance(z) > 1 && x.value < y.value) {\r\n\r\n                rotateRight(y, tree);\r\n                status.current = \"Rotating Node: \" + y.value + \" right\"\r\n                z.right = x;\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n            //right right\r\n            if (getBalance(z) > 1 && x.value > y.value) {\r\n                let parent = getParent(z, tree);\r\n                rotateLeft(z, tree);\r\n                status.current = \"Rotating Node: \" + z.value + \" left\"\r\n\r\n                if (parent != null) {\r\n                    if (parent.value < z.value) {\r\n                        parent.right = y;\r\n                    }\r\n                    else parent.left = y;\r\n                }\r\n                else tree.root = y;\r\n\r\n            }\r\n\r\n            forceUpdate();\r\n\r\n\r\n        }\r\n    }\r\n\r\n    const rotateStep = () => {\r\n\r\n        //create new array copy of family line\r\n        var family = [];\r\n        for (var i = 0; i < familyLine.current.length; i++) {\r\n            family.push(familyLine.current[i]);\r\n        }\r\n\r\n\r\n        //var inserted = green.current;\r\n\r\n        if (family.length === 0) toggleAnimation();\r\n        else {\r\n            var firstUnbalanced = family.pop();\r\n\r\n            //var child;\r\n\r\n            while (Math.abs(getBalance(firstUnbalanced)) < 2 && family.length > 0) {\r\n                firstUnbalanced = family.pop();\r\n\r\n            }\r\n\r\n\r\n            if (Math.abs(getBalance(firstUnbalanced)) < 2) {\r\n                //tree is balanced \r\n                status.current = \"Tree is balanced\"\r\n                toggleAnimation();\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n            //Left Left case\r\n            if (getBalance(firstUnbalanced) === -2 && getBalance(firstUnbalanced.left) === -1) {\r\n\r\n\r\n                let l = firstUnbalanced.left;\r\n                rotateRight(firstUnbalanced, tree);\r\n                status.current = \"Rotating Node: \" + firstUnbalanced.value + \" right\"\r\n\r\n                //insert on correct side\r\n                let grandP = family.pop();\r\n                if (grandP) {\r\n                    if (grandP.value < firstUnbalanced.value) {\r\n                        grandP.right = l;\r\n                    }\r\n                    else grandP.left = l;\r\n                } else tree.root = l;\r\n                secondRot.current = true;\r\n                familyLine.current.splice(familyLine.current.indexOf(l.right), 1);\r\n\r\n\r\n            }\r\n\r\n\r\n            //Left Right case\r\n            if (getBalance(firstUnbalanced) === -2 && getBalance(firstUnbalanced.left) === 1) {\r\n                let r = firstUnbalanced.left.right;\r\n                rotateLeft(firstUnbalanced.left, tree);\r\n                status.current = \"Rotating Node: \" + firstUnbalanced.left.value + \" left\";\r\n\r\n                firstUnbalanced.left = r;\r\n            }\r\n\r\n            //Right Right case\r\n            if (getBalance(firstUnbalanced) === 2 && getBalance(firstUnbalanced.right) === 1) {\r\n                let r = firstUnbalanced.right;\r\n                rotateLeft(firstUnbalanced, tree);\r\n                status.current = \"Rotating Node: \" + firstUnbalanced.value + \" left\";\r\n                //insert on correct side\r\n                let grandP = family.pop();\r\n                if (grandP) {\r\n                    if (grandP.value < firstUnbalanced.value) {\r\n                        grandP.right = r;\r\n                    }\r\n                    else grandP.left = r;\r\n                } else tree.root = r;\r\n                familyLine.current.splice(familyLine.current.indexOf(firstUnbalanced), 1);\r\n\r\n            }\r\n\r\n            //Right Left Case\r\n            if (getBalance(firstUnbalanced) === 2 && getBalance(firstUnbalanced.right) === -1) {\r\n                let l = firstUnbalanced.right.left;\r\n                rotateRight(firstUnbalanced.right, tree);\r\n                status.current = \"Rotating Node: \" + firstUnbalanced.right + \" right\";\r\n                familyLine.current.pop();\r\n                firstUnbalanced.right = l;\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n        }\r\n        forceUpdate();\r\n\r\n    }\r\n\r\n    //changes the animation speed when the slider changes\r\n    const updateSpeed = () => {\r\n        if (animationFunction.current != null) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-search-tree\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" onClick={randomTree}>Random</button>\r\n                    <br />\r\n                    <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                    <input ref={insertInput} type=\"text\"></input>\r\n                    <br />\r\n                    <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                    <input ref={removeInput} type=\"text\"></input>\r\n                    <br />\r\n                    <button id=\"findButton\" onClick={find}>Find</button>\r\n                    <input ref={findInput} type=\"text\"></input>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <BinaryTreeDisplay tree={tree} border={focus.current} green={green.current} pink={pink.current} yellow={yellow.current} />\r\n\r\n                    <p>{status.current}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element border=\"bordered\"></Element>\r\n                <p>= Current Focus</p>\r\n                <br />\r\n                <Element color=\"green\"></Element>\r\n                <p>= Last Inserted Element</p>\r\n                < br />\r\n                <Element color=\"pink\"></Element>\r\n                <p>= Element to Delete</p>\r\n                <br />\r\n                <Element color=\"yellow\"></Element>\r\n                <p>= Last Found Element</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default AvlTree;","import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './BinaryHeap.scss';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\r\nimport { BinaryTreeNode, BinaryTreeClass } from '../BinaryTree/BinaryTree.js';\r\n\r\n//class for binary heap data structure\r\nexport class BinaryHeapClass {\r\n    constructor() {\r\n        this.heap = [];\r\n        this.focus = null;\r\n        this.focusNode = null;\r\n        this.green = null;\r\n        this.greenNode = null;\r\n        this.pink = null;\r\n        this.pinkNode = null;\r\n    }\r\n\r\n    insert(value) {\r\n        this.heap.push(value);\r\n        var current = this.heap.length-1;\r\n        var parent = Math.floor((current-1)/2);\r\n        while(parent >= 0) {\r\n            if (this.heap[current] < this.heap[parent]) {\r\n                let temp = this.heap[parent];\r\n                this.heap[parent] = this.heap[current];\r\n                this.heap[current] = temp;\r\n                current = parent;\r\n                parent = Math.floor((current-1)/2);\r\n            } else\r\n                break;\r\n        }\r\n    }\r\n\r\n    remove() {\r\n        if (this.heap.length !== 0) {\r\n            var returnValue = this.heap[0];\r\n            if (this.heap.length === 1)\r\n                this.heap = [];\r\n            else {\r\n                this.heap[0] = this.heap.pop();\r\n                var current = 0;\r\n                while (current < this.heap.length) {\r\n                    if (2 * current + 2 < this.heap.length) {\r\n                        if (this.heap[current] <= this.heap[2 * current + 1] && this.heap[current] <= this.heap[2 * current + 2]) {\r\n                            break;\r\n                        } else if (this.heap[2 * current + 1] < this.heap[2 * current + 2]) {\r\n                            let temp = this.heap[current];\r\n                            this.heap[current] = this.heap[2 * current + 1];\r\n                            this.heap[2 * current + 1] = temp;\r\n                            current = 2 * current + 1;\r\n                        } else {\r\n                            let temp = this.heap[current];\r\n                            this.heap[current] = this.heap[2 * current + 2];\r\n                            this.heap[2 * current + 2] = temp;\r\n                            current = 2 * current + 2;\r\n                        }\r\n                    } else if (2 * current + 1 < this.heap.length) {\r\n                        if (this.heap[current] > this.heap[2 * current + 1]) {\r\n                            let temp = this.heap[current];\r\n                            this.heap[current] = this.heap[2 * current + 1];\r\n                            this.heap[2 * current + 1] = temp;\r\n                            current = 2 * current + 1;\r\n                        } else {\r\n                            break;\r\n                        }\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return returnValue;\r\n        }\r\n    }\r\n\r\n    getTree() {\r\n        var tree = new BinaryTreeClass(null);\r\n        this.focusNode = null;\r\n        this.greenNode = null;\r\n        this.pinkNode = null;\r\n        if (this.heap.length !== 0) {\r\n            tree.root = new BinaryTreeNode(this.heap[0]);\r\n            if (this.focus === 0)\r\n                this.focusNode = tree.root;\r\n            if (this.green === 0)\r\n                this.greenNode = tree.root;\r\n            if (this.pink === 0)\r\n                this.pinkNode = tree.root;\r\n            var nodes = [tree.root];\r\n            var newNodes = [];\r\n            var indices = [0];\r\n            var newIndices = [];\r\n            while (nodes.length !== 0) {\r\n                for (let i = 0; i < nodes.length; i++) {\r\n                    if (2*indices[i]+1 < this.heap.length) {\r\n                        nodes[i].left = new BinaryTreeNode(this.heap[2*indices[i]+1]);\r\n                        if (2*indices[i]+1 === this.focus)\r\n                            this.focusNode = nodes[i].left;\r\n                        if (2*indices[i]+1 === this.green)\r\n                            this.greenNode = nodes[i].left;\r\n                        if (2*indices[i]+1 === this.pink)\r\n                            this.pinkNode = nodes[i].left;\r\n                        newNodes.push(nodes[i].left);\r\n                        newIndices.push(2*indices[i]+1);\r\n                    }\r\n                    if (2*indices[i]+2 < this.heap.length) {\r\n                        nodes[i].right = new BinaryTreeNode(this.heap[2*indices[i]+2]);\r\n                        if (2*indices[i]+2 === this.focus)\r\n                            this.focusNode = nodes[i].right;\r\n                        if (2*indices[i]+2 === this.green)\r\n                            this.greenNode = nodes[i].right;\r\n                        if (2*indices[i]+2 === this.pink)\r\n                            this.pinkNode = nodes[i].right;\r\n                        newNodes.push(nodes[i].right);\r\n                        newIndices.push(2*indices[i]+2);\r\n                    }\r\n                }\r\n                nodes = newNodes;\r\n                newNodes = [];\r\n                indices = newIndices;\r\n                newIndices = [];\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n}\r\n\r\n//main react component for binary heap visualization\r\nconst BinaryHeap = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [heap, setHeap] = useState(new BinaryHeapClass());\r\n    const insertInput = useRef();\r\n    const speedSlider = useRef();\r\n    const interval = useRef();\r\n    const animating = useRef();\r\n    const animationFunction = useRef();\r\n    const animationCurrent = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to create a random heap\r\n    const randomHeap = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        const elements = randInt(2,32);\r\n        var newHeap = new BinaryHeapClass();\r\n        for (let i = 0; i < elements; i++)\r\n            newHeap.insert(randInt(-999,1000));\r\n        setHeap(newHeap);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //function to pause or continue animation\r\n    const toggleAnimation = useCallback(() => {\r\n        if (animating.current) {\r\n            clearInterval(interval.current);\r\n            animating.current = false;\r\n            animationFunction.current = null;\r\n            animationCurrent.current = null;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            animating.current = true;\r\n        }\r\n    }, []);\r\n\r\n    //initialize the tree to a random binary heap\r\n    useEffect(randomHeap, [toggleAnimation]);\r\n\r\n    //function to insert a value into the heap\r\n    const insert = () => {\r\n        if (!animating.current) {\r\n            var data = parseInt(insertInput.current.value);\r\n            if (isNaN(data))\r\n                data = randInt(-999, 1000);\r\n            insertInput.current.value = null;\r\n            heap.heap.push(data);\r\n            heap.pink = null;\r\n            heap.green = heap.heap.length - 1;\r\n            forceUpdate();\r\n            animationFunction.current = insertStep;\r\n            animationCurrent.current = heap.heap.length - 1;\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    //function to do a single step of insertion animation\r\n    const insertStep = () => {\r\n        var parent = Math.floor((animationCurrent.current-1)/2);\r\n        if (parent < 0)\r\n            toggleAnimation();\r\n        else {\r\n            if (heap.heap[parent] > heap.heap[animationCurrent.current]) {\r\n                let temp = heap.heap[parent];\r\n                heap.heap[parent] = heap.heap[animationCurrent.current];\r\n                heap.heap[animationCurrent.current] = temp;\r\n                animationCurrent.current = parent;\r\n                heap.green = animationCurrent.current;\r\n            } else\r\n                toggleAnimation();\r\n        }\r\n    }\r\n\r\n    //function to remove a value from the heap\r\n    const remove = () => {\r\n        if (!animating.current && heap.heap.length > 0) {\r\n            if (heap.heap.length === 1) {\r\n                heap.remove();\r\n                forceUpdate();\r\n            } else {\r\n                heap.green = null;\r\n                heap.pink = 0;\r\n                heap.focus = heap.heap.length-1;\r\n                forceUpdate();\r\n                animationFunction.current = removeStep;\r\n                animationCurrent.current = 0;\r\n                toggleAnimation();\r\n            }\r\n        }\r\n    }\r\n\r\n    //function to one step of remove animation\r\n    const removeStep = () => {\r\n        if (heap.focus !== null) {\r\n            heap.heap[0] = heap.heap.pop();\r\n            heap.focus = null;\r\n        } else {\r\n            if (2 * animationCurrent.current + 2 < heap.heap.length) {\r\n                if (heap.heap[animationCurrent.current] <= heap.heap[2 * animationCurrent.current + 1] && heap.heap[animationCurrent.current] <= heap.heap[2 * animationCurrent.current + 2]) {\r\n                    toggleAnimation();\r\n                } else if (heap.heap[2 * animationCurrent.current + 1] < heap.heap[2 * animationCurrent.current + 2]) {\r\n                    let temp = heap.heap[animationCurrent.current];\r\n                    heap.heap[animationCurrent.current] = heap.heap[2 * animationCurrent.current + 1];\r\n                    heap.heap[2 * animationCurrent.current + 1] = temp;\r\n                    animationCurrent.current = 2 * animationCurrent.current + 1;\r\n                    heap.pink = animationCurrent.current;\r\n                } else {\r\n                    let temp = heap.heap[animationCurrent.current];\r\n                    heap.heap[animationCurrent.current] = heap.heap[2 * animationCurrent.current + 2];\r\n                    heap.heap[2 * animationCurrent.current + 2] = temp;\r\n                    animationCurrent.current = 2 * animationCurrent.current + 2;\r\n                    heap.pink = animationCurrent.current;\r\n                }\r\n            } else if (2 * animationCurrent.current + 1 < heap.heap.length) {\r\n                if (heap.heap[animationCurrent.current] > heap.heap[2 * animationCurrent.current + 1]) {\r\n                    let temp = heap.heap[animationCurrent.current];\r\n                    heap.heap[animationCurrent.current] = heap.heap[2 * animationCurrent.current + 1];\r\n                    heap.heap[2 * animationCurrent.current + 1] = temp;\r\n                    animationCurrent.current = 2 * animationCurrent.current + 1;\r\n                    heap.pink = animationCurrent.current;\r\n                } else {\r\n                    toggleAnimation();\r\n                }\r\n            } else {\r\n                toggleAnimation();\r\n            }\r\n        }\r\n    }\r\n\r\n    //changes the animation speed when the slider changes\r\n    const updateSpeed = () => {\r\n        if (animationFunction.current != null) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-heap\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomHeap}>Random</button>\r\n                <br />\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <input ref={insertInput} type=\"text\"></input>\r\n                <br />\r\n                <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                <br />\r\n                <span className=\"labeledSlider\">\r\n                    <label>Animation Speed</label>\r\n                    <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                </span>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <BinaryTreeDisplay tree={heap.getTree()} border={heap.focusNode} green={heap.greenNode} pink={heap.pinkNode} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BinaryHeap;","import React, { useState, useRef, useEffect } from 'react';\r\nimport './HashTable.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//class for a hash table with linear probing\r\nclass HashTableClass {\r\n    constructor (size, loadFactor) {\r\n        this.array = [];\r\n        for (let i = 0; i < size; i++)\r\n            this.array.push(null);\r\n        this.elements = 0;\r\n        this.size = size;\r\n        this.LOADFACTOR = loadFactor;\r\n    }\r\n\r\n    //hash function to return normal modulus results with + or - numbers (value % size)\r\n    hash (value) {\r\n        return ((value % this.size)+this.size)%this.size;\r\n    }\r\n\r\n    resize () {\r\n        let oldArray = this.array;\r\n        this.array = [];\r\n        this.elements = 0;\r\n        for (let i = 0; i < 2*this.size; i++)\r\n            this.array.push(null);\r\n        this.size = 2*this.size;\r\n        for (let i = 0; i < oldArray.length; i++)\r\n            if (oldArray[i] !== null)\r\n                this.insert(oldArray[i]);\r\n    }\r\n\r\n    insert (value) {\r\n        if ((this.elements+1)/this.size > this.LOADFACTOR)\r\n            this.resize();\r\n        let hashCode = this.hash(value);\r\n        while (this.array[hashCode] !== null) {\r\n            hashCode++;\r\n            if (hashCode === this.array.length)\r\n                hashCode = 0;\r\n        }\r\n        this.array[hashCode] = value;\r\n        this.elements++;\r\n        return hashCode;\r\n    }\r\n\r\n    remove (value) {\r\n        let hashCode = this.hash(value);\r\n        while (this.array[hashCode] !== value) {\r\n            hashCode++;\r\n            if (hashCode === this.array.length)\r\n                hashCode = 0;\r\n            if (this.array[hashCode] === null)\r\n                return null;\r\n        }\r\n        this.array[hashCode] = null;\r\n        this.elements--;\r\n        return hashCode;\r\n    }\r\n\r\n    find (value) {\r\n        let hashCode = this.hash(value);\r\n        while (this.array[hashCode] !== value) {\r\n            hashCode++;\r\n            if (hashCode === this.array.length)\r\n                hashCode = 0;\r\n            if (this.array[hashCode] === null)\r\n                return null;\r\n        }\r\n        return hashCode;\r\n    }\r\n}\r\n\r\n//react component to display a hashtable\r\nconst HashTableDisplay = (props) => {\r\n    return props.hashTable.array.map((value, index) => {\r\n        if (index === props.green) {\r\n            return (\r\n                <div key={index} className=\"labeledElement\">\r\n                    <label>{index}</label>\r\n                    <Element value={value} color=\"green\"></Element>\r\n                </div>\r\n            );\r\n        } else if (index === props.pink) {\r\n            return (\r\n                <div key={index} className=\"labeledElement\">\r\n                    <label>{index}</label>\r\n                    <Element value={value} color=\"pink\"></Element>\r\n                </div>\r\n            );\r\n        } else if (index === props.yellow) {\r\n            return (\r\n                <div key={index} className=\"labeledElement\">\r\n                    <label>{index}</label>\r\n                    <Element value={value} color=\"yellow\"></Element>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div key={index} className=\"labeledElement\">\r\n                    <label>{index}</label>\r\n                    <Element value={value}></Element>\r\n                </div>\r\n            );\r\n        }\r\n    });\r\n}\r\n\r\n//react component for hash table visualization\r\nconst HashTable = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [hashTable, setHashTable] = useState(new HashTableClass(10, 0.5));\r\n    const randomSize = useRef();\r\n    const randomLF = useRef();\r\n    const buildSize = useRef();\r\n    const buildLF = useRef();\r\n    const insertInput = useRef();\r\n    const removeInput = useRef();\r\n    const findInput = useRef();\r\n    const lastInserted = useRef();\r\n    const lastRemoved = useRef();\r\n    const lastFound = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to create a random hashTable\r\n    const randomHashTable = () => {\r\n        lastInserted.current = null;\r\n        lastRemoved.current = null;\r\n        lastFound.current = null;\r\n        var size = parseInt(randomSize.current.value);\r\n        randomSize.current.value = null;\r\n        if (isNaN(size) || size < 1)\r\n            size = randInt(20, 100);\r\n        var loadFactor = parseFloat(randomLF.current.value);\r\n        randomLF.current.value = null;\r\n        if(isNaN(loadFactor) || loadFactor > 1.0 || loadFactor <= 0.0)\r\n            loadFactor = Math.random() * 0.5 + 0.25;\r\n        const newHashTable = new HashTableClass(size, loadFactor);\r\n        for (let i = 0; i < (size*loadFactor-1)*(Math.random()*0.75+0.25); i++)\r\n            newHashTable.insert(randInt(-999,1000));\r\n        setHashTable(newHashTable);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize to a random hash table\r\n    useEffect(randomHashTable, []);\r\n\r\n    //function to build an empty hash table\r\n    const build = () => {\r\n        lastInserted.current = null;\r\n        lastRemoved.current = null;\r\n        lastFound.current = null;\r\n        var size = parseInt(buildSize.current.value);\r\n        buildSize.current.value = null;\r\n        if (isNaN(size) || size < 1)\r\n            size = randInt(20, 100);\r\n        var loadFactor = parseFloat(buildLF.current.value);\r\n        buildLF.current.value = null;\r\n        if(isNaN(loadFactor) || loadFactor > 1.0 || loadFactor <= 0.0)\r\n            loadFactor = Math.random() * 0.5 + 0.25;\r\n        setHashTable(new HashTableClass(size, loadFactor));\r\n    }\r\n\r\n    //function to insert into hash table\r\n    const insert = () => {\r\n        lastInserted.current = null;\r\n        lastRemoved.current = null;\r\n        lastFound.current = null;\r\n        var data = parseInt(insertInput.current.value);\r\n        if (isNaN(data))\r\n            data = randInt(-999,1000);\r\n        lastInserted.current = hashTable.insert(data);\r\n        forceUpdate();\r\n        insertInput.current.value = null;\r\n    }\r\n\r\n    //function to remove from hash table\r\n    const remove = () => {\r\n        lastInserted.current = null;\r\n        lastRemoved.current = null;\r\n        lastFound.current = null;\r\n        var data = parseInt(removeInput.current.value);\r\n        if (!isNaN(data))\r\n            lastRemoved.current = hashTable.remove(data);\r\n        forceUpdate();\r\n        removeInput.current.value = null;\r\n    }\r\n\r\n    //function to find a value in the hash table\r\n    const find = () => {\r\n        lastInserted.current = null;\r\n        lastRemoved.current = null;\r\n        lastFound.current = null;\r\n        var data = parseInt(findInput.current.value);\r\n        if (!isNaN(data))\r\n            lastFound.current = hashTable.find(data);\r\n        forceUpdate();\r\n        findInput.current.value = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"hash-table\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" onClick={randomHashTable}>Rand</button>\r\n                    <span className=\"labeledInput\">\r\n                        <label>Size</label>\r\n                        <input id=\"randomSizeInput\" ref={randomSize} type=\"text\"></input>\r\n                    </span>\r\n                    <span className=\"labeledInput\">\r\n                        <label>Load Factor</label>\r\n                        <input id=\"randomLFInput\" ref={randomLF} type=\"text\"></input>\r\n                    </span>\r\n                    <br />\r\n                    <button id=\"buildButton\" onClick={build}>Build</button>\r\n                    <span className=\"labeledInput\">\r\n                        <label>Size</label>\r\n                        <input id=\"buildSizeInput\" ref={buildSize} type=\"text\"></input>\r\n                    </span>\r\n                    <span className=\"labeledInput\">\r\n                        <label>Load Factor</label>\r\n                        <input id=\"buildLFInput\" ref={buildLF} type=\"text\"></input>\r\n                    </span>\r\n                    <br />\r\n                    <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                    <input id=\"insertInput\" ref={insertInput} type=\"text\"></input>\r\n                    <br />\r\n                    <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                    <input id=\"removeInput\" ref={removeInput} type=\"text\"></input>\r\n                    <br />\r\n                    <button id=\"findButton\" onClick={find}>Find</button>\r\n                    <input id=\"findInput\" ref={findInput} type=\"text\"></input>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <HashTableDisplay hashTable={hashTable} green={lastInserted.current} pink={lastRemoved.current} yellow={lastFound.current} />\r\n                    <p>Current Load Factor: {(hashTable.elements / hashTable.size).toFixed(2)} / {(hashTable.LOADFACTOR).toFixed(2)}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element color=\"green\"></Element>\r\n                <p>= Last Inserted</p>\r\n                < br />\r\n                <Element color=\"pink\"></Element>\r\n                <p>= Last Removed</p>\r\n                <br />\r\n                <Element color=\"yellow\"></Element>\r\n                <p>= Last Found</p>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default HashTable;","import React, { useState, useRef, useEffect } from 'react';\r\nimport './Set.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//react component to display a set\r\nconst SetDisplay = (props) => {\r\n    var componentList = [];\r\n    componentList.push(<p className=\"curly-brace\" key={-1}>&#123;</p>);\r\n    componentList = componentList.concat([...props.set].map((value, index) => {\r\n        return <Element key={index} value={value}></Element>;\r\n    }));\r\n    componentList.push(<p className=\"curly-brace\" key={componentList.length}>&#125;</p>);\r\n    return componentList;\r\n}\r\n\r\n//react component for set visualization\r\nconst MySet = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [set, setSet] = useState(new Set());\r\n    const insertInput = useRef();\r\n    const removeInput = useRef();\r\n    const findInput = useRef();\r\n    const findOutput = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to create a random set\r\n    const randomSet = () => {\r\n        const size = randInt(20, 100);\r\n        const newSet = new Set();\r\n        for (let i = 0; i < size; i++)\r\n            newSet.add(randInt(-999,1000));\r\n        setSet(newSet);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //function to create an empty set\r\n    const emptySet = () => {\r\n        setSet(new Set());\r\n    }\r\n\r\n    //initialize to a random set\r\n    useEffect(randomSet, []);\r\n\r\n    //function to insert into set\r\n    const insert = () => {\r\n        var data = parseInt(insertInput.current.value);\r\n        if (isNaN(data))\r\n            data = randInt(-999,1000);\r\n        set.add(data);\r\n        forceUpdate();\r\n        insertInput.current.value = null;\r\n    }\r\n\r\n    //function to remove from set\r\n    const remove = () => {\r\n        var data = parseInt(removeInput.current.value);\r\n        if (!isNaN(data))\r\n            set.delete(data);\r\n        forceUpdate();\r\n        removeInput.current.value = null;\r\n    }\r\n\r\n    //function to find a value in the set\r\n    const find = () => {\r\n        var data = parseInt(findInput.current.value);\r\n        if (!isNaN(data)) {\r\n            if (set.has(data))\r\n                findOutput.current.value = data + \" is in set\"\r\n            else\r\n                findOutput.current.value = data + \" not in set\"\r\n        }\r\n        forceUpdate();\r\n        findInput.current.value = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"set\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomSet}>Random</button>\r\n                <br />\r\n                <button id=\"emptyButton\" onClick={emptySet}>Empty</button>\r\n                <br />\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <input id=\"insertInput\" ref={insertInput} type=\"text\"></input>\r\n                <br />\r\n                <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                <input id=\"removeInput\" ref={removeInput} type=\"text\"></input>\r\n                <br />\r\n                <button id=\"findButton\" onClick={find}>Find</button>\r\n                <input id=\"findInput\" ref={findInput} type=\"text\"></input>\r\n                <br />\r\n                <input id=\"findOutput\" ref={findOutput} type=\"text\" readOnly></input>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <SetDisplay set={set} />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default MySet;","import React, { useState, useRef, useEffect } from 'react';\r\nimport './Map.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//react component to display a map\r\nconst MapDisplay = (props) => {\r\n    var componentList = [];\r\n    props.map.forEach((value, key) => {\r\n        componentList.push(\r\n            <div key={componentList.length} className=\"map-pair\">\r\n                <Element value={key} />\r\n                <br />\r\n                <p className=\"map-arrow\">&#x2193;</p>\r\n                <br />\r\n                <Element value={value} color=\"green\" />\r\n            </div>\r\n        );\r\n    });\r\n    return componentList;\r\n}\r\n\r\n//react component for map visualization\r\nconst MyMap = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [map, setMap] = useState(new Map());\r\n    const insertKey = useRef();\r\n    const insertValue = useRef();\r\n    const removeKey = useRef();\r\n    const getKey = useRef();\r\n    const getOutput = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to create a random map\r\n    const randomMap = () => {\r\n        const size = randInt(5, 40);\r\n        const newMap = new Map();\r\n        for (let i = 0; i < size; i++)\r\n            newMap.set(randInt(-999,1000), randInt(-999,1000));\r\n        setMap(newMap);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //function to create an empty map\r\n    const emptyMap = () => {\r\n        setMap(new Map());\r\n    }\r\n\r\n    //initialize to a random map\r\n    useEffect(randomMap, []);\r\n\r\n    //function to insert into map\r\n    const insert = () => {\r\n        var key = parseInt(insertKey.current.value);\r\n        if (isNaN(key))\r\n            key = randInt(-999,1000);\r\n        var value = parseInt(insertValue.current.value);\r\n        if (isNaN(value))\r\n            value = randInt(-999,1000);\r\n        map.set(key, value);\r\n        forceUpdate();\r\n        insertKey.current.value = null;\r\n        insertValue.current.value = null;\r\n    }\r\n\r\n    //function to remove from map\r\n    const remove = () => {\r\n        var key = parseInt(removeKey.current.value);\r\n        if (!isNaN(key))\r\n            map.delete(key);\r\n        forceUpdate();\r\n        removeKey.current.value = null;\r\n    }\r\n\r\n    //function to get a value for a key in a map\r\n    const get = () => {\r\n        var key = parseInt(getKey.current.value);\r\n        if (!isNaN(key))\r\n            getOutput.current.value = map.get(key);\r\n        forceUpdate();\r\n        getKey.current.value = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"map\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomMap}>Random</button>\r\n                <br />\r\n                <button id=\"emptyButton\" onClick={emptyMap}>Empty</button>\r\n                <br />\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Key</label>\r\n                    <input id=\"insertKey\" ref={insertKey} type=\"text\"></input>\r\n                </span>\r\n                <span className=\"labeledInput\">\r\n                    <label>Value</label>\r\n                    <input id=\"insertValue\" ref={insertValue} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Key</label>\r\n                    <input id=\"removeKey\" ref={removeKey} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"getButton\" onClick={get}>Get</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Key</label>\r\n                    <input id=\"getKey\" ref={getKey} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <input id=\"getOutput\" ref={getOutput} type=\"text\" readonly></input>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <MapDisplay map={map} />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default MyMap;","import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './InsertionSort.scss';\r\nimport Element from '../Element/Element';\r\n\r\n\r\nconst InsertionSortDisplay = (props) => {\r\n    return props.array.map((value, index) => {\r\n        if (index === props.currentCompare && index === props.currentInserting)\r\n            return <Element key={index} value={value} color=\"yellow\" border=\"bordered\" />\r\n\r\n        if (index === props.currentCompare)\r\n            return <Element key={index} value={value} color=\"green\" border=\"bordered\" />\r\n\r\n        if (index === props.currentInserting)\r\n            return <Element key={index} value={value} color=\"yellow\" />\r\n\r\n        if (index < props.sortedEndIndex)\r\n            return <Element key={index} value={value} color=\"green\" />\r\n\r\n        return <Element key={index} value={value} />\r\n    });\r\n}\r\n\r\nconst InsertionSort = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [array, setArray] = useState([]);\r\n    const [sorted, setSorted] = useState(false);\r\n    const sorting = useRef(false);\r\n    const interval = useRef(null);\r\n    const sortedEndIndex = useRef(-1);\r\n    const currentInserting = useRef(-1);\r\n    const currentCompare = useRef(-1);\r\n    const toggleSortingButton = useRef();\r\n    const generateArrayButton = useRef();\r\n    const arraySizeInput = useRef();\r\n    const speedSlider = useRef();\r\n\r\n\r\n    //We call update on fake state variable to force rerender\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    //sets state array to a random array for sorting\r\n    const generateArray = () => {\r\n        if (sorting.current) {\r\n            toggleSorting();\r\n        }\r\n        var size = parseInt(arraySizeInput.current.value);\r\n        if(isNaN(size))\r\n            size = randInt(5,50);\r\n        if (size > 0) {\r\n            setArray(randomArray(size));\r\n            setSorted(false);\r\n            sortedEndIndex.current = -1;\r\n            currentInserting.current = -1;\r\n            currentCompare.current = -1;\r\n        }\r\n        arraySizeInput.current.value = null;\r\n    }\r\n    //generates a random array within reasonable bounds\r\n    const randomArray = useCallback((size) => {\r\n        var newArray = new Array(size);\r\n            for (let i = 0; i < size; i++) {\r\n                newArray[i] = randInt(-999, 1000);\r\n            }\r\n        return newArray;\r\n    }, []);\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min) + min);\r\n    }\r\n\r\n    //initialize the array randomly at start\r\n    useEffect(() => {\r\n        setArray(randomArray(randInt(5,50)));\r\n    }, [randomArray]);\r\n\r\n    //completes one step of the sorting algorithm\r\n    const sortingStep = () => {\r\n        \r\n        if (sortedEndIndex.current >= array.length) {\r\n            setSorted(true);\r\n            toggleSorting();\r\n            currentCompare.current = -1;\r\n            currentInserting.current = -1;\r\n        }\r\n        //if found lower element, insert current after that, restart process\r\n        else if (array[currentCompare.current] < array[currentInserting.current]) {\r\n            let temp = array[currentInserting.current];\r\n            for (let i = currentInserting.current - 1; i > currentCompare.current; i--) {\r\n                array[i + 1] = array[i];\r\n            }\r\n            array[currentCompare.current + 1] = temp;\r\n            currentInserting.current++;\r\n            currentCompare.current = currentInserting.current;\r\n            sortedEndIndex.current++;\r\n        }\r\n        //if at end of sorted and none lower found, insert at beginning, restart process\r\n        else if (currentCompare.current === 0) {\r\n            let temp = array[currentInserting.current];\r\n            for (let i = currentInserting.current - 1; i >= currentCompare.current; i--) {\r\n                array[i + 1] = array[i];\r\n            }\r\n            array[currentCompare.current] = temp;\r\n            currentInserting.current++;\r\n            currentCompare.current = currentInserting.current;\r\n            sortedEndIndex.current++;\r\n        }\r\n        else if (currentInserting.current === -1) {\r\n            currentInserting.current++;\r\n            sortedEndIndex.current = 1;\r\n            currentCompare.current = currentInserting.current;\r\n        }\r\n        else {\r\n            currentCompare.current--;\r\n        }\r\n\r\n    }\r\n\r\n    //function to turn sorting on and off by button click\r\n    const toggleSorting = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            sorting.current = false;\r\n            toggleSortingButton.current.innerHTML = \"Sort\";\r\n            toggleSortingButton.current.classList.remove(\"pinkButton\");\r\n            toggleSortingButton.current.classList.add(\"greenButton\");\r\n        } else if (!sorted) {\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n            sorting.current = true;\r\n            toggleSortingButton.current.innerHTML = \"Stop\";\r\n            toggleSortingButton.current.classList.remove(\"greenButton\");\r\n            toggleSortingButton.current.classList.add(\"pinkButton\");\r\n        }\r\n    }\r\n\r\n    //changes the animation speed of sorting when the slider changes\r\n    const updateSpeed = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"insertion-sort\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" ref={generateArrayButton} onClick={generateArray}>Random</button>\r\n                    <span className=\"labeledInput\">\r\n                        <label>Array Size</label>\r\n                        <input id=\"arraySizeInput\" ref={arraySizeInput} type=\"text\"></input>\r\n                    </span>\r\n                    <br />\r\n                    <button id=\"toggleSortingButton\" className=\"greenButton\" ref={toggleSortingButton} onClick={toggleSorting}>Sort</button>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <InsertionSortDisplay array={array} sortedEndIndex={sortedEndIndex.current} currentInserting={currentInserting.current} currentCompare={currentCompare.current} />\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element color=\"green\"></Element>\r\n                <p>= Sorted</p>\r\n                < br />\r\n                <Element></Element>\r\n                <p>= Unsorted</p>\r\n                <br />\r\n                <Element color=\"yellow\"></Element>\r\n                <p>= Current Element to be Inserted</p>\r\n                <br />\r\n                <Element color=\"green\" border=\"bordered\"></Element>\r\n                <p>= Current Focus</p>\r\n            </div>\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default InsertionSort;","import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './SelectionSort.scss';\r\nimport Element from '../Element/Element';\r\n\r\nconst SelectionSortDisplay = (props) => {\r\n    return props.array.map((value, index) => {\r\n        if (index < props.sortedEndIndex)\r\n            return <Element key={index} value={value} color=\"green\" />\r\n        if (index === props.currentMinimum && index === props.currentFocus)\r\n            return <Element key={index} value={value} color=\"pink\" border=\"bordered\" />\r\n        if (index === props.currentMinimum)\r\n            return <Element key={index} value={value} color=\"pink\" />\r\n        if (index === props.currentFocus)\r\n            return <Element key={index} value={value} border=\"bordered\" />\r\n        return <Element key={index} value={value} />\r\n    });\r\n}\r\n\r\nconst SelectionSort = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [array, setArray] = useState([]);\r\n    const [sorted, setSorted] = useState(false);\r\n    const sorting = useRef(false);\r\n    const interval = useRef(null);\r\n    const sortedEndIndex = useRef(0);\r\n    const currentFocus = useRef(-1);\r\n    const currentMinimum = useRef(-1);\r\n    const toggleSortingButton = useRef();\r\n    const arraySizeInput = useRef();\r\n    const speedSlider = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //sets state array to a random array for sorting\r\n    const generateArray = () => {\r\n        if (sorting.current) {\r\n            toggleSorting();\r\n        }\r\n        var size = parseInt(arraySizeInput.current.value);\r\n        if(isNaN(size))\r\n            size = randInt(5,50);\r\n        if (size > 0) {\r\n            setArray(randomArray(size));\r\n            setSorted(false);\r\n            sortedEndIndex.current = 0;\r\n            currentFocus.current = -1;\r\n            currentMinimum.current = -1;\r\n        }\r\n        arraySizeInput.current.value = null;\r\n    }\r\n    //generates a random array within reasonable bounds\r\n    const randomArray = useCallback((size) => {\r\n        var newArray = new Array(size);\r\n            for (let i = 0; i < size; i++) {\r\n                newArray[i] = randInt(-999, 1000);\r\n            }\r\n        return newArray;\r\n    }, []);\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize the array randomly at start\r\n    useEffect(() => {\r\n        setArray(randomArray(randInt(5,50)));\r\n    }, [randomArray]);\r\n\r\n    //completes one step of the sorting algorithm\r\n    const sortingStep = () => {\r\n        if (sortedEndIndex.current >= array.length) {\r\n            setSorted(true);\r\n            toggleSorting();\r\n            return;\r\n        }\r\n        if (currentFocus.current === array.length-1) {\r\n            var temp = array[sortedEndIndex.current];\r\n            array[sortedEndIndex.current] = array[currentMinimum.current];\r\n            array[currentMinimum.current] = temp;\r\n            sortedEndIndex.current += 1;\r\n            currentFocus.current = sortedEndIndex.current-1;\r\n            currentMinimum.current = -1;\r\n            return;\r\n        }\r\n        currentFocus.current += 1;\r\n        if (currentMinimum.current === -1) {\r\n            currentMinimum.current = currentFocus.current;\r\n        } else if (array[currentMinimum.current] > array[currentFocus.current]) {\r\n            currentMinimum.current = currentFocus.current;\r\n        }\r\n    }\r\n\r\n    //function to turn sorting on and off by button click\r\n    const toggleSorting = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            sorting.current = false;\r\n            toggleSortingButton.current.innerHTML = \"Sort\";\r\n            toggleSortingButton.current.classList.remove(\"pinkButton\");\r\n            toggleSortingButton.current.classList.add(\"greenButton\");\r\n        } else if (!sorted) {\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            sorting.current = true;\r\n            toggleSortingButton.current.innerHTML = \"Stop\";\r\n            toggleSortingButton.current.classList.remove(\"greenButton\");\r\n            toggleSortingButton.current.classList.add(\"pinkButton\");\r\n        }\r\n    }\r\n    //changes the animation speed of sorting when the slider changes\r\n    const updateSpeed = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"selection-sort\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" onClick={generateArray}>Random</button>\r\n                    <span className=\"labeledInput\">\r\n                        <label>Array Size</label>\r\n                        <input id=\"arraySizeInput\" ref={arraySizeInput} type=\"text\"></input>\r\n                    </span>\r\n                    <br />\r\n                    <button id=\"toggleSortingButton\" className=\"greenButton\" ref={toggleSortingButton} onClick={toggleSorting}>Sort</button>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <SelectionSortDisplay array={array} sortedEndIndex={sortedEndIndex.current} currentFocus={currentFocus.current} currentMinimum={currentMinimum.current} />\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element color=\"green\"></Element>\r\n                <p>= Sorted</p>\r\n                < br />\r\n                <Element></Element>\r\n                <p>= Unsorted</p>\r\n                <br />\r\n                <Element color=\"pink\"></Element>\r\n                <p>= Current Minimum</p>\r\n                <br />\r\n                <Element border=\"bordered\"></Element>\r\n                <p>= Current Focus</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SelectionSort;","import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './BubbleSort.scss';\r\nimport Element from '../Element/Element';\r\n\r\nconst BubbleSortDisplay = (props) => {\r\n    return props.array.map((value, index) => {\r\n        if (index > props.sortedStart.current) {\r\n            return <Element key={index} value={value} color=\"green\"/>\r\n        }\r\n        if (index === props.focusOne.current || index === props.focusTwo.current) {\r\n            if (index === props.min.current) {\r\n                return <Element key={index} value={value} color=\"pink\" border=\"bordered\" />\r\n            }\r\n            if (index === props.max.current) {\r\n                return <Element key={index} value={value} color=\"yellow\" border=\"bordered\" />\r\n            }\r\n            else return <Element key={index} value={value} border=\"bordered\" />\r\n            \r\n        }\r\n        return <Element key={index} value={value} />\r\n    });\r\n}\r\n\r\n\r\n\r\nconst BubbleSort = () => {\r\n    const [, forceRender] = useState(0);\r\n    const [array, setArray] = useState([]);\r\n    const [sorted, setSorted] = useState(false);\r\n    const sorting = useRef(false);\r\n    const interval = useRef(null);\r\n    const swappedOnPass = useRef(false);\r\n    const sortedStart = useRef(array.length - 1);\r\n    const focusOne = useRef(-1);\r\n    const focusTwo = useRef(-1);\r\n    const min = useRef(-1);\r\n    const max = useRef(-1);\r\n    const toggleSortingButton = useRef();\r\n    const generateArrayButton = useRef();\r\n    const arraySizeInput = useRef();\r\n    const speedSlider = useRef();\r\n    \r\n    //We call update on fake state variable to force rerender\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    //sets state array to a random array for sorting\r\n    const generateArray = () => {\r\n        if (sorting.current) {\r\n            toggleSorting();\r\n        }\r\n        var size = parseInt(arraySizeInput.current.value);\r\n        if(isNaN(size))\r\n            size = randInt(5,50);\r\n        if (size > 0) {\r\n            setArray(randomArray(size));\r\n            setSorted(false);\r\n            sortedStart.current = size - 1;\r\n            focusOne.current = -1;\r\n            focusTwo.current = -1;\r\n            min.current = -1;\r\n            max.current = -1\r\n            //swappedOnPass.current = false;\r\n            //sorting.current = false;\r\n            //currentMinimum.current = -1;\r\n        }\r\n        arraySizeInput.current.value = null;\r\n    }\r\n    //generates a random array within reasonable bounds\r\n    const randomArray = useCallback((size) => {\r\n        var newArray = new Array(size);\r\n            for (let i = 0; i < size; i++) {\r\n                newArray[i] = randInt(-999, 1000);\r\n            }\r\n        sortedStart.current = size - 1;\r\n        return newArray;\r\n    }, []);\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize the array randomly at start\r\n    useEffect(() => {\r\n        setArray(randomArray(randInt(5,50)));\r\n    }, [randomArray]);\r\n\r\n    function swap(arr, x, y) {\r\n        var temp = arr[x];\r\n        arr[x] = arr[y];\r\n        arr[y] = temp;\r\n    }\r\n\r\n    //completes one step of the sorting algorithm\r\n    const sortingStep = () => {\r\n        if (max.current === 1 && sortedStart.current === 1) {\r\n            sortedStart.current = -1;\r\n            return;\r\n        }\r\n\r\n        if (sortedStart.current <= 0) {\r\n            setSorted(true);\r\n            toggleSorting();\r\n            return;\r\n        }\r\n        if (focusOne.current === -1 && focusTwo.current === -1){\r\n            focusOne.current = 0;\r\n            focusTwo.current = 1;\r\n            return;\r\n        }\r\n        if (max.current >= sortedStart.current) {\r\n            if (swappedOnPass.current === false) {\r\n                sortedStart.current = -1;\r\n            }\r\n\r\n            min.current = -1;\r\n            max.current = -1;\r\n            focusOne.current = 0;\r\n            focusTwo.current = 1;\r\n            swappedOnPass.current = false;\r\n            sortedStart.current--;\r\n            \r\n        }\r\n        if (min.current === -1) {\r\n            if (array[focusOne.current] < array[focusTwo.current]) {\r\n                min.current = focusOne.current;\r\n                max.current = focusTwo.current;\r\n            }\r\n            else {\r\n                min.current = focusTwo.current;\r\n                max.current = focusOne.current;\r\n            }\r\n        }\r\n        else if (min.current > max.current) {\r\n            swap(array, min.current, max.current);\r\n            swappedOnPass.current = true;\r\n            var temp = max.current;\r\n            max.current = min.current;\r\n            min.current = temp;\r\n        } \r\n        else {\r\n            min.current = -1;\r\n            max.current = -1;\r\n            focusOne.current++;\r\n            focusTwo.current++;\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    //function to turn sorting on and off by button click\r\n    const toggleSorting = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            sorting.current = false;\r\n            toggleSortingButton.current.innerHTML = \"Sort\";\r\n            toggleSortingButton.current.classList.remove(\"pinkButton\");\r\n            toggleSortingButton.current.classList.add(\"greenButton\");\r\n        }\r\n        else if (!sorted) {\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n            sorting.current = true;\r\n            toggleSortingButton.current.innerHTML = \"Stop\";\r\n            toggleSortingButton.current.classList.remove(\"greenButton\");\r\n            toggleSortingButton.current.classList.add(\"pinkButton\");\r\n        }\r\n    }\r\n\r\n    //changes the animation speed of sorting when the slider changes\r\n    const updateSpeed = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"bubble-sort\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" ref={generateArrayButton} onClick={generateArray}>Random</button>\r\n                    <span className=\"labeledInput\">\r\n                        <label>Array Size</label>\r\n                        <input id=\"arraySizeInput\" ref={arraySizeInput} type=\"text\"></input>\r\n                    </span>\r\n                    <br />\r\n                    <button id=\"toggleSortingButton\" className=\"greenButton\" ref={toggleSortingButton} onClick={toggleSorting}>Sort</button>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <BubbleSortDisplay array={array} sortedStart={sortedStart} focusOne={focusOne} focusTwo={focusTwo} min={min} max={max}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element color=\"green\"></Element>\r\n                <p>= Sorted</p>\r\n                < br />\r\n                <Element></Element>\r\n                <p>= Unsorted</p>\r\n                <br />\r\n                <Element border=\"bordered\"></Element>\r\n                <p>= Current Focuses</p>\r\n                <br />\r\n                <Element color=\"pink\"></Element>\r\n                <p>= Lesser of Focuses</p>\r\n                <br />\r\n                <Element color=\"yellow\"></Element>\r\n                <p>= Greater of Focuses</p>\r\n            </div>\r\n        </div>);\r\n}\r\n\r\nexport default BubbleSort;","import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './MergeSort.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//react component to display merge sort arrays\r\nconst MergeSortDisplay = (props) => {\r\n    var componentList = [];\r\n    for (let i = 0; i < props.mergedArrays.length; i++) {\r\n        var array1 = props.arrays[2*i];\r\n        var array2 = [];\r\n        if (2*i+1 < props.arrays.length)\r\n            array2 = props.arrays[2*i+1];\r\n        componentList.push(<MergeSortDisplayRow key={componentList.length} array1={array1} array2={array2} mergedArray={props.mergedArrays[i]} />);\r\n        componentList.push(<hr key={componentList.length} />);\r\n    }\r\n    componentList.pop();\r\n    return componentList;\r\n}\r\n\r\n//react component to display a merge sort row consisting of 2 arrays, and the array it is merging into\r\nconst MergeSortDisplayRow = (props) => {\r\n    return (\r\n        <div className=\"merge-sort-display-row\">\r\n            <div>\r\n                <MergeSortDisplayRowHelper1 array1={props.array1} array2={props.array2} />\r\n            </div>\r\n            <div>\r\n                <MergeSortDisplayRowHelper2 array={props.mergedArray} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nconst MergeSortDisplayRowHelper1 = (props) => {\r\n    var componentList = [];\r\n    for (let i = 0; i < props.array1.length; i++) {\r\n        if (i === props.array1.length-1)\r\n            componentList.push(<Element key={componentList.length} value={props.array1[i]} border=\"bordered\" />);\r\n        else\r\n            componentList.push(<Element key={componentList.length} value={props.array1[i]} />);\r\n    }\r\n    if (props.array1.length === 0)\r\n        componentList.push(<Element key={componentList.length} color=\"none\" />);\r\n    componentList.push(<br key={componentList.length} />);\r\n    for (let i = 0; i < props.array2.length; i++) {\r\n        if (i === props.array2.length-1)\r\n            componentList.push(<Element key={componentList.length} value={props.array2[i]} border=\"bordered\" />);\r\n        else\r\n            componentList.push(<Element key={componentList.length} value={props.array2[i]} />);\r\n    }\r\n    if (props.array2.length === 0)\r\n        componentList.push(<Element key={componentList.length} color=\"none\" />);\r\n    return componentList;\r\n}\r\nconst MergeSortDisplayRowHelper2 = (props) => {\r\n    var componentList = [];\r\n    componentList.push(<p className=\"arrow\" key={0}>&#x2192;</p>);\r\n    for (let i = 0; i < props.array.length; i++)\r\n        if (props.array[i] !== null)\r\n            componentList.push(<Element key={componentList.length} color=\"green\" value={props.array[i]} />);\r\n    return componentList;\r\n}\r\n\r\n//react component for merge sort\r\nconst MergeSort = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const arrays = useRef([[]]);\r\n    const mergedArrays = useRef([[]]);\r\n    const mergedArraysCurrs = useRef([]);\r\n    const mergeRowIndex = useRef(0);\r\n    const [sorted, setSorted] = useState(false);\r\n    const sorting = useRef(false);\r\n    const interval = useRef(null);\r\n    const arraySizeInput = useRef();\r\n    const toggleSortingButton = useRef();\r\n    const speedSlider = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //sets state array to a random array for sorting\r\n    const generateArrays = () => {\r\n        if (sorting.current) {\r\n            toggleSorting();\r\n        }\r\n        var size = parseInt(arraySizeInput.current.value);\r\n        if(isNaN(size))\r\n            size = randInt(5,20);\r\n        if (size > 0) {\r\n            arrays.current = randomArrays(size);\r\n            initializeMergedArrays();\r\n            forceUpdate();\r\n            setSorted(false);\r\n        }\r\n        arraySizeInput.current.value = null;\r\n    }\r\n    //generates a random array within reasonable bounds\r\n    const randomArrays = useCallback((size) => {\r\n        var newArrays = new Array(size);\r\n            for (let i = 0; i < size; i++) {\r\n                newArrays[i] = [randInt(-999, 1000)];\r\n            }\r\n        return newArrays;\r\n    }, []);\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize the arrays randomly\r\n    useEffect(() => {\r\n        arrays.current = randomArrays(randInt(5,20));\r\n        initializeMergedArrays();\r\n        forceUpdate();\r\n    }, [randomArrays]);\r\n\r\n    //function to initialize list of empty arrays to be merged into\r\n    const initializeMergedArrays = () => {\r\n        mergedArrays.current = [];\r\n        mergedArraysCurrs.current = [];\r\n        mergeRowIndex.current = 0;\r\n        const length = Math.ceil(arrays.current.length/2);\r\n        for (let i = 0; i < length; i++) {\r\n            mergedArrays.current.push([]);\r\n            if (2*i+1 < arrays.current.length) {\r\n                for (let j = 0; j < arrays.current[2*i].length+arrays.current[2*i+1].length; j++)\r\n                    mergedArrays.current[i].push(null);\r\n                mergedArraysCurrs.current.push(arrays.current[2*i].length+arrays.current[2*i+1].length-1);\r\n            } else {\r\n                for (let j = 0; j < arrays.current[2*i].length; j++)\r\n                    mergedArrays.current[i].push(null);\r\n                mergedArraysCurrs.current.push(arrays.current[2*i].length-1);\r\n            }\r\n        }\r\n    }\r\n\r\n    //function to do a single step of merge sorting\r\n    const sortingStep = () => {\r\n        //get the two arrays we are currently merging\r\n        var array1 = arrays.current[2 * mergeRowIndex.current];\r\n        var array2 = [];\r\n        if (2 * mergeRowIndex.current + 1 < arrays.current.length)\r\n            array2 = arrays.current[2 * mergeRowIndex.current + 1];\r\n        //if both arrays are empty increase the current mergeRowIndex\r\n        if (array1.length === 0 && array2.length === 0)\r\n            mergeRowIndex.current++;\r\n            //if done with merging all rows then move mergedArrays into main arrays\r\n            if (mergeRowIndex.current > mergedArrays.current.length-1) {\r\n                if (mergedArrays.current.length === 1) {\r\n                    setSorted(true);\r\n                    clearInterval(interval.current);\r\n                    sorting.current = false;\r\n                    toggleSortingButton.current.innerHTML = \"Sort\";\r\n                    toggleSortingButton.current.classList.remove(\"pinkButton\");\r\n                    toggleSortingButton.current.classList.add(\"greenButton\");\r\n                    return;\r\n                }\r\n                arrays.current = mergedArrays.current;\r\n                initializeMergedArrays();\r\n                return;\r\n            }\r\n            //get the two arrays we are currently merging\r\n            array1 = arrays.current[2 * mergeRowIndex.current];\r\n            array2 = [];\r\n            if (2 * mergeRowIndex.current + 1 < arrays.current.length)\r\n                array2 = arrays.current[2 * mergeRowIndex.current + 1];\r\n            //if either array is empty concatenate the other to the merged array\r\n            if (array1.length === 0) {\r\n                for (let i = array2.length-1; i >= 0; i--) {\r\n                    mergedArrays.current[mergeRowIndex.current][mergedArraysCurrs.current[mergeRowIndex.current]] = array2[i];\r\n                    mergedArraysCurrs.current[mergeRowIndex.current]--;\r\n                }\r\n                arrays.current[2*mergeRowIndex.current+1] = [];\r\n            } else if (array2.length === 0) {\r\n                for (let i = array1.length-1; i >= 0; i--) {\r\n                    mergedArrays.current[mergeRowIndex.current][mergedArraysCurrs.current[mergeRowIndex.current]] = array1[i];\r\n                    mergedArraysCurrs.current[mergeRowIndex.current]--;\r\n                }\r\n                arrays.current[2*mergeRowIndex.current] = [];\r\n            //add the max of the last elements to the merged array\r\n            } else {\r\n                if (array1[array1.length-1] >= array2[array2.length-1]) {\r\n                    mergedArrays.current[mergeRowIndex.current][mergedArraysCurrs.current[mergeRowIndex.current]] = array1[array1.length-1];\r\n                    mergedArraysCurrs.current[mergeRowIndex.current]--;\r\n                    arrays.current[2*mergeRowIndex.current].pop();\r\n                } else {\r\n                    mergedArrays.current[mergeRowIndex.current][mergedArraysCurrs.current[mergeRowIndex.current]] = array2[array2.length-1];\r\n                    mergedArraysCurrs.current[mergeRowIndex.current]--;\r\n                    arrays.current[2*mergeRowIndex.current+1].pop();\r\n                }\r\n            }\r\n    }\r\n\r\n    //function to turn sorting on and off by button click\r\n    const toggleSorting = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            sorting.current = false;\r\n            toggleSortingButton.current.innerHTML = \"Sort\";\r\n            toggleSortingButton.current.classList.remove(\"pinkButton\");\r\n            toggleSortingButton.current.classList.add(\"greenButton\");\r\n        } else if (!sorted) {\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            sorting.current = true;\r\n            toggleSortingButton.current.innerHTML = \"Stop\";\r\n            toggleSortingButton.current.classList.remove(\"greenButton\");\r\n            toggleSortingButton.current.classList.add(\"pinkButton\");\r\n        }\r\n    }\r\n\r\n    //changes the animation speed of sorting when the slider changes\r\n    const updateSpeed = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"merge-sort\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={generateArrays}>Random</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Array Size</label>\r\n                    <input id=\"arraySizeInput\" ref={arraySizeInput} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button ref={toggleSortingButton} className=\"greenButton\" onClick={toggleSorting}>Sort</button>\r\n                <br />\r\n                <span className=\"labeledSlider\">\r\n                    <label>Animation Speed</label>\r\n                    <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                </span>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <MergeSortDisplay arrays={arrays.current} mergedArrays={mergedArrays.current} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MergeSort;","import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './QuickSort.scss';\r\nimport Element from '../Element/Element';\r\n\r\nconst QuickSortDisplay = (props) => {\r\n    return props.array.map((value, index) => {\r\n        if (index === props.pivot.current)\r\n            return <Element key={index} value={value} color=\"purple\" />\r\n        if (index === props.low.current && index === props.high.current)\r\n            return <Element key={index} value={value} border=\"bordered\" color=\"yellow\" />\r\n        if (index === props.low.current)\r\n            return <Element key={index} value={value} border=\"bordered\" color=\"pink\" />\r\n        if (index === props.high.current)\r\n            return <Element key={index} value={value} border=\"bordered\" color=\"green\" />\r\n        if (props.sortedElements.current.includes(index))\r\n            return <Element key={index} value={value} color=\"green\" />\r\n        else return <Element key={index} value={value} />\r\n    });\r\n}\r\n\r\n\r\nconst QuickSort = () => {\r\n    const [, forceRender] = useState(0);\r\n    const [array, setArray] = useState([]);\r\n    const interval = useRef(null);\r\n    const sorting = useRef(false);\r\n    const [sorted, setSorted] = useState(false);\r\n    const toggleSortingButton = useRef();\r\n    const generateArrayButton = useRef();\r\n    const arraySizeInput = useRef();\r\n    const speedSlider = useRef();\r\n\r\n    const sortedElements = useRef([]);\r\n    const worklist = useRef([]);\r\n    const low = useRef(-1);\r\n    const high = useRef(-1);\r\n    const pivot = useRef(-1);\r\n\r\n\r\n    //We call update on fake state variable to force rerender\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    function swap(arr, x, y) {\r\n        var temp = arr[x];\r\n        arr[x] = arr[y];\r\n        arr[y] = temp;\r\n    }\r\n\r\n    function buildSorted(size) {\r\n        var arr = [];\r\n        for (var i = 0; i < size; i++) {\r\n            arr.push(i);\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    const sortingStep = () => {\r\n        if (sortedElements.current.length === array.length) {\r\n            clearInterval(interval.current);\r\n            sorting.current = false;\r\n            toggleSortingButton.current.innerHTML = \"Sort\";\r\n            toggleSortingButton.current.classList.remove(\"pinkButton\");\r\n            toggleSortingButton.current.classList.add(\"greenButton\");\r\n        }\r\n\r\n        \r\n        if (array.length === 1) {\r\n            sortedElements.current.push(0);\r\n        }\r\n        if (pivot.current === -1) {\r\n            //initial step\r\n            if (sortedElements.current.length === 0) {\r\n                pivot.current = array.length - 1;\r\n                low.current = 0;\r\n                high.current = array.length - 2;\r\n            }\r\n            else {\r\n                low.current = worklist.current.shift();\r\n                pivot.current = worklist.current.shift();\r\n                if (!sortedElements.current.includes(pivot.current - 1)) high.current = pivot.current - 1;\r\n\r\n                if (pivot.current === 0) {\r\n                    sortedElements.current.push(pivot.current);\r\n                    low.current = -1;\r\n                    pivot.current = -1;\r\n                    high.current = -1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (pivot.current === 0) {\r\n                sortedElements.current.push(pivot.current);\r\n            }\r\n            else if (low.current > high.current) {\r\n                var toInsert = array[pivot.current];\r\n                array.splice(pivot.current, 1);\r\n                array.splice(low.current, 0, toInsert);\r\n                sortedElements.current.push(low.current);\r\n                //worklist.current = worklist.current.map((value, index) => {\r\n                //    if (value > low.current) return value + 1;\r\n                //    else return;\r\n                //})\r\n\r\n                if (low.current !== 0) {\r\n                    //find low partition\r\n                    let temp = sortedElements.current.filter(n => n < low.current);\r\n                    \r\n                    if (temp.length === 0) {\r\n\r\n\r\n                        \r\n                        worklist.current.push(0);\r\n                        worklist.current.push(low.current - 1);\r\n                    }\r\n                    else {\r\n                        if (Math.max(...temp) !== low.current - 1) {\r\n                            worklist.current.push(Math.max(...temp) + 1);\r\n                            worklist.current.push(low.current - 1);\r\n                        }\r\n                    }\r\n                }\r\n                //find high bound\r\n                if (low.current !== array.length - 1) {\r\n                    let temp = sortedElements.current.filter(n => n > low.current);\r\n                    if (temp.length === 0) {\r\n                        worklist.current.push(low.current + 1);\r\n                        worklist.current.push(array.length - 1);\r\n                    }\r\n                    else {\r\n                        if (Math.min(...temp) !== low.current + 1) {\r\n                            worklist.current.push(low.current + 1);\r\n                            worklist.current.push(Math.min(...temp) - 1);\r\n                        }\r\n                    }\r\n\r\n                    \r\n                }\r\n\r\n                low.current = -1;\r\n                pivot.current = -1;\r\n                high.current = -1;\r\n\r\n            }\r\n            else if (array[low.current] > array[pivot.current]) {\r\n                if (array[high.current] < array[pivot.current]) {\r\n                    swap(array, low.current, high.current);\r\n                }\r\n                else high.current--;\r\n            }\r\n            else low.current++;\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    //function to turn sorting on and off by button click\r\n    const toggleSorting = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            sorting.current = false;\r\n            toggleSortingButton.current.innerHTML = \"Sort\";\r\n            toggleSortingButton.current.classList.remove(\"pinkButton\");\r\n            toggleSortingButton.current.classList.add(\"greenButton\");\r\n        } else if (!sorted) {\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n            sorting.current = true;\r\n            toggleSortingButton.current.innerHTML = \"Stop\";\r\n            toggleSortingButton.current.classList.remove(\"greenButton\");\r\n            toggleSortingButton.current.classList.add(\"pinkButton\");\r\n        }\r\n    }\r\n\r\n    const genWorstCase = () => {\r\n        if (sorting.current) {\r\n            toggleSorting();\r\n        }\r\n        var size = parseInt(arraySizeInput.current.value);\r\n        if (isNaN(size))\r\n            size = randInt(5, 50);\r\n        if (size > 0) {\r\n            setArray(buildSorted(size));\r\n            setSorted(false);\r\n\r\n            pivot.current = -1;\r\n            low.current = -1;\r\n            high.current = -1;\r\n            sortedElements.current = [];\r\n\r\n        }\r\n\r\n        arraySizeInput.current.value = null;\r\n        \r\n    }\r\n\r\n    //sets state array to a random array for sorting\r\n    const generateArray = () => {\r\n        if (sorting.current) {\r\n            toggleSorting();\r\n        }\r\n        var size = parseInt(arraySizeInput.current.value);\r\n        if (isNaN(size))\r\n            size = randInt(5, 50);\r\n        if (size > 0) {\r\n            setArray(randomArray(size));\r\n            setSorted(false);\r\n\r\n            pivot.current = -1;\r\n            low.current = -1;\r\n            high.current = -1;\r\n            sortedElements.current = [];\r\n            \r\n        }\r\n        \r\n        arraySizeInput.current.value = null;\r\n    }\r\n    //generates a random array within reasonable bounds\r\n    const randomArray = useCallback((size) => {\r\n        var newArray = new Array(size);\r\n        for (let i = 0; i < size; i++) {\r\n            newArray[i] = randInt(-999, 1000);\r\n        }\r\n        return newArray;\r\n    }, []);\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min) + min);\r\n    }\r\n\r\n    //initialize the array randomly at start\r\n    useEffect(() => {\r\n        setArray(randomArray(randInt(5, 50)));\r\n    }, [randomArray]);\r\n\r\n    //changes the animation speed of sorting when the slider changes\r\n    const updateSpeed = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"quick-sort\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" ref={generateArrayButton} onClick={generateArray}>Random</button>\r\n                    <span className=\"labeledInput\">\r\n                        <label>Array Size</label>\r\n                        <input id=\"arraySizeInput\" ref={arraySizeInput} type=\"text\"></input>\r\n                    </span>\r\n                    <br />\r\n                    <button id=\"worstButton\" onClick={genWorstCase}>Worst-case</button>\r\n                    <br />\r\n                    <button id=\"toggleSortingButton\" className=\"greenButton\" ref={toggleSortingButton} onClick={toggleSorting}>Sort</button>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <QuickSortDisplay array={array} low={low} high={high} pivot={pivot} sortedElements={sortedElements} />\r\n                </div>\r\n                \r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element color=\"green\"></Element>\r\n                <p>= Sorted</p>\r\n                < br />\r\n                <Element></Element>\r\n                <p>= Unsorted</p>\r\n                <br />\r\n                <Element color=\"pink\" border=\"bordered\"></Element>\r\n                <p>= Current Low</p>\r\n                <br />\r\n                <Element color=\"green\" border=\"bordered\"></Element>\r\n                <p>= Current High</p>\r\n                <br />\r\n                <Element color=\"purple\" ></Element>\r\n                <p>= Pivot</p>\r\n            </div>\r\n        </div>\r\n        );\r\n}\r\n\r\n\r\n\r\n\r\nexport default QuickSort;","import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './HeapSort.scss';\r\nimport Element from '../Element/Element.js';\r\nimport { BinaryHeapClass } from '../BinaryHeap/BinaryHeap.js';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\r\n\r\n//react component to dislplay an aray\r\nconst ArrayDisplay = (props) => {\r\n    return props.array.map((value, index) => {\r\n        return <Element key={index} value={value} />\r\n    });\r\n}\r\nconst SortedArrayDisplay = (props) => {\r\n    return props.array.map((value, index) => {\r\n        return <Element key={index} value={value} color=\"green\" />\r\n    });\r\n}\r\n\r\n//main react component for heap sort animation\r\nconst HeapSort = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [heap, setHeap] = useState(new BinaryHeapClass());\r\n    const [array, setArray] = useState([]);\r\n    const [sortedArray, setSortedArray] = useState([]);\r\n    const [sorted, setSorted] = useState(false);\r\n    const arraySizeInput = useRef();\r\n    const toggleSortingButton = useRef();\r\n    const speedSlider = useRef();\r\n    const sorting = useRef(false);\r\n    const interval = useRef(null);\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //sets state array to a random array for sorting\r\n    const generateArray = () => {\r\n        if (sorting.current) {\r\n            toggleSorting();\r\n        }\r\n        var size = parseInt(arraySizeInput.current.value);\r\n        if(isNaN(size))\r\n            size = randInt(5,32);\r\n        if (size > 0) {\r\n            setArray(randomArray(size));\r\n            setHeap(new BinaryHeapClass());\r\n            setSortedArray([]);\r\n            setSorted(false);\r\n        }\r\n        arraySizeInput.current.value = null;\r\n    }\r\n    //generates a random array within reasonable bounds\r\n    const randomArray = useCallback((size) => {\r\n        var newArray = new Array(size);\r\n            for (let i = 0; i < size; i++) {\r\n                newArray[i] = randInt(-999, 1000);\r\n            }\r\n        return newArray;\r\n    }, []);\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize the array randomly at start\r\n    useEffect(() => {\r\n        setArray(randomArray(randInt(5,32)));\r\n    }, [randomArray]);\r\n\r\n    //function to do a single step of sorting animation\r\n    const sortingStep = () => {\r\n        if(array.length === 0 && heap.heap.length === 0) {\r\n            setSorted(true);\r\n            toggleSorting();\r\n        } else if(array.length !== 0)\r\n            heap.insert(array.pop())\r\n        else\r\n            sortedArray.push(heap.remove());\r\n    }\r\n\r\n    //function to turn sorting on and off by button click\r\n    const toggleSorting = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            sorting.current = false;\r\n            toggleSortingButton.current.innerHTML = \"Sort\";\r\n            toggleSortingButton.current.classList.remove(\"pinkButton\");\r\n            toggleSortingButton.current.classList.add(\"greenButton\");\r\n        } else if (!sorted) {\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            sorting.current = true;\r\n            toggleSortingButton.current.innerHTML = \"Stop\";\r\n            toggleSortingButton.current.classList.remove(\"greenButton\");\r\n            toggleSortingButton.current.classList.add(\"pinkButton\");\r\n        }\r\n    }\r\n    //changes the animation speed of sorting when the slider changes\r\n    const updateSpeed = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"heap-sort\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={generateArray}>Random</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Array Size</label>\r\n                    <input id=\"arraySizeInput\" ref={arraySizeInput} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"toggleSortingButton\" className=\"greenButton\" ref={toggleSortingButton} onClick={toggleSorting}>Sort</button>\r\n                <br />\r\n                <span className=\"labeledSlider\">\r\n                    <label>Animation Speed</label>\r\n                    <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                </span>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <div className=\"array\">\r\n                    <ArrayDisplay array={array} />\r\n                </div>\r\n                <BinaryTreeDisplay tree={heap.getTree()} />\r\n                <div className=\"array\">\r\n                    <SortedArrayDisplay array={sortedArray} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default HeapSort;","import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './LinearSearch.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//react component to display a linear search array\r\nconst ArrayDisplay = (props) => {\r\n    return props.array.map((value, index) => {\r\n        if (index === props.focus)\r\n            return <Element key={index} value={value} border=\"bordered\" />;\r\n        else if (index === props.green)\r\n            return <Element key={index} value={value} color=\"green\" />;\r\n        else if (index === props.pink)\r\n            return <Element key={index} value={value} color=\"pink\" />;\r\n        else\r\n            return <Element key={index} value={value} />;\r\n    });\r\n}\r\n\r\n//react component for linear search\r\nconst LinearSearch = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [array, setArray] = useState([]);\r\n    const arraySizeInput = useRef();\r\n    const searchInput = useRef();\r\n    const speedSlider = useRef();\r\n    const searching = useRef();\r\n    const searchValue = useRef(null);\r\n    const focus = useRef(null);\r\n    const interval = useRef();\r\n    const green = useRef();\r\n    const pink = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //sets state array to a random array for sorting\r\n    const generateArray = () => {\r\n        if (searching.current) {\r\n            toggleAnimation();\r\n        }\r\n        focus.current = null;\r\n        green.current = null;\r\n        pink.current = null;\r\n        var size = parseInt(arraySizeInput.current.value);\r\n        if(isNaN(size))\r\n            size = randInt(5,50);\r\n        if (size > 0) {\r\n            setArray(randomArray(size));\r\n        }\r\n        arraySizeInput.current.value = null;\r\n    }\r\n    //generates a random array within reasonable bounds\r\n    const randomArray = useCallback((size) => {\r\n        var newArray = new Array(size);\r\n            for (let i = 0; i < size; i++) {\r\n                newArray[i] = randInt(-999, 1000);\r\n            }\r\n        return newArray;\r\n    }, []);\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize the array randomly at start\r\n    useEffect(() => {\r\n        setArray(randomArray(randInt(5,50)));\r\n    }, [randomArray]);\r\n\r\n    //function to start searching animation\r\n    const search = () => {\r\n        if (searching.current)\r\n            toggleAnimation();\r\n        var data = parseInt(searchInput.current.value);\r\n        if (isNaN(data))\r\n            data = 0;\r\n        searchInput.current.value = null;\r\n        searchValue.current = data;\r\n        toggleAnimation();\r\n        focus.current = 0;\r\n        forceUpdate();\r\n    }\r\n\r\n    //function to 1 step of searching animation\r\n    const searchingStep = () => {\r\n        if (array[focus.current] === searchValue.current) {\r\n            green.current = focus.current;\r\n            focus.current = null;\r\n            toggleAnimation();\r\n        } else if (focus.current === array.length-1) {\r\n            pink.current = array.length-1;\r\n            focus.current = null;\r\n            toggleAnimation();\r\n        } else {\r\n            focus.current++;\r\n        }\r\n    }\r\n\r\n    //function to turn searching on and off by button click\r\n    const toggleAnimation = () => {\r\n        if (searching.current) {\r\n            clearInterval(interval.current);\r\n            searching.current = false;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                searchingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            searching.current = true;\r\n            focus.current = null;\r\n            green.current = null;\r\n            pink.current = null;\r\n        }\r\n    }\r\n\r\n    //changes the animation speed of searching when the slider changes\r\n    const updateSpeed = () => {\r\n        if (searching.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                searchingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"linear-search\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" onClick={generateArray}>Random</button>\r\n                    <span className=\"labeledInput\">\r\n                        <label>Array Size</label>\r\n                        <input id=\"arraySizeInput\" ref={arraySizeInput} type=\"text\"></input>\r\n                    </span>\r\n                    <br />\r\n                    <button id=\"searchButton\" onClick={search}>Search</button>\r\n                    <input id=\"searchInput\" ref={searchInput} type=\"text\"></input>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <ArrayDisplay array={array} focus={focus.current} green={green.current} pink={pink.current} />\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element color=\"green\"></Element>\r\n                <p>= Element Found</p>\r\n                < br />\r\n                <Element color=\"pink\"></Element>\r\n                <p>= Element Not Found</p>\r\n                <br />\r\n                <Element border=\"bordered\"></Element>\r\n                <p>= Current Focus</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default LinearSearch;","import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './BinarySearch.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//react component to display a linear search array\r\nconst ArrayDisplay = (props) => {\r\n    return props.array.map((value, index) => {\r\n        if (index === props.focus)\r\n            return <Element key={index} value={value} border=\"bordered\" />;\r\n        else if (index === props.green)\r\n            return <Element key={index} value={value} color=\"green\" />;\r\n        else if (index > props.upper || index < props.lower)\r\n            return <Element key={index} value={value} color=\"pink\" />;\r\n        else\r\n            return <Element key={index} value={value} />;\r\n    });\r\n}\r\n\r\n//react component for linear search\r\nconst BinarySearch = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [array, setArray] = useState([]);\r\n    const arraySizeInput = useRef();\r\n    const searchInput = useRef();\r\n    const speedSlider = useRef();\r\n    const searching = useRef();\r\n    const searchValue = useRef(null);\r\n    const focus = useRef(null);\r\n    const interval = useRef();\r\n    const green = useRef();\r\n    const lower = useRef();\r\n    const upper = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //sets state array to a random array for sorting\r\n    const generateArray = () => {\r\n        if (searching.current) {\r\n            toggleAnimation();\r\n        }\r\n        focus.current = null;\r\n        green.current = null;\r\n        var size = parseInt(arraySizeInput.current.value);\r\n        if(isNaN(size))\r\n            size = randInt(5,50);\r\n        if (size > 0) {\r\n            lower.current = 0;\r\n            upper.current = size-1;\r\n            setArray(randomArray(size));\r\n        }\r\n        arraySizeInput.current.value = null;\r\n    }\r\n    //generates a random array within reasonable bounds\r\n    const randomArray = useCallback((size) => {\r\n        var newArray = new Array(size);\r\n            for (let i = 0; i < size; i++) {\r\n                newArray[i] = randInt(-999, 1000);\r\n            }\r\n        newArray.sort((x,y) => {return x-y});\r\n        return newArray;\r\n    }, []);\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize the array randomly at start\r\n    useEffect(() => {\r\n        setArray(randomArray(randInt(5,50)));\r\n    }, [randomArray]);\r\n\r\n    //function to start searching animation\r\n    const search = () => {\r\n        if (searching.current)\r\n            toggleAnimation();\r\n        var data = parseInt(searchInput.current.value);\r\n        if (isNaN(data))\r\n            data = 0;\r\n        searchInput.current.value = null;\r\n        searchValue.current = data;\r\n        toggleAnimation();\r\n        focus.current = Math.floor((lower.current+upper.current)/2);\r\n        forceUpdate();\r\n    }\r\n\r\n    //function to 1 step of searching animation\r\n    const searchingStep = () => {\r\n        if (upper.current < lower.current) {\r\n            focus.current = null;\r\n            toggleAnimation();\r\n        } else if (focus.current > upper.current || focus.current < lower.current) {\r\n            focus.current = Math.floor((lower.current+upper.current)/2);\r\n        } else if (array[focus.current] < searchValue.current) {\r\n            lower.current = focus.current+1;\r\n        } else if (array[focus.current] > searchValue.current) {\r\n            upper.current = focus.current-1;\r\n        } else {\r\n            green.current = focus.current;\r\n            focus.current = null;\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    //function to turn searching on and off by button click\r\n    const toggleAnimation = () => {\r\n        if (searching.current) {\r\n            clearInterval(interval.current);\r\n            searching.current = false;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                searchingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            searching.current = true;\r\n            focus.current = null;\r\n            green.current = null;\r\n            lower.current = 0;\r\n            upper.current = array.length-1;\r\n        }\r\n    }\r\n\r\n    //changes the animation speed of searching when the slider changes\r\n    const updateSpeed = () => {\r\n        if (searching.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                searchingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-search\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" onClick={generateArray}>Random</button>\r\n                    <span className=\"labeledInput\">\r\n                        <label>Array Size</label>\r\n                        <input id=\"arraySizeInput\" ref={arraySizeInput} type=\"text\"></input>\r\n                    </span>\r\n                    <br />\r\n                    <button id=\"searchButton\" onClick={search}>Search</button>\r\n                    <input id=\"searchInput\" ref={searchInput} type=\"text\"></input>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <ArrayDisplay array={array} focus={focus.current} green={green.current} lower={lower.current} upper={upper.current} />\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element color=\"green\"></Element>\r\n                <p>= Element Found</p>\r\n                < br />\r\n                <Element color=\"pink\"></Element>\r\n                <p>= Elements Ruled Out</p>\r\n                <br />\r\n                <Element border=\"bordered\"></Element>\r\n                <p>= Current Focus</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BinarySearch;","import React, { useState, useRef, useEffect } from 'react';\r\nimport './DepthFirstSearch.scss';\r\nimport { BinaryTreeNode, BinaryTreeClass } from '../BinaryTree/BinaryTree.js';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay';\r\nimport Element from '../Element/Element';\r\n\r\nconst DepthFirstSearch = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [tree, setTree] = useState(new BinaryTreeClass(null));\r\n    const nodeQueue = useRef([]);\r\n    const index = useRef();\r\n    const searchInput = useRef();\r\n    const speedSlider = useRef();\r\n    const searching = useRef();\r\n    const searchValue = useRef(null);\r\n    const current = useRef(null);\r\n    const interval = useRef();\r\n    const green = useRef();\r\n    const pink = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to generate random tree\r\n    const randomTree = () => {\r\n        var newNodeChance = 0.9;\r\n        const levels = randInt(1,5);\r\n        var newTree = new BinaryTreeClass(new BinaryTreeNode(randInt(-999,1000)));\r\n        var nodes = [newTree.root];\r\n        var newNodes = [];\r\n        for (let level = 0; level < levels; level++) {\r\n            for (let i = 0; i < nodes.length; i++) {\r\n                if (Math.random() < Math.pow(newNodeChance, level)) {\r\n                    nodes[i].left = new BinaryTreeNode(randInt(-999,1000));\r\n                    newNodes.push(nodes[i].left);\r\n                }\r\n                if (Math.random() < Math.pow(newNodeChance, level)) {\r\n                    nodes[i].right = new BinaryTreeNode(randInt(-999,1000));\r\n                    newNodes.push(nodes[i].right);\r\n                }\r\n            }\r\n            nodes = newNodes;\r\n            newNodes = [];\r\n        }\r\n        setTree(newTree);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize tree to a random tree\r\n    useEffect(randomTree, []);\r\n\r\n    //function to add nodes to queue in DFS order\r\n    const dfs = (node) => {\r\n        if (node !== null) {\r\n            nodeQueue.current.push(node);\r\n            dfs(node.left);\r\n            dfs(node.right);\r\n        }\r\n\r\n    }\r\n\r\n    //function to start searching animation\r\n    const search = () => {\r\n        if (searching.current)\r\n            toggleAnimation();\r\n        var data = parseInt(searchInput.current.value);\r\n        if (isNaN(data))\r\n            data = 0;\r\n        searchInput.current.value = null;\r\n        nodeQueue.current = [];\r\n        dfs(tree.root);\r\n        current.current = nodeQueue.current[0];\r\n        index.current = 0;\r\n        searchValue.current = data;\r\n        toggleAnimation();\r\n        forceUpdate();\r\n    }\r\n\r\n    //function to 1 step of searching animation\r\n    const searchingStep = () => {\r\n        if (current.current.value === searchValue.current) {\r\n            green.current = current.current;\r\n            current.current = null;\r\n            toggleAnimation();\r\n        } else if (index.current === nodeQueue.current.length-1) {\r\n            pink.current = current.current;\r\n            current.current = null;\r\n            toggleAnimation();\r\n        } else {\r\n            index.current++;\r\n            current.current = nodeQueue.current[index.current];\r\n        }\r\n    }\r\n\r\n    //function to turn searching on and off by button click\r\n    const toggleAnimation = () => {\r\n        if (searching.current) {\r\n            clearInterval(interval.current);\r\n            searching.current = false;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                searchingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            searching.current = true;\r\n            green.current = null;\r\n            pink.current = null;\r\n        }\r\n    }\r\n\r\n    //changes the animation speed of searching when the slider changes\r\n    const updateSpeed = () => {\r\n        if (searching.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                searchingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"depth-first-search\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" onClick={randomTree}>Random</button>\r\n                    <br />\r\n                    <button id=\"searchButton\" onClick={search}>Search</button>\r\n                    <input id=\"searchInput\" ref={searchInput} type=\"text\"></input>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <BinaryTreeDisplay tree={tree} border={current.current} green={green.current} pink={pink.current} />\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element color=\"green\"></Element>\r\n                <p>= Element Found</p>\r\n                < br />\r\n                <Element color=\"pink\"></Element>\r\n                <p>= Element Not Found</p>\r\n                <br />\r\n                <Element border=\"bordered\"></Element>\r\n                <p>= Current Focus</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default DepthFirstSearch;","import React, { useState, useRef, useEffect } from 'react';\r\nimport './BreadthFirstSearch.scss';\r\nimport { BinaryTreeNode, BinaryTreeClass } from '../BinaryTree/BinaryTree.js';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay';\r\nimport Element from '../Element/Element';\r\n\r\nconst BreadthFirstSearch = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [tree, setTree] = useState(new BinaryTreeClass(null));\r\n    const nodeQueue = useRef([]);\r\n    const index = useRef();\r\n    const searchInput = useRef();\r\n    const speedSlider = useRef();\r\n    const searching = useRef();\r\n    const searchValue = useRef(null);\r\n    const current = useRef(null);\r\n    const interval = useRef();\r\n    const green = useRef();\r\n    const pink = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to generate random tree\r\n    const randomTree = () => {\r\n        var newNodeChance = 0.9;\r\n        const levels = randInt(1,5);\r\n        var newTree = new BinaryTreeClass(new BinaryTreeNode(randInt(-999,1000)));\r\n        var nodes = [newTree.root];\r\n        var newNodes = [];\r\n        for (let level = 0; level < levels; level++) {\r\n            for (let i = 0; i < nodes.length; i++) {\r\n                if (Math.random() < Math.pow(newNodeChance, level)) {\r\n                    nodes[i].left = new BinaryTreeNode(randInt(-999,1000));\r\n                    newNodes.push(nodes[i].left);\r\n                }\r\n                if (Math.random() < Math.pow(newNodeChance, level)) {\r\n                    nodes[i].right = new BinaryTreeNode(randInt(-999,1000));\r\n                    newNodes.push(nodes[i].right);\r\n                }\r\n            }\r\n            nodes = newNodes;\r\n            newNodes = [];\r\n        }\r\n        setTree(newTree);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize tree to a random tree\r\n    useEffect(randomTree, []);\r\n\r\n    //function to add nodes to queue in DFS order\r\n    const bfs = () => {\r\n        var currQueue = [tree.root];\r\n        var nextQueue = [];\r\n        while (currQueue.length !== 0) {\r\n            for (let i = 0; i < currQueue.length; i++) {\r\n                nodeQueue.current.push(currQueue[i]);\r\n                if (currQueue[i].left !== null)\r\n                    nextQueue.push(currQueue[i].left);\r\n                if (currQueue[i].right !== null)\r\n                    nextQueue.push(currQueue[i].right);\r\n            }\r\n            currQueue = nextQueue;\r\n            nextQueue = [];\r\n        }\r\n    }\r\n\r\n    //function to start searching animation\r\n    const search = () => {\r\n        if (searching.current)\r\n            toggleAnimation();\r\n        var data = parseInt(searchInput.current.value);\r\n        if (isNaN(data))\r\n            data = 0;\r\n        searchInput.current.value = null;\r\n        nodeQueue.current = [];\r\n        bfs();\r\n        current.current = nodeQueue.current[0];\r\n        index.current = 0;\r\n        searchValue.current = data;\r\n        toggleAnimation();\r\n        forceUpdate();\r\n    }\r\n\r\n    //function to 1 step of searching animation\r\n    const searchingStep = () => {\r\n        if (current.current.value === searchValue.current) {\r\n            green.current = current.current;\r\n            current.current = null;\r\n            toggleAnimation();\r\n        } else if (index.current === nodeQueue.current.length-1) {\r\n            pink.current = current.current;\r\n            current.current = null;\r\n            toggleAnimation();\r\n        } else {\r\n            index.current++;\r\n            current.current = nodeQueue.current[index.current];\r\n        }\r\n    }\r\n\r\n    //function to turn searching on and off by button click\r\n    const toggleAnimation = () => {\r\n        if (searching.current) {\r\n            clearInterval(interval.current);\r\n            searching.current = false;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                searchingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            searching.current = true;\r\n            green.current = null;\r\n            pink.current = null;\r\n        }\r\n    }\r\n\r\n    //changes the animation speed of searching when the slider changes\r\n    const updateSpeed = () => {\r\n        if (searching.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                searchingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"breadth-first-search\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" onClick={randomTree}>Random</button>\r\n                    <br />\r\n                    <button id=\"searchButton\" onClick={search}>Search</button>\r\n                    <input id=\"searchInput\" ref={searchInput} type=\"text\"></input>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <BinaryTreeDisplay tree={tree} border={current.current} green={green.current} pink={pink.current} />\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element color=\"green\"></Element>\r\n                <p>= Element Found</p>\r\n                < br />\r\n                <Element color=\"pink\"></Element>\r\n                <p>= Element Not Found</p>\r\n                <br />\r\n                <Element border=\"bordered\"></Element>\r\n                <p>= Current Focus</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BreadthFirstSearch;","import React from 'react';\r\nimport Array from '../Array/Array';\r\nimport List from '../List/List';\r\nimport ArrayList from '../ArrayList/ArrayList';\r\nimport LinkedList from '../LinkedList/LinkedList';\r\nimport Stack from '../Stack/Stack';\r\nimport Queue from '../Queue/Queue';\r\nimport BinaryTree from '../BinaryTree/BinaryTree';\r\nimport BinarySearchTree from '../BinarySearchTree/BinarySearchTree';\r\nimport AvlTree from '../AvlTree/AvlTree';\r\nimport BinaryHeap from '../BinaryHeap/BinaryHeap';\r\nimport HashTable from '../HashTable/HashTable';\r\nimport Set from '../Set/Set';\r\nimport Map from '../Map/Map';\r\nimport InsertionSort from '../InsertionSort/InsertionSort';\r\nimport SelectionSort from '../SelectionSort/SelectionSort';\r\nimport BubbleSort from '../BubbleSort/BubbleSort';\r\nimport MergeSort from '../MergeSort/MergeSort';\r\nimport QuickSort from '../QuickSort/QuickSort';\r\nimport HeapSort from '../HeapSort/HeapSort';\r\nimport LinearSearch from '../LinearSearch/LinearSearch';\r\nimport BinarySearch from '../BinarySearch/BinarySearch';\r\nimport DepthFirstSearch from '../DepthFirstSearch/DepthFirstSearch';\r\nimport BreadthFirstSearch from '../BreadthFirstSearch/BreadthFirstSearch';\r\n\r\nconst Visualization = (props) => {\r\n\tif (props.visualization === \"Array\")\r\n\t\treturn <Array />;\r\n\tif (props.visualization === \"List\")\r\n\t\treturn <List />;\r\n\tif (props.visualization === \"Array List\")\r\n\t\treturn <ArrayList />;\r\n\tif (props.visualization === \"Linked List\")\r\n\t\treturn <LinkedList />;\r\n\tif (props.visualization === \"Stack\")\r\n\t\treturn <Stack />;\r\n\tif (props.visualization === \"Queue\")\r\n\t\treturn <Queue />;\r\n\tif (props.visualization === \"Binary Tree\")\r\n\t\treturn <BinaryTree />;\r\n\tif (props.visualization === \"Binary Search Tree\")\r\n\t\treturn <BinarySearchTree />;\r\n\tif (props.visualization === \"AVL Tree\")\r\n\t\treturn <AvlTree />;\r\n\tif (props.visualization === \"Binary Heap\")\r\n\t\treturn <BinaryHeap />;\r\n\tif (props.visualization === \"Hash Table\")\r\n\t\treturn <HashTable />;\r\n\tif (props.visualization === \"Set\")\r\n\t\treturn <Set />;\r\n\tif (props.visualization === \"Map\")\r\n\t\treturn <Map />;\r\n\tif (props.visualization === \"Insertion Sort\")\r\n\t\treturn <InsertionSort />;\r\n\tif (props.visualization === \"Selection Sort\")\r\n\t\treturn <SelectionSort />;\r\n\tif (props.visualization === \"Bubble Sort\")\r\n\t\treturn <BubbleSort />;\r\n\tif (props.visualization === \"Merge Sort\")\r\n\t\treturn <MergeSort />;\r\n\tif (props.visualization === \"Quick Sort\")\r\n\t\treturn <QuickSort />;\r\n\tif (props.visualization === \"Heap Sort\")\r\n\t\treturn <HeapSort />;\r\n\tif (props.visualization === \"Linear Search\")\r\n\t\treturn <LinearSearch />;\r\n\tif (props.visualization === \"Binary Search\")\r\n\t\treturn <BinarySearch />;\r\n\tif (props.visualization === \"Depth First Search\")\r\n\t\treturn <DepthFirstSearch />;\r\n\tif (props.visualization === \"Breadth First Search\")\r\n\t\treturn <BreadthFirstSearch />;\r\n\treturn null;\r\n}\r\n\r\nexport default Visualization;","import React from 'react';\r\n\r\nconst ArrayInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <p>An array is a linear data structure where elements are stored in a contiguous block of memory. Each element typically takes up the same amount of space in memory so that the location of an element can be easily computed from its index. To find the location of the element in memory, the index is multiplied by the size of an element and then added to the base address of the array.</p>\r\n            <br />\r\n            <p><u>An Array has the following basic operations:</u></p>\r\n            <ul>\r\n                <li><b>Build:</b> initializes an array of a certain size by allocating space in memory</li>\r\n                <li><b>Set:</b> sets the value of an element at a specific index in the array</li>\r\n                <li><b>Delete:</b> removes an element at a specific index in the array</li>\r\n                <li><b>Get:</b> returns the value of an element at a specific index in the array</li>\r\n            </ul>\r\n            <br />\r\n            <p>Because an array allows for finding the location of an element in memory in constant time, operations like set, delete, and get can all be done in constant time. However, some more complex operations such as insertion and deletion from a full array require copying several elements to new locations in memory, and therefore take linear time.</p>\r\n            <br />\r\n            <table>\r\n                <tbody>\r\n                    <tr><th>Operation</th><th>Complexity</th></tr>\r\n                    <tr><td>Build</td><td>O(1)</td></tr>\r\n                    <tr><td>Set</td><td>O(1)</td></tr>\r\n                    <tr><td>Delete</td><td>O(1)</td></tr>\r\n                    <tr><td>Get</td><td>O(1)</td></tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ArrayInformation;","import React from 'react';\r\n\r\nconst ListInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <p>A list is an Abstract Data Type (ADT) that represents data in a linear structure. Elements can be added or removed at any point in the list. The list maintains a specific order depending on where in the list elements were inserted and removed.</p>\r\n            <br />\r\n            <p><u>A list includes the following basic operations:</u></p>\r\n            <ul>\r\n                <li><b>Insert:</b> inserts an element into the list at a specific index</li>\r\n                <li><b>Remove:</b> removes an element from the list at a specific index</li>\r\n                <li><b>Get:</b> returns an element from the list at a specific index without removing it</li>\r\n            </ul>\r\n            <br />\r\n            <p><u>Since a List is an ADT, it has multiple possible implementations:</u></p>\r\n            <ul>\r\n                <li><b>Array List:</b> Elements are kept in an contiguous piece of memory in an array form. The benefit of this is its simplicity and relatively lower memory usage. Another benefit is the ability to reach an element at a given index in constant time. The cons of this implementation are that it has a limitted capacity and may need to copy all of its values to a new array to increase the capacity. Also, it takes linear time to insert or remove an element.</li>\r\n                <li><b>Linked List:</b> Each element is kept with a pointer to the next element in the list. A pointer is kept for the first element in the list. The advantage of this is that it can dynamically resize at runtime and takes only as much memory as is needed. It also allows constant time removal or addition to the head, or any other place in the list if it has a pointer to that spot. A disadvantage of linked list is the greater memory cost to store values and pointers to the next node. Also, reaching an element at a given index takes linear time.</li>\r\n            </ul>\r\n            <br />\r\n            <table>\r\n                <tbody>\r\n                    <tr><th></th><th>Array List</th><th>Linked List</th></tr>\r\n                    <tr><th>Insert at head</th><td>O(n)</td><td><b>O(1)</b></td></tr>\r\n                    <tr><th>Remove at head</th><td>O(n)</td><td><b>O(1)</b></td></tr>\r\n                    <tr><th>Get from head</th><td>O(1)</td><td>O(1)</td></tr>\r\n                    <tr><th>Insert at given index</th><td>O(n)</td><td>O(n)</td></tr>\r\n                    <tr><th>Remove at given index</th><td>O(n)</td><td>O(n)</td></tr>\r\n                    <tr><th>Get from given index</th><td><b>O(1)</b></td><td>O(n)</td></tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListInformation;","import React from 'react';\r\n\r\nconst ArrayListInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <p>An Array List is a linear data structure. Values are stored in an array structure using a contiguous block of memory. An Array List is one possible implementation of a List, an Abstract Data Type (ADT).</p>\r\n            <br />\r\n            <p><u>An Array List has the following basic operations:</u></p>\r\n            <ul>\r\n                <li><b>Insert:</b> inserts an element into the array list at a specific index</li>\r\n                <li><b>Remove:</b> removes an element from the array list at a specific index</li>\r\n                <li><b>Get:</b> returns an element from the array list at a specific index without removing it</li>\r\n            </ul>\r\n            <br />\r\n            <p>Since the information in an array list is stored contiguously in an array, it benefits from random access. Consequently, operations such as accessing an element from a given index are very inexpensive. The trade off for this is that insertion and deletion become expensive operations since they require creating a new array or copying several elements to new locations in memory.</p>\r\n            <br />\r\n            <table>\r\n                <tbody>\r\n                    <tr><th>Operation</th><th>Complexity</th></tr>\r\n                    <tr><td>Insert at head</td><td>O(n)</td></tr>\r\n                    <tr><td>Remove at head</td><td>O(n)</td></tr>\r\n                    <tr><td>Get from head</td><td>O(1)</td></tr>\r\n                    <tr><td>Insert at given index</td><td>O(n)</td></tr>\r\n                    <tr><td>Remove at given index</td><td>O(n)</td></tr>\r\n                    <tr><td>Get from given index</td><td>O(1)</td></tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ArrayListInformation;","import React from 'react';\r\n\r\nconst LinkedListInformation = () => {\r\n\treturn (\r\n\t\t<div className=\"information\">\r\n\t\t\t<p>A Linked List is a linear data structure consisting of several nodes. Each node contains an element value, and a pointer to the next node's location in memory. The last node in the list will have a pointer to null. A pointer to the head of the list is always kept track of. A Linked List is one possible implementation of a List, an Abstract Data Type (ADT).</p>\r\n\t\t\t<br />\r\n\t\t\t<p><u>A linked list includes the following basic operations:</u></p>\r\n            <ul>\r\n                <li><b>Insert:</b> inserts an element into the list at a specific index</li>\r\n                <li><b>Remove:</b> removes an element from the list at a specific index</li>\r\n                <li><b>Get:</b> returns an element from the list at a specific index without removing it</li>\r\n            </ul>\r\n            <br />\r\n\t\t\t<p>The nodes in a Linked List do not need to be stored in contiguous memory. Because of this, it benefits from the ability to insert and delete elements at any point in the list without restructuring or reallocating data in memory. However, one prominent trade off for these benefits is the lack of random access. This causes basic operations, such as obtaining an element by a given index or locating a point of insertion/deletion, to require iterating over the data structure.</p>\r\n\t\t\t<br />\r\n\t\t\t<table>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t<tr><th>Operation</th><th>Complexity</th></tr>\r\n\t\t\t\t\t<tr><td>Insert at head</td><td>O(1)</td></tr>\r\n\t\t\t\t\t<tr><td>Remove at head</td><td>O(1)</td></tr>\r\n\t\t\t\t\t<tr><td>Get from head</td><td>O(1)</td></tr>\r\n\t\t\t\t\t<tr><td>Insert at given index</td><td>O(n)</td></tr>\r\n\t\t\t\t\t<tr><td>Remove at given index</td><td>O(n)</td></tr>\r\n\t\t\t\t\t<tr><td>Get from given index</td><td>O(n)</td></tr>\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\r\n\t\t</div>\r\n\t\t//TODO add more \r\n\t);\r\n}\r\n\r\nexport default LinkedListInformation;","import React from 'react';\r\n\r\nconst StackInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <p>A stack is an Abstract Data Type (ADT) that represents a linear data structure. Elements are stored in a sequential order depending on when they are added to the stack. Elements may only be added or removed from one end of the stack. Therefore a stack is a last-in-first-out (LIFO) data structure. When an element is removed from the stack, it must be the last element that was added onto the end. Likewise, the last element to be removed before the stack is empty would be the first element that was inserted.</p>\r\n            <br />\r\n            <p><u>A stack has the following basic operations:</u></p>\r\n            <ul>\r\n                <li><b>Push:</b> adds an element at the end of the stack</li>\r\n                <li><b>Pop:</b> removes an element from the end of the stack</li>\r\n                <li><b>Peek:</b> returns the element at the end of the stack without removing it</li>\r\n            </ul>\r\n            <br />\r\n            <p><u>Since a stack is an ADT, it has multiple possible implementations:</u></p>\r\n            <ul>\r\n                <li><b>Array Implementation:</b> An array is allocated with a certain capacity to represent the stack. The index of the current top of the stack is kept track of. The advantages of this implementation are its simplicity and relatively low memory usage. The main disadvantage is that the size of the array cannot change so there is a limit to how much data can be stored. On the other hand, the space allocated may be way more than needed.</li>\r\n                <li><b>Linked List Implementation:</b> A linked list is created to represent the stack. Elements are added and removed from the head of the linked last. The advantage of this implementation is its ability to be resized at runtime, therefore only using as much memory as is needed. The disadvantage of this is that the pointers involved in linked lists use more memory than a simple array.</li>\r\n            </ul>\r\n            <br />\r\n            <table>\r\n                <tbody>\r\n                    <tr><th></th><th>Array Implementation</th><th>Linked List Implementation</th></tr>\r\n                    <tr><th>Push</th><td>O(1)</td><td>O(1)</td></tr>\r\n                    <tr><th>Pop</th><td>O(1)</td><td>O(1)</td></tr>\r\n                    <tr><th>Peek</th><td>O(1)</td><td>O(1)</td></tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StackInformation","import React from 'react';\r\n\r\nconst QueueInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <p>A queue is an Abstract Data Type (ADT) that represents a linear data structure. Elements may only be added to one end and removed from the other end of a queue. Therefore a queue is a first-in-first-out (FIFO) data structure. When an element is removed from the queue, it will be the earliest one added. The last element to be removed will be the last one added to the queue.</p>\r\n            <br />\r\n            <p><u>A queue has the following basic operations:</u></p>\r\n            <ul>\r\n                <li><b>Enqueue:</b> adds an element to the queue</li>\r\n                <li><b>Dequeue:</b> removes an element from the queue</li>\r\n                <li><b>Peek:</b> returns the next element to be removed from the queue without removing it</li>\r\n            </ul>\r\n            <br />\r\n            <p><u>Since a queue is an ADT, it has multiple possible implementations:</u></p>\r\n            <ul>\r\n                <li><b>Linked List Implementation:</b> A linked list is created to represent the queue. Elements are enqueued at the tail of the linked list and dequeued at the head. A pointer is kept for both the head and tail to allow this. Often a doubly linked list is often used instead of this. The advantage of the linked list implementation is its ability to be resized and grown as much as necessary. The disadvantage of this is that the pointers involved in linked lists use more memory than a simple array.</li>\r\n                <li><b>Array Implementation:</b> An array is allocated with a certain capacity to represent the queue. The index of both ends of the queue are kept track of. When we remove or add an element, these indices are updated. The array is used in a circular fashion so that our queue maintains a constant maximum capacity. The advantages of this implementation are its simplicity and relatively low memory usage. The main disadvantage is that the size of the array cannot change so there is a limit to how much data can be stored. On the other hand, the space allocated may be way more than needed.</li>\r\n            </ul>\r\n            <br />\r\n            <table>\r\n                <tbody>\r\n                    <tr><th></th><th>Array Implementation</th><th>Linked List Implementation</th></tr>\r\n                    <tr><th>Enqueue</th><td>O(1)</td><td>O(1)</td></tr>\r\n                    <tr><th>Dequeue</th><td>O(1)</td><td>O(1)</td></tr>\r\n                    <tr><th>Peek</th><td>O(1)</td><td>O(1)</td></tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QueueInformation;","import React from 'react';\r\n\r\nconst BinaryTreeInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <p>A Tree is a heirarchal data structure consisting of levels of nodes. Each node contains a value for that element in the tree, and some amount of pointers to children nodes. Since there can be any number of children nodes, a list is typically used to keep track of all of the children of a given node. The first node in the tree is known as the root, and is always kept track of as the start of the entire structure. The children of the root can be thought of as sub-trees, which are on there own also a data structure. Depending on how many children that a node has, the tree can be very different.</p>\r\n            <br />\r\n            <p>One specific type of Tree is a Binary Tree. A Binary Tree is a data structure in which each node in the tree contains at most two children nodes, a left and a right child. Each node contains the value of an element, a pointer to the left child node, and a pointer to the right child node. If a node does not have a left or right child it typically has a null pointer.</p>\r\n            <br />\r\n            <p><u>Binary Trees are used to implement several other data structures:</u></p>\r\n            <ul>\r\n                <li><b>Binary Search Tree:</b> elements are kept in an ordered pattern to allow for fast searching</li>\r\n                <li><b>AVL Tree:</b> after insertion or deletion the tree balances itself to keep a minimal height</li>\r\n                <li><b>Binary Heap:</b> elements are kept in an ordered pattern to keep extrema at the root</li>\r\n            </ul>\r\n            <br />\r\n            <p>When we consider trees, it is often useful to think about the height of the tree. This is because operations that require a single traversal down the tree will have a complexity equal to the height. Because of its heirarchical structure, a Binary Tree has an average-case height of O(log n) where n is the number of elements. In the worst-case where the tree is just a sequence of nodes with only right or left children, the height of the tree becomes O(n).</p>\r\n            <br />\r\n            <table>\r\n                <tbody>\r\n                    <tr><th>Property</th><th>Worst-Case</th><th>Average-Case</th></tr>\r\n                    <tr><td>Height</td><td>O(n)</td><td>O(log n)</td></tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BinaryTreeInformation;","import React from 'react';\r\n\r\nconst BinarySearchTreeInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <p>A Binary Search Tree is a tree data structure where elements are kept in an ordered pattern. For any given node, all of the elements in the left sub-tree are less than or equal to the given node, and all of the elements in the right sub-tree are greater than or equal to the given node.</p>\r\n            <br />\r\n            <p><u>A Binary Search Tree has the following basic operations:</u></p>\r\n            <ul>\r\n                <li><b>Insert:</b> inserts an element into tree</li>\r\n                <li><b>Remove:</b> removes an element from the tree</li>\r\n                <li><b>Find:</b> searches for an element in the tree</li>\r\n            </ul>\r\n            <br />\r\n            <p>In order to maintain the ordered property of the tree, insertion and removal of elements must be done in a careful manner. For insertion the tree is traversed going left if the new value is less than the current node and going right if the new value is greater than the current node. Once we reach an empty spot, a new node is created there with the new value.</p>\r\n            <br />\r\n            <p>To remove a value from the tree, it becomes more complex. First we traverse the tree to find the node of the value we want to remove. If it has no children, we simply set its parent's child to null. If it has 1 child, we set its parent's child to its child. If it has 2 children, we find the leftmost child of the right sub-tree of the current node, set the current node to that value, and then delete the leftmost child of the right sub-tree. This can also be done with the rightmost child of the left sub-tree.</p>\r\n            <br />\r\n            <p>To understand the complexity of the operations in a Binary Search Tree we must consider the height of the tree. In the worst-case, the tree will be a straight line, and the height will be equal to the number of elements, O(n). In the average-case and best-case, the height of the tree will be O(log n).</p>\r\n            <br />\r\n            <table>\r\n                <tbody>\r\n                    <tr><th>Operation</th><th>Worst-Case</th><th>Average-Case</th></tr>\r\n                    <tr><td>Insert</td><td>O(n)</td><td>O(log n)</td></tr>\r\n                    <tr><td>Remove</td><td>O(n)</td><td>O(log n)</td></tr>\r\n                    <tr><td>Find</td><td>O(n)</td><td>O(log n)</td></tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BinarySearchTreeInformation;","import React from 'react';\r\n\r\nconst AvlTreeInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <p>An AVL Tree is a self-balancing binary search tree. Thus, it inherits the properties of order as well as the restriction that each node has either zero, one, or two children. The additional restriction placed on AVL Trees is that the height of two sibling subtrees differ by at most one. It maintains this condition by performing a series of rotational operations on nodes following insertion and deletion.</p>\r\n            \r\n            <br />\r\n            <p><u>An AVL Tree has the following basic operations:</u></p>\r\n            <ul>\r\n                <li><b>Insert:</b> inserts an element into tree</li>\r\n                <li><b>Remove:</b> removes an element from the tree</li>\r\n                <li><b>Find:</b> searches for an element in the tree</li>\r\n            </ul>\r\n            <br />\r\n            <p>At insertion, a regular BST insertion is performed. Next, if there is an unbalanced node found on the path up from the newly inserted node to the root, then a rotation will occur. The exact rotation operation depends on the relative postions of the first unbalanced node and its two immediate adjacent ancestors on the path back to the newly inserted node.</p>\r\n            <br />\r\n            <p>Likewise, at deletion, a regular BST deletion is performed and a rotation may also occur. However, whether or not the rotation occurs and the exact rotation operation depends instead on the relative positions of the first unbalanced node on the path up the tree as well as its two immediate ancestors that are each the largest height child of their parent node.</p>\r\n            <br />\r\n            <p>Because of the fact that AVL Trees maintain a balanced state, they have advantages over a traditional Binary Search Tree. The height of the tree will always be O(log n), where as a regular BST may have a height of O(n). The worst-case time complexities for each basic operation are O(log n) in an AVL Tree rather than O(n).</p>\r\n            <br />\r\n            <table>\r\n                <tbody>\r\n                    <tr><th>Operation</th><th>Worst-Case</th><th>Average-Case</th><th>BST Worst-Case</th></tr>\r\n                    <tr><td>Insert</td><td>O(log n)</td><td>O(log n)</td><td>O(n)</td></tr>\r\n                    <tr><td>Remove</td><td>O(log n)</td><td>O(log n)</td><td>O(n)</td></tr>\r\n                    <tr><td>Find</td><td>O(log n)</td><td>O(log n)</td><td>O(n)</td></tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AvlTreeInformation;","import React from 'react';\r\n\r\nconst BinaryHeapInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <p>A Binary Heap is special type of Binary Tree with a few special properties. The first property is that it is a complete tree. This means that every level in the tree is completely filled with nodes except the last level, where all of the nodes are as far left as possible. The second property is that any given node in the tree has a smaller or greater value than all of the nodes in its child sub-trees. In a Min Heap, the value will always be smaller than all of its children. In a Max Heap the value will always be larger than all of its children. Here we will be using a Min Heap.</p>\r\n            <br />\r\n            <p><u>A Binary Heap has the following basic operations:</u></p>\r\n            <ul>\r\n                <li><b>Insert:</b> inserts an element into the heap</li>\r\n                <li><b>Remove:</b> removes the element at the root of the heap</li>\r\n            </ul>\r\n            <br />\r\n            <p>In order to maintain the special properties of the heap, insertion and removal of elements must be done in a careful manner. For inserting a value, a new node is created at the left-most position in the lowest layer of the tree that is not yet filled. Then this new node is repeatedly compared with its parent. If its value is less than its parent, it must swap positions with its parent in order to maintain the second property of a heap. It repeats this process until the parent is less than the new node, or the new node becomes the root.</p>\r\n            <br />\r\n            <p>In a heap removal is only done from the root of the tree. Since all of the nodes in the left and right sub-trees of the root are greater than the root, the root will be the minimum value in the heap. When we remove the root, we replace it with the left-most bottom node in the tree to maintain the first property of a heap. Then we must repeatedly compare the new root with its children elements. If the new node is less than the two children nodes, then the second property of a heap is maintained, and we are done. If it is not less than the two children, it is swapped with the smaller of the two children, and the process repeats. It must swap with the smaller of the two children because that child will become the parent of the other child. Once the new node is smaller than both of its children, or it reaches the bottom of the tree, the removal process is finished.</p>\r\n            <br />\r\n            <p>Because a Binary Heap is a complete tree, it can be stored in the form of an array with each level stored consecutively from left to right. The root is stored at index 0, and any node at index i  has its two children at index 2*i+1 and index 2*i+2. The parent of any node at index i is the floor of (i-1)/2. The advantage of storing the tree in an array form is that we do not need extra memory to store pointers, and we do not have to deal with changing pointers when nodes are swapped.</p>\r\n            <br />\r\n            <p>The complexities of the operations in a Binary Heap are dependent on the height of the tree, h. Because it is a complete tree, the height will always be O(log n). For insertion, the worst-case scenario is that the new node has to move all the way up to the root of the tree. For removal, the worst-case is that the node swapped with the previous root has to move all the way back to the bottom of the tree. Both of these things will take O(h) comparisons, so both insertion and removal have a complexity of O(log n).</p>\r\n            <br />\r\n            <table>\r\n                <tbody>\r\n                    <tr><th>Operation</th><th>Complexity</th></tr>\r\n                    <tr><td>Insert</td><td>O(log n)</td></tr>\r\n                    <tr><td>Remove</td><td>O(log n)</td></tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BinaryHeapInformation;","import React from 'react';\r\n\r\nconst HashTableInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <p>A Hash Table is a data structure that places values in an array at an index based on a hash code computed from the key using a hash function. In this visualization, the key and the value are the same integer value. An array is defined for the Hash Table with a fixed size. Once the array reaches a certain capacity of elements, a new larger array is created and all of the previous elements are inserted back into the new array. The maximum capacity of the array before it must be resized is called the load factor, and is typically a fixed percentage.</p>\r\n            <br />\r\n            <p><u>A Hash Table has the following basic operations:</u></p>\r\n            <ul>\r\n                <li><b>Build:</b> initializes a hash table with a given size and load factor</li>\r\n                <li><b>Insert:</b> inserts a value into the hash table with a certain key</li>\r\n                <li><b>Remove:</b> removes the value for a given key from the hash table</li>\r\n                <li><b>Find:</b> checks if a given key is in the hash table and returns its value</li>\r\n            </ul>\r\n            <br />\r\n            <p>In an ideal situation, the hash function will provide a unique index for every key provided to it. However, it is possible to have two different keys that produce the same hash code. This is called a collision and can be handled in many different ways. One way to handle it is linear probing. This means that if a value is already located at the computed index when inserting a key and value, we perform a linear scan of the array to find the next open position, and insert the key and value there.</p>\r\n            <br />\r\n            <p>A key and value can be removed from the hash table similar to insertion. First the hash code is computed, then that index is checked for the given key and value. If it is not a linear scan is performed to find the target. If an empty slot is found in the linear scan, it means that key is not in the hash table and the scan ends. If the key and value are found, they are removed. Finding the value for a key can be done in exactly the same way, except the value is returned instead of deleting the key value pair.</p>\r\n            <br />\r\n            <p>Because the ideal position of elements can be computed in constant time for a Hash Table, most of its operations have an average-case complexity of O(1). However because of collisions and the potential need to resize the array of a hash table, the worst-case complexity of most operations is O(n).</p>\r\n            <br />\r\n            <table>\r\n                <tbody>\r\n                    <tr><th>Operation</th><th>Worst-Case</th><th>Average-Case</th></tr>\r\n                    <tr><td>Build</td><td>O(1)</td><td>O(1)</td></tr>\r\n                    <tr><td>Insert</td><td>O(n)</td><td>O(1)</td></tr>\r\n                    <tr><td>Remove</td><td>O(n)</td><td>O(1)</td></tr>\r\n                    <tr><td>Find</td><td>O(n)</td><td>O(1)</td></tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HashTableInformation;","import React from 'react';\r\n\r\nconst SetInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <p>A set is an Abstract Data Type (ADT) representing an unordered collection of data with no repeat elements. The data is stored in no particular order, and there can only be one of any given value in the set. Elements are either in or not in the set. There is no concept of order or quantities in a set. Thus sets are most useful for problems in which membership in the set is the most important property.</p>\r\n            <br />\r\n            <p><u>A Set has the following basic operations:</u></p>\r\n            <ul>\r\n                <li><b>Insert:</b> attempts to add an element to the set</li>\r\n                <li><b>Remove:</b> attempts to remove an element from the set</li>\r\n                <li><b>Find:</b> checks if an element is in the set</li>\r\n            </ul>\r\n            <br />\r\n            <p>The Set ADT is typically implemented using a Hash Table. With the hash table implementation, the key used for any value in the set is the same as its value. Because a Hash Table has constant time complexities for insertion, removal, and finding operations, a set has the same complexities for these operations.</p>\r\n            <br />\r\n            <table>\r\n                <tbody>\r\n                    <tr><th>Operation</th><th>Worst-Case</th><th>Average-Case</th></tr>\r\n                    <tr><td>Insert</td><td>O(n)</td><td>O(1)</td></tr>\r\n                    <tr><td>Remove</td><td>O(n)</td><td>O(1)</td></tr>\r\n                    <tr><td>Find</td><td>O(n)</td><td>O(1)</td></tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SetInformation;","import React from 'react';\r\n\r\nconst MapInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <p>A Map is an Abstract Data Type (ADT) representing a collection of key and value pairs. Any value in the Map can be accessed using its corresponding key. Keys in a map must be unique, meaning each key can only have one corresponding value. The key value pairs in a map are stored in no particular order, they are simply a collection of data.</p>\r\n            <br />\r\n            <p><u>A Map has the following basic operations:</u></p>\r\n            <ul>\r\n                <li><b>Insert:</b> adds a new key and value pair to the map or sets a new value for a key</li>\r\n                <li><b>Remove:</b> attempts to remove a key and value pair from the map</li>\r\n                <li><b>Get:</b> attempts to return the value in the map for a given key</li>\r\n            </ul>\r\n            <br />\r\n            <p>The Map ADT is typically implemented using a Hash Table. A Hash Table is a natural choice to implement a Map because it already has key and value pairs. Because a Hash Table has constant time complexities for insertion, removal, and get operations, a map has the same complexities for these operations.</p>\r\n            <br />\r\n            <table>\r\n                <tbody>\r\n                    <tr><th>Operation</th><th>Worst-Case</th><th>Average-Case</th></tr>\r\n                    <tr><td>Insert</td><td>O(n)</td><td>O(1)</td></tr>\r\n                    <tr><td>Remove</td><td>O(n)</td><td>O(1)</td></tr>\r\n                    <tr><td>Get</td><td>O(n)</td><td>O(1)</td></tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MapInformation;","import React from 'react';\r\n\r\nconst InsertionSortInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <p>Insertion sort is an algorithm used to sort an array by partitioning an array into two subarrays: sorted and unsorted. It then builds the sorted subarray one element at a time until the unsorted subarray is depleted.</p>\r\n            <br />\r\n            <p>The algorithm repeatedly designates a value from the unsorted subarray as the current value to be inserted. It then iterates through the sorted array, comparing each element to the one to be inserted. Once the sorted position of the element to be inserted is determined, it is moved from the unsorted subarray into its proper sorted position in the sorted subarray. This process of designating the element to be inserted, finding its sorted position, and inserting it repeats until the unsorted subarray has been completely depleted and the whole starting list has been sorted.</p>\r\n            <br />\r\n            <p>Although the algorithm does become signicantly less efficient when used on large data sets, it is quite effiecient for sorting lists that are already mostly sorted. This, in conjunction with the ease of implementation, makes it an ideal sorting algorithm for many situtions. For example, a large sorted list which is constantly being added to.</p>\r\n            <br />\r\n            <table>\r\n                <tbody>\r\n                    <tr><th>Insertion Sort</th><th>Complexity</th></tr>\r\n                    <tr><td>Time Complexity</td><td>O(n<sup>2</sup>)</td></tr>\r\n                    <tr><td>Space Complexity</td><td>O(1)</td></tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InsertionSortInformation;","import React from 'react';\r\n\r\nconst SelectionSortInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <p>Selection sort is an algorithm to sort an array that repeatedly finds the minimum value of the unsorted elements. Two subarrays are kept. At the beginning of the array is a subarray of elements that have been already been selected as the minimum and are placed in their correct position in the sorted array. The rest of the array is the remaining unsorted elements.</p>\r\n            <br />\r\n            <p>The algorithm repeatedly finds the minimum value of the unsorted subarray, and swaps it with the first element of the unsorted portion. That element is then considered sorted, so the sorted subarray grows in size, and the unsorted subarray decreases in size. This is repeated until the sorted portion of the array becomes as large as the entire array.</p>\r\n            <br />\r\n            <p>To find the minimum element of the unsorted subarray, a linear scan is used where the smallest element is kept track of. Then the minimum can be swapped with the beginning in costant time. The linear scan portion takes n comparisons the first time, n-1 comparisons the second time, and so on until there is 1 comparison on the last scan. Because of this the overall time complexity is O(n<sup>2</sup>). Since all of the swaps are done in place for selection sort, the space complexity is constant.</p>\r\n            <br />\r\n            <table>\r\n                <tbody>\r\n                    <tr><th>Selection Sort</th><th>Complexity</th></tr>\r\n                    <tr><td>Time Complexity</td><td>O(n<sup>2</sup>)</td></tr>\r\n                    <tr><td>Space Complexity</td><td>O(1)</td></tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SelectionSortInformation;","import React from 'react';\r\n\r\nconst BubbleSortInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <p>Bubble sort is an algorithm used to sort an array by repeatedly iterating through each adjacent pair of elements in a list, comparing each element to its adjacent partner, and then either swapping or not swapping the elements such that they end up in the correct order. Upon reaching the end of the list, the algorithm repeats this process, starting over at the first element of the array. This process is repeated until each adjacent pair is observed to be in the correct order and no swaps take place for an entire pass.</p>\r\n            <br />\r\n            <p>The visualization below shows an optimized version of Bubble sort. This version involves recognizing that after n passes over the array, the nth element in the array is in the sorted position. Thus, the algorithm need not pass over the final n-1 elements after n passes. This reduces the total number of necessary comparisons, however makes no change to the number of swaps (since swaps only occur on elements which are in the incorrect position).</p>\r\n            <br />\r\n            <p>In both versions of Bubble sort, the maximum number of passes needed to sort an an array with n elements will be O(n). Since each pass will also take on average O(n) time, the overall time complexity of Bubble sort is O(n<sup>2</sup>). No extra space is needed for Bubble sort.</p>\r\n            <br />\r\n            <table>\r\n                <tbody>\r\n                    <tr><th>Bubble Sort</th><th>Complexity</th></tr>\r\n                    <tr><td>Time Complexity</td><td>O(n<sup>2</sup>)</td></tr>\r\n                    <tr><td>Space Complexity</td><td>O(1)</td></tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BubbleSortInformation;","import React from 'react';\r\n\r\nconst MergeSortInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <p>Merge Sort is a divide and conquer algorithm for sorting an array. First the array is split up into several sub-arrays of size 1. Then every pair of arrays is merged in such a way that the new merged array contains the elements of the two previous arrays in sorted order. This is repeated until all arrays have been merged into one final sorted array.</p>\r\n            <br />\r\n            <p>Another way to think of Merge Sort is as a recursive algorithm. First the array is split into two parts, then both parts are recursively sorted, and finally the two parts are merged back together in a sorted order. The base case of this recursion would be a sub-array of size 1, which is already sorted.</p>\r\n            <br />\r\n            <p>The way that two sorted sub-arrays can be merged into one sorted array is fairly simple. We just repeatedly take the larger of the two elements at the ends of both arrays, and add that to our new merged array. This continues until one sub-array is empty, and then we just concatenate the remaining values at the beginning of our new array. This works because the maximum value of the two values at the ends of the sub-arrays is guaranteed to be the largest value remaining in all of the two sub-arrays.</p>\r\n            <br />\r\n            <p>To understand the complexity of Merge Sort, consider the complexity of a single level of the algorithm, and how many levels there will be. A single level of Merge Sort consists of merging k pairs of sub-arrays with a total size n/k. Merging a pair of sub-arrays with a total size of n/k takes linear time with a worst case of n/k-1 comparisons. Doing this k times gives a single level of Merge Sort a complexity of k*O(n/k) which is just O(n). The number of levels of Merge Sort is equal to the number of times we can split our sub-arrays into two parts. This will be O(log n). So with O(log n) levels and O(n) time on each level, the overall time complexity of Merge Sort is O(n log n). The space required for Merge Sort is just memory for the new arrays that are being merged into which will be O(n) in total.</p>\r\n            <br />\r\n            <table>\r\n                <tbody>\r\n                    <tr><th>Merge Sort</th><th>Complexity</th></tr>\r\n                    <tr><td>Time Complexity</td><td>O(n log n)</td></tr>\r\n                    <tr><td>Space Complexity</td><td>O(n)</td></tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MergeSortInformation;","import React from 'react';\r\n\r\nconst QuickSortInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <p>Quick sort is a divide-and-conquer algorithm to sort an array. It involves first selecting a pivot and then swapping elements and moving the pivot such that all elements to the left of the pivot are less than the pivot and all elements to the right of the pivot are greater. The greater and less than values are then partitioned into two subarrays and the process is repeated recursiveley.</p>\r\n            <br />\r\n            <p>The choice of the pivot is open to some variation. In this visualization we chose to use the last element in each partition as the pivot. Thus, a single partition is processed by first designating the last element in the partition as the pivot. Next, a low pointer is placed on the lower bound index of the partition and a high pointer is placed on the higher bound index of the parition. The low pointer then moves rightward until and element is found that is greater than the pivot element. The high pointer follows suit by moving leftward until it finds an element that is less than the pivot element. When both the low and high pointers find their target they perform a swap. The pointers then both move again, repeating the process, until they cross. Crossed pointers indicate the sorted location of the pivot element. Thus, the pivot is moved to that location and the array is partitioned into a lower and upper subarray. The entire procedure is then repeated recursively until all elements are sorted.</p>\r\n            <br />\r\n            <p>Quick sort has a worst-case time complexity of O(n<sup>2</sup>). This occurs when partitions are repeatedly the most unbalanced they can be, meaning that after every partitioning process one of the new paritions is of size n-1 elements. In our visualization this would occur when the array is already sorted prior to the use of our algorithm. In the best-case, all partitions created of nearly equal sizes, and the time-complexity is O(n log n). The average case is also O(n log n).</p>\r\n            <br />\r\n            <table>\r\n                <tbody>\r\n                    <tr><th>Quick Sort</th><th>Complexity</th></tr>\r\n                    <tr><td>Average-case Time Complexity</td><td>O(n log n)</td></tr>\r\n                    <tr><td>Worst-case Time Complexity</td><td>O(n<sup>2</sup>)</td></tr>\r\n                    <tr><td>Space Complexity</td><td>O(n)</td></tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuickSortInformation;","import React from 'react';\r\n\r\nconst HeapSortInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <p>Heap Sort is an algorithm to sort an array which adds all of the elements to a Binary Heap, and then repeatedly removes elements from the heap until it is empty. The elements are removed from the heap in a sorted order, and are added to a new sorted array in the order that they are removed.</p>\r\n            <br />\r\n            <p>In order to sort the elements in our array from least to greatest, the heap we use must be a Min Heap. This way the element at the root of the tree is guaranteed to be the smallest value in the heap. We repeatedly remove from the root to get the smallest remaining value in the tree. Once the heap is empty, all of the original elements have been removed in a sorted order.</p>\r\n            <br />\r\n            <p>Insertion and removal into a Binary Heap both have a time complexity of O(log n). Because every element in the array must be both inserted and removed from the heap, the overall time complexity of Heap Sort is n*O(log n) + n*O(log n), which is O(n log n). The space required to store all of the values in a Binary Heap will be linear with regards to the number of elements in the original array. However, it is possible to convert the original array into a Binary Heap in place, and vice versa. Thus, the space complexity of Heap Sort can be constant.</p>\r\n            <br />\r\n            <table>\r\n                <tbody>\r\n                    <tr><th>Heap Sort</th><th>Complexity</th></tr>\r\n                    <tr><td>Time Complexity</td><td>O(n log n)</td></tr>\r\n                    <tr><td>Space Complexity</td><td>O(1)</td></tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HeapSortInformation;","import React from 'react';\r\n\r\nconst LinearSearchInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <p>Linear Search is an algorithm to search for a value in an array or any other linear data structure. It takes the straightforward approach of starting at the beginning of the array, and searching every element one by one from the beginning to the end. If it finds the target value or reaches the end of the array, the search is over.</p>\r\n            <br />\r\n            <p>In the worst-case, Linear Search must compare the target value with every value in the array. Thus, an array with n elements will have a time complexity of O(n) for Linear Search. The space complexity of linear search is constant because no extra space is required.</p>\r\n            <br />\r\n            <table>\r\n                <tbody>\r\n                    <tr><th>Linear Search</th><th>Complexity</th></tr>\r\n                    <tr><td>Time Complexity</td><td>O(n)</td></tr>\r\n                    <tr><td>Space Complexity</td><td>O(1)</td></tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LinearSearchInformation;","import React from 'react';\r\n\r\nconst BinarySearchInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <p>Binary Search is an algorithm to search for a value in an array or any other linear data structure. Binary Search is only possible if the array is already in a sorted order. The search starts at the midpoint of the array, and compares it with the target value. If it is less than the target value, the search continues only in the right half of the array. If it is greater than the target value, the search continues only in the left half of the array. If it is equal, the search ends and we have found our target value. The number of elements we are searching is cut in half with every comparison this way. Once we are down to a single element and it is not equal to our target then our search is over.</p>\r\n            <br />\r\n            <p>Binary Search relies on the fact that the array is already sorted beforehand. Because of this it is able to eliminate half of the entries remaining with every comparison, because all values after a certain value are greater than or equal to that value, and all values before a certain value are less than or equal to that value.</p>\r\n            <br />\r\n            <p>Because the number of elements we are looking at gets cut in half with every comparison, the total number of comparisons needed to complete Binary Search in an array of length n will be maximum log n. Thus the time complexity of Binary Search is O(log n). The only extra memory we need for Binary Search is two pointers representing the start and end of the section of the array we are still considering. Therefore the space complexity of Binary Search is constant.</p>\r\n            <br />\r\n            <table>\r\n                <tbody>\r\n                    <tr><th>Binary Search</th><th>Complexity</th></tr>\r\n                    <tr><td>Time Complexity</td><td>O(log n)</td></tr>\r\n                    <tr><td>Space Complexity</td><td>O(1)</td></tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BinarySearchInformation;","import React from 'react';\r\n\r\nconst DepthFirstSearchInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <p>Depth First Search (DFS) is an algorithm to search for a value in a tree data structure. Every node is traversed in a certain order until either the value is found, or every node in the tree has been visited meaning the value is not in the tree.</p>\r\n            <br />\r\n            <p>In a Depth First Search, we start searching at the root of the tree. The root of the tree becomes our current node. We first check if the current node contains our target value. Then we recursively check all of the children sub-trees of the current node. For a binary tree, this means we recursively check the entire left sub-tree of the current node and the entire right sub-tree. In this way we first check all the way down the left-most path down the tree, and then backtrack when there are no more nodes left on that branch, and continue until every node has been visited.</p>\r\n            <br />\r\n            <p>For any tree with n nodes, the DFS algorithm will have a time complexity of O(n). This is because in the worst-case it will visit every node in the tree once, and compare its value with the target value. The space complexity of DFS is constant because it requires no extra space.</p>\r\n            <br />\r\n            <table>\r\n                <tbody>\r\n                    <tr><th>Depth First Search</th><th>Complexity</th></tr>\r\n                    <tr><td>Time Complexity</td><td>O(n)</td></tr>\r\n                    <tr><td>Space Complexity</td><td>O(1)</td></tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DepthFirstSearchInformation;","import React from 'react';\r\n\r\nconst BreadthFirstSearchInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <p>Breadth First Search (BFS) is an algorithm to search for a value in a tree data structure. Every node is traversed in a certain order until either the value is found, or every node in the tree has been visited meaning the value is not in the tree.</p>\r\n            <br />\r\n            <p>In a Breadth First Search, we start searching at the root of the tree. We then traverse down the tree level by level, checking every node in each level from left to right. The way that this is typically implemented is using a queue. First we start by adding the root to our queue. Then we dequeue the root from the queue, check if it was our target value, and then enqueue all of its children into the queue. We repeat this with every element that we dequeue from the queue until we find our target value, or the queue is empty. If the queue is empty and we have not found our target value then it means that value is not in the tree.</p>\r\n            <br />\r\n            <p>For any tree with n nodes, the BFS algorithm will have a time complexity of O(n). This is because in the worst-case it will visit every node in the tree once, and compare its value with the target value. The space complexity of BFS is O(n), because in the worst case all of the nodes of the tree besides the root will be on a single level, and they must all be stored in the queue.</p>\r\n            <br />\r\n            <table>\r\n                <tbody>\r\n                    <tr><th>Depth First Search</th><th>Complexity</th></tr>\r\n                    <tr><td>Time Complexity</td><td>O(n)</td></tr>\r\n                    <tr><td>Space Complexity</td><td>O(n)</td></tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BreadthFirstSearchInformation;","import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport './App.scss';\r\nimport Navigation from './Navigation/Navigation';\r\nimport Visualization from './Visualization/Visualization';\r\nimport Array from './Array/Array';\r\nimport ArrayInformation from './Array/ArrayInformation';\r\nimport List from './List/List';\r\nimport ListInformation from './List/ListInformation';\r\nimport ArrayList from './ArrayList/ArrayList';\r\nimport ArrayListInformation from './ArrayList/ArrayListInformation';\r\nimport LinkedList from './LinkedList/LinkedList';\r\nimport LinkedListInformation from './LinkedList/LinkedListInformation';\r\nimport Stack from './Stack/Stack';\r\nimport StackInformation from './Stack/StackInformation';\r\nimport Queue from './Queue/Queue';\r\nimport QueueInformation from './Queue/QueueInformation';\r\nimport BinaryTree from './BinaryTree/BinaryTree';\r\nimport BinaryTreeInformation from './BinaryTree/BinaryTreeInformation';\r\nimport BinarySearchTree from './BinarySearchTree/BinarySearchTree';\r\nimport BinarySearchTreeInformation from './BinarySearchTree/BinarySearchTreeInformation';\r\nimport AvlTree from './AvlTree/AvlTree';\r\nimport AvlTreeInformation from './AvlTree/AvlTreeInformation';\r\nimport BinaryHeap from './BinaryHeap/BinaryHeap';\r\nimport BinaryHeapInformation from './BinaryHeap/BinaryHeapInformation';\r\nimport HashTable from './HashTable/HashTable';\r\nimport HashTableInformation from './HashTable/HashTableInformation';\r\nimport Set from './Set/Set';\r\nimport SetInformation from './Set/SetInformation';\r\nimport Map from './Map/Map';\r\nimport MapInformation from './Map/MapInformation';\r\nimport InsertionSort from './InsertionSort/InsertionSort';\r\nimport InsertionSortInformation from './InsertionSort/InsertionSortInformation';\r\nimport SelectionSort from './SelectionSort/SelectionSort';\r\nimport SelectionSortInformation from './SelectionSort/SelectionSortInformation';\r\nimport BubbleSort from './BubbleSort/BubbleSort';\r\nimport BubbleSortInformation from './BubbleSort/BubbleSortInformation';\r\nimport MergeSort from './MergeSort/MergeSort';\r\nimport MergeSortInformation from './MergeSort/MergeSortInformation';\r\nimport QuickSort from './QuickSort/QuickSort';\r\nimport QuickSortInformation from './QuickSort/QuickSortInformation';\r\nimport HeapSort from './HeapSort/HeapSort';\r\nimport HeapSortInformation from './HeapSort/HeapSortInformation';\r\nimport LinearSearch from './LinearSearch/LinearSearch';\r\nimport LinearSearchInformation from './LinearSearch/LinearSearchInformation';\r\nimport BinarySearch from './BinarySearch/BinarySearch';\r\nimport BinarySearchInformation from './BinarySearch/BinarySearchInformation';\r\nimport DepthFirstSearch from './DepthFirstSearch/DepthFirstSearch';\r\nimport DepthFirstSearchInformation from './DepthFirstSearch/DepthFirstSearchInformation';\r\nimport BreadthFirstSearch from './BreadthFirstSearch/BreadthFirstSearch';\r\nimport BreadthFirstSearchInformation from './BreadthFirstSearch/BreadthFirstSearchInformation';\r\n\r\nconst App = () => {\r\n\r\n\t//the daily visualization is stored as a string in a state variable\r\n\tconst [visualization, setVisualization] = useState();\r\n\r\n\t//fetch the daily visualization as a string from the server\r\n\tuseEffect(() => {\r\n\t\tfetch(\"/api\")\r\n\t\t\t.then((res) => res.json())\r\n\t\t\t.then((data) => setVisualization(data.visualization));\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<BrowserRouter>\r\n\t\t\t<header>DAILY DOSE OF DATA</header>\r\n\t\t\t<div className=\"main\">\r\n\t\t\t\t<Navigation />\r\n\t\t\t\t<div className=\"content\">\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route exact path=\"/\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">Visualization of the Day: {visualization}</header>\r\n\t\t\t\t\t\t\t<Visualization visualization={visualization} />\r\n\t\t\t\t\t\t\t<div className=\"information\">\r\n\t\t\t\t\t\t\t\t<p>Insert home page information here. Insert home page information here. Insert home page information here. Insert home page information here. Insert home page information here. Insert home page information here. Insert home page information here. Insert home page information here. Insert home page information here. Insert home page information here. Insert home page information here. Insert home page information here. Insert home page information here.</p>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/Array\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">Array</header>\r\n\t\t\t\t\t\t\t<Array />\r\n\t\t\t\t\t\t\t<ArrayInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/List\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">List</header>\r\n\t\t\t\t\t\t\t<List />\r\n\t\t\t\t\t\t\t<ListInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/Array List\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">Array List</header>\r\n\t\t\t\t\t\t\t<ArrayList />\r\n\t\t\t\t\t\t\t<ArrayListInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/Linked List\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">Linked List</header>\r\n\t\t\t\t\t\t\t<LinkedList />\r\n\t\t\t\t\t\t\t<LinkedListInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/Stack\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">Stack</header>\r\n\t\t\t\t\t\t\t<Stack />\r\n\t\t\t\t\t\t\t<StackInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/Queue\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">Queue</header>\r\n\t\t\t\t\t\t\t<Queue />\r\n\t\t\t\t\t\t\t<QueueInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/Binary Tree\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">Binary Tree</header>\r\n\t\t\t\t\t\t\t<BinaryTree />\r\n\t\t\t\t\t\t\t<BinaryTreeInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/Binary Search Tree\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">Binary Search Tree</header>\r\n\t\t\t\t\t\t\t<BinarySearchTree />\r\n\t\t\t\t\t\t\t<BinarySearchTreeInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/Avl Tree\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">AVL Tree</header>\r\n\t\t\t\t\t\t\t<AvlTree />\r\n\t\t\t\t\t\t\t<AvlTreeInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/Binary Heap\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">Binary Heap</header>\r\n\t\t\t\t\t\t\t<BinaryHeap />\r\n\t\t\t\t\t\t\t<BinaryHeapInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/Hash Table\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">Hash Table</header>\r\n\t\t\t\t\t\t\t<HashTable />\r\n\t\t\t\t\t\t\t<HashTableInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/Set\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">Set</header>\r\n\t\t\t\t\t\t\t<Set />\r\n\t\t\t\t\t\t\t<SetInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/Map\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">Map</header>\r\n\t\t\t\t\t\t\t<Map />\r\n\t\t\t\t\t\t\t<MapInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/Insertion Sort\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">Insertion Sort</header>\r\n\t\t\t\t\t\t\t<InsertionSort />\r\n\t\t\t\t\t\t\t<InsertionSortInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/Selection Sort\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">Selection Sort</header>\r\n\t\t\t\t\t\t\t<SelectionSort />\r\n\t\t\t\t\t\t\t<SelectionSortInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/Bubble Sort\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">Bubble Sort</header>\r\n\t\t\t\t\t\t\t<BubbleSort />\r\n\t\t\t\t\t\t\t<BubbleSortInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/Merge Sort\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">Merge Sort</header>\r\n\t\t\t\t\t\t\t<MergeSort />\r\n\t\t\t\t\t\t\t<MergeSortInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/Quick Sort\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">Quick Sort</header>\r\n\t\t\t\t\t\t\t<QuickSort />\r\n\t\t\t\t\t\t\t<QuickSortInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/Heap Sort\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">Heap Sort</header>\r\n\t\t\t\t\t\t\t<HeapSort />\r\n\t\t\t\t\t\t\t<HeapSortInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/Linear Search\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">Linear Search</header>\r\n\t\t\t\t\t\t\t<LinearSearch />\r\n\t\t\t\t\t\t\t<LinearSearchInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/Binary Search\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">Binary Search</header>\r\n\t\t\t\t\t\t\t<BinarySearch />\r\n\t\t\t\t\t\t\t<BinarySearchInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/Depth First Search\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">Depth First Search</header>\r\n\t\t\t\t\t\t\t<DepthFirstSearch />\r\n\t\t\t\t\t\t\t<DepthFirstSearchInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/Breadth First Search\">\r\n\t\t\t\t\t\t\t<header className=\"page-title\">Breadth First Search</header>\r\n\t\t\t\t\t\t\t<BreadthFirstSearch />\r\n\t\t\t\t\t\t\t<BreadthFirstSearchInformation />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/about\">\r\n\t\t\t\t\t\t\t<div id=\"about-us\" className=\"information\">\r\n\t\t\t\t\t\t\t\t<h1>About Us</h1>\r\n\t\t\t\t\t\t\t\t<p>Thank you for visiting our website! We are two undergraduate college students studying in areas related to Computer Science. We decided to work together over an entire summer to bring to life this idea of a website to provide visualizations of various data structures and algorithms for educational purposes. We had little to no experience with web development before this, and we fully self-studied JavaScript, HTML, CSS, React.js, and Node.js, all of which were used to develop this website. This website is still a work in progress, and we plan to continue adding new content and features. Any feedback you would like to give us is appreciated, so feel free to contact us with the information below!</p>\r\n\t\t\t\t\t\t\t\t<hr />\r\n\t\t\t\t\t\t\t\t<div className=\"personal-information\">\r\n\t\t\t\t\t\t\t\t\t<img src=\"quintenpicture.jpg\" alt=\"\"></img>\r\n\t\t\t\t\t\t\t\t\t<img src=\"stonybrooklogo.jpg\" alt=\"\"></img>\r\n\t\t\t\t\t\t\t\t\t<div id=\"quinten-information\">\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"information-header\">\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"personal-information-section\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p><b>Quinten De Man</b></p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p>Stony Brook University</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p>Computer Science Honors</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p>Applied Mathematics and Statistics</p>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"personal-information-section\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p><b>Email:</b> quinten.deman@gmail.com</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p><b>LinkedIn:</b> <a href=\"https://www.linkedin.com/in/quinten-de-man/\">https://www.linkedin.com/in/quinten-de-man/</a></p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p><b>GitHub:</b> <a href=\"https://github.com/quintendeman\">https://github.com/quintendeman</a></p>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"biography\">\r\n\t\t\t\t\t\t\t\t\t\t\t<p><b>Biography</b></p>\r\n\t\t\t\t\t\t\t\t\t\t\t<p>Quinten is a rising junior at Stony Brook University with a double major in Computer Science and Applied Mathematics and Statistics. He has interests in Data Structures, Algorithms, Web Development, Machine Learning, and Artificial Intelligence. He has lots of experience with these topics from previous research experiences, work experiences, personal projects, and academic coursework. For more information visit his LinkedIn or GitHub pages.</p>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<hr />\r\n\t\t\t\t\t\t\t\t<div className=\"personal-information\">\r\n\t\t\t\t\t\t\t\t\t<img src=\"zackpicture.jpg\" alt=\"\"></img>\r\n\t\t\t\t\t\t\t\t\t<img src=\"northeasternlogo.png\" alt=\"\"></img>\r\n\t\t\t\t\t\t\t\t\t<div id=\"zack-information\">\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"information-header\">\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"personal-information-section\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p><b>Zackary Lassetter</b></p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p>Northeastern University</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p>Northeastern National Merit Scholar</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p>Data Science and Economics</p>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"personal-information-section\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p><b>Email:</b> zackary@lassetter.org</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p><b>LinkedIn:</b> <a href=\"https://www.linkedin.com/in/zackary-lassetter/\">https://www.linkedin.com/in/zackary-lassetter/</a></p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p><b>GitHub:</b> <a href=\"https://github.com/zlassetter\">https://github.com/zlassetter</a></p>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"biography\">\r\n\t\t\t\t\t\t\t\t\t\t\t<p><b>Biography</b></p>\r\n\t\t\t\t\t\t\t\t\t\t\t<p>Zackary is a rising sophmore at Northeastern University and is currently pursing a combined major in Data Science and Economics. He is interested many topics across the field of computer science including Data Structures and Algorithms, but is also interested in the applications of these tools in the fields of Quantitative Finance, Econometrics, and Data Analytics. Please visit his LinkedIn and GitHub for more information.</p>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<footer>Made by Quinten De Man and Zackary Lassetter</footer>\r\n\t\t</BrowserRouter>\r\n\t);\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}
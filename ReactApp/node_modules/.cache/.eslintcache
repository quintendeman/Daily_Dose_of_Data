[{"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\index.js":"1","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\App.js":"2","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Navigation\\Navigation.js":"3","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Array\\Array.js":"4","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\List\\List.js":"5","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Array\\ArrayInformation.js":"6","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\ArrayList\\ArrayListInformation.js":"7","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\LinkedList\\LinkedListInformation.js":"8","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\LinkedList\\LinkedList.js":"9","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\ArrayList\\ArrayList.js":"10","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\List\\ListInformation.js":"11","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Stack\\Stack.js":"12","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Stack\\StackInformation.js":"13","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BinaryTree\\BinaryTreeInformation.js":"14","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Queue\\Queue.js":"15","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Queue\\QueueInformation.js":"16","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BinaryTree\\BinaryTree.js":"17","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BinarySearchTree\\BinarySearchTreeInformation.js":"18","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BinarySearchTree\\BinarySearchTree.js":"19","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\HashTable\\HashTable.js":"20","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BinaryHeap\\BinaryHeap.js":"21","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\AvlTree\\AvlTree.js":"22","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BinaryHeap\\BinaryHeapInformation.js":"23","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Set\\Set.js":"24","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\HashTable\\HashTableInformation.js":"25","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Set\\SetInformation.js":"26","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Map\\MapInformation.js":"27","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\SelectionSort\\SelectionSortInformation.js":"28","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Map\\Map.js":"29","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\SelectionSort\\SelectionSort.js":"30","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\InsertionSort\\InsertionSort.js":"31","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BubbleSort\\BubbleSort.js":"32","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\MergeSort\\MergeSortInformation.js":"33","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\MergeSort\\MergeSort.js":"34","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\HeapSort\\HeapSort.js":"35","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\HeapSort\\HeapSortInformation.js":"36","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\LinearSearch\\LinearSearchInformation.js":"37","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\QuickSort\\QuickSort.js":"38","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\LinearSearch\\LinearSearch.js":"39","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\DepthFirstSearch\\DepthFirstSearchInformation.js":"40","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BinarySearch\\BinarySearch.js":"41","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BinarySearch\\BinarySearchInformation.js":"42","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BreadthFirstSearch\\BreadthFirstSearchInformation.js":"43","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\DepthFirstSearch\\DepthFirstSearch.js":"44","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BreadthFirstSearch\\BreadthFirstSearch.js":"45","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BinaryTree\\BinaryTreeDisplay.js":"46","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Element\\Element.js":"47","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Navigation\\NavigationSection.js":"48","C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\AvlTree\\AvlTreeInformation.js":"49","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\index.js":"50","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\App.js":"51","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\List\\ListInformation.js":"52","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\List\\List.js":"53","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Array\\ArrayInformation.js":"54","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Navigation\\Navigation.js":"55","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Array\\Array.js":"56","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\LinkedList\\LinkedList.js":"57","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Queue\\Queue.js":"58","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\ArrayList\\ArrayListInformation.js":"59","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\LinkedList\\LinkedListInformation.js":"60","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\ArrayList\\ArrayList.js":"61","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Stack\\StackInformation.js":"62","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Queue\\QueueInformation.js":"63","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BinarySearchTree\\BinarySearchTreeInformation.js":"64","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Stack\\Stack.js":"65","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BinaryTree\\BinaryTreeInformation.js":"66","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BinaryTree\\BinaryTree.js":"67","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BinarySearchTree\\BinarySearchTree.js":"68","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BinaryHeap\\BinaryHeap.js":"69","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\MergeSort\\MergeSort.js":"70","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\SelectionSort\\SelectionSortInformation.js":"71","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\InsertionSort\\InsertionSort.js":"72","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BubbleSort\\BubbleSort.js":"73","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\QuickSort\\QuickSort.js":"74","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\SelectionSort\\SelectionSort.js":"75","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\HeapSort\\HeapSort.js":"76","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BreadthFirstSearch\\BreadthFirstSearchInformation.js":"77","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\DepthFirstSearch\\DepthFirstSearchInformation.js":"78","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\AvlTree\\AvlTreeInformation.js":"79","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\HashTable\\HashTableInformation.js":"80","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BinaryHeap\\BinaryHeapInformation.js":"81","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Set\\SetInformation.js":"82","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\HashTable\\HashTable.js":"83","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\AvlTree\\AvlTree.js":"84","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Set\\Set.js":"85","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Map\\Map.js":"86","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Map\\MapInformation.js":"87","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\HeapSort\\HeapSortInformation.js":"88","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\MergeSort\\MergeSortInformation.js":"89","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BreadthFirstSearch\\BreadthFirstSearch.js":"90","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\LinearSearch\\LinearSearch.js":"91","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\DepthFirstSearch\\DepthFirstSearch.js":"92","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BinarySearch\\BinarySearch.js":"93","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\LinearSearch\\LinearSearchInformation.js":"94","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BinarySearch\\BinarySearchInformation.js":"95","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BinaryTree\\BinaryTreeDisplay.js":"96","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Element\\Element.js":"97","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Navigation\\NavigationSection.js":"98","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\InsertionSort\\InsertionSortInformation.js":"99","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BubbleSort\\BubbleSortInformation.js":"100","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\QuickSort\\QuickSortInformation.js":"101"},{"size":175,"mtime":1624756521820,"results":"102","hashOfConfig":"103"},{"size":8347,"mtime":1628109718579,"results":"104","hashOfConfig":"103"},{"size":932,"mtime":1626555822062,"results":"105","hashOfConfig":"103"},{"size":5410,"mtime":1625927182152,"results":"106","hashOfConfig":"103"},{"size":4675,"mtime":1625927183394,"results":"107","hashOfConfig":"103"},{"size":1935,"mtime":1626555822057,"results":"108","hashOfConfig":"103"},{"size":1916,"mtime":1626555822058,"results":"109","hashOfConfig":"103"},{"size":1961,"mtime":1625930255308,"results":"110","hashOfConfig":"103"},{"size":13088,"mtime":1627520453204,"results":"111","hashOfConfig":"103"},{"size":4717,"mtime":1625929179927,"results":"112","hashOfConfig":"103"},{"size":2813,"mtime":1625929613875,"results":"113","hashOfConfig":"103"},{"size":2457,"mtime":1625927183413,"results":"114","hashOfConfig":"103"},{"size":2579,"mtime":1624931149213,"results":"115","hashOfConfig":"103"},{"size":2531,"mtime":1626555822059,"results":"116","hashOfConfig":"103"},{"size":3786,"mtime":1625927183405,"results":"117","hashOfConfig":"103"},{"size":2713,"mtime":1624931149209,"results":"118","hashOfConfig":"103"},{"size":2091,"mtime":1627520453195,"results":"119","hashOfConfig":"103"},{"size":2634,"mtime":1626817374097,"results":"120","hashOfConfig":"103"},{"size":13190,"mtime":1626817374096,"results":"121","hashOfConfig":"103"},{"size":9574,"mtime":1628108106946,"results":"122","hashOfConfig":"103"},{"size":12366,"mtime":1627520453194,"results":"123","hashOfConfig":"103"},{"size":25292,"mtime":1628108397275,"results":"124","hashOfConfig":"103"},{"size":4009,"mtime":1628108106944,"results":"125","hashOfConfig":"103"},{"size":3578,"mtime":1628108106951,"results":"126","hashOfConfig":"103"},{"size":3238,"mtime":1628108106947,"results":"127","hashOfConfig":"103"},{"size":1755,"mtime":1628108106952,"results":"128","hashOfConfig":"103"},{"size":1746,"mtime":1628108106950,"results":"129","hashOfConfig":"103"},{"size":1883,"mtime":1627520453206,"results":"130","hashOfConfig":"103"},{"size":4251,"mtime":1628108106949,"results":"131","hashOfConfig":"103"},{"size":6481,"mtime":1626199352132,"results":"132","hashOfConfig":"103"},{"size":7436,"mtime":1626199352118,"results":"133","hashOfConfig":"103"},{"size":8006,"mtime":1626199350943,"results":"134","hashOfConfig":"103"},{"size":2656,"mtime":1628108106951,"results":"135","hashOfConfig":"103"},{"size":10934,"mtime":1626310426882,"results":"136","hashOfConfig":"103"},{"size":5236,"mtime":1627520453202,"results":"137","hashOfConfig":"103"},{"size":1859,"mtime":1628108106947,"results":"138","hashOfConfig":"103"},{"size":1210,"mtime":1628108106949,"results":"139","hashOfConfig":"103"},{"size":9868,"mtime":1626310426885,"results":"140","hashOfConfig":"103"},{"size":5818,"mtime":1628108106948,"results":"141","hashOfConfig":"103"},{"size":1772,"mtime":1627520453201,"results":"142","hashOfConfig":"103"},{"size":6305,"mtime":1628108106944,"results":"143","hashOfConfig":"103"},{"size":2154,"mtime":1628108106945,"results":"144","hashOfConfig":"103"},{"size":1940,"mtime":1627520453198,"results":"145","hashOfConfig":"103"},{"size":5670,"mtime":1628108106946,"results":"146","hashOfConfig":"103"},{"size":6045,"mtime":1628108106945,"results":"147","hashOfConfig":"103"},{"size":3200,"mtime":1626817374098,"results":"148","hashOfConfig":"103"},{"size":203,"mtime":1625010197903,"results":"149","hashOfConfig":"103"},{"size":977,"mtime":1625927183403,"results":"150","hashOfConfig":"103"},{"size":1725,"mtime":1628110705019,"results":"151","hashOfConfig":"103"},{"size":175,"mtime":1624756521820,"results":"152","hashOfConfig":"153"},{"size":10371,"mtime":1628432374946,"results":"154","hashOfConfig":"153"},{"size":2813,"mtime":1625929613875,"results":"155","hashOfConfig":"153"},{"size":4675,"mtime":1625927183394,"results":"156","hashOfConfig":"153"},{"size":1935,"mtime":1626555822057,"results":"157","hashOfConfig":"153"},{"size":932,"mtime":1626555822062,"results":"158","hashOfConfig":"153"},{"size":5410,"mtime":1625927182152,"results":"159","hashOfConfig":"153"},{"size":13088,"mtime":1627520453204,"results":"160","hashOfConfig":"153"},{"size":3786,"mtime":1625927183405,"results":"161","hashOfConfig":"153"},{"size":1916,"mtime":1626555822058,"results":"162","hashOfConfig":"153"},{"size":1961,"mtime":1625930255308,"results":"163","hashOfConfig":"153"},{"size":4717,"mtime":1625929179927,"results":"164","hashOfConfig":"153"},{"size":2579,"mtime":1624931149213,"results":"165","hashOfConfig":"153"},{"size":2713,"mtime":1624931149209,"results":"166","hashOfConfig":"153"},{"size":2634,"mtime":1626817374097,"results":"167","hashOfConfig":"153"},{"size":2457,"mtime":1625927183413,"results":"168","hashOfConfig":"153"},{"size":2531,"mtime":1626555822059,"results":"169","hashOfConfig":"153"},{"size":2091,"mtime":1627520453195,"results":"170","hashOfConfig":"153"},{"size":13190,"mtime":1626817374096,"results":"171","hashOfConfig":"153"},{"size":12366,"mtime":1627520453194,"results":"172","hashOfConfig":"153"},{"size":10934,"mtime":1626310426882,"results":"173","hashOfConfig":"153"},{"size":1883,"mtime":1627520453206,"results":"174","hashOfConfig":"153"},{"size":7436,"mtime":1626199352118,"results":"175","hashOfConfig":"153"},{"size":8006,"mtime":1626199350943,"results":"176","hashOfConfig":"153"},{"size":9868,"mtime":1626310426885,"results":"177","hashOfConfig":"153"},{"size":6481,"mtime":1626199352132,"results":"178","hashOfConfig":"153"},{"size":5236,"mtime":1627520453202,"results":"179","hashOfConfig":"153"},{"size":1940,"mtime":1627520453198,"results":"180","hashOfConfig":"153"},{"size":1772,"mtime":1627520453201,"results":"181","hashOfConfig":"153"},{"size":2525,"mtime":1628112211718,"results":"182","hashOfConfig":"153"},{"size":3238,"mtime":1628108106947,"results":"183","hashOfConfig":"153"},{"size":4009,"mtime":1628108106944,"results":"184","hashOfConfig":"153"},{"size":1755,"mtime":1628108106952,"results":"185","hashOfConfig":"153"},{"size":9574,"mtime":1628108106946,"results":"186","hashOfConfig":"153"},{"size":25292,"mtime":1628108397275,"results":"187","hashOfConfig":"153"},{"size":3578,"mtime":1628108106951,"results":"188","hashOfConfig":"153"},{"size":4251,"mtime":1628108106949,"results":"189","hashOfConfig":"153"},{"size":1746,"mtime":1628108106950,"results":"190","hashOfConfig":"153"},{"size":1859,"mtime":1628108106947,"results":"191","hashOfConfig":"153"},{"size":2656,"mtime":1628108106951,"results":"192","hashOfConfig":"153"},{"size":6045,"mtime":1628108106945,"results":"193","hashOfConfig":"153"},{"size":5818,"mtime":1628108106948,"results":"194","hashOfConfig":"153"},{"size":5670,"mtime":1628108106946,"results":"195","hashOfConfig":"153"},{"size":6305,"mtime":1628108106944,"results":"196","hashOfConfig":"153"},{"size":1210,"mtime":1628108106949,"results":"197","hashOfConfig":"153"},{"size":2154,"mtime":1628108106945,"results":"198","hashOfConfig":"153"},{"size":3200,"mtime":1626817374098,"results":"199","hashOfConfig":"153"},{"size":203,"mtime":1625010197903,"results":"200","hashOfConfig":"153"},{"size":977,"mtime":1625927183403,"results":"201","hashOfConfig":"153"},{"size":1806,"mtime":1628371037883,"results":"202","hashOfConfig":"153"},{"size":1770,"mtime":1628372952556,"results":"203","hashOfConfig":"153"},{"size":2690,"mtime":1628436610892,"results":"204","hashOfConfig":"153"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9z5a8j",{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},"1iqs7lj",{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"305"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\index.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\App.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Navigation\\Navigation.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Array\\Array.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\List\\List.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Array\\ArrayInformation.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\ArrayList\\ArrayListInformation.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\LinkedList\\LinkedListInformation.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\LinkedList\\LinkedList.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\ArrayList\\ArrayList.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\List\\ListInformation.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Stack\\Stack.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Stack\\StackInformation.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BinaryTree\\BinaryTreeInformation.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Queue\\Queue.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Queue\\QueueInformation.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BinaryTree\\BinaryTree.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BinarySearchTree\\BinarySearchTreeInformation.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BinarySearchTree\\BinarySearchTree.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\HashTable\\HashTable.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BinaryHeap\\BinaryHeap.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\AvlTree\\AvlTree.js",["409","410","411","412","413","414"],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BinaryHeap\\BinaryHeapInformation.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Set\\Set.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\HashTable\\HashTableInformation.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Set\\SetInformation.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Map\\MapInformation.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\SelectionSort\\SelectionSortInformation.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Map\\Map.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\SelectionSort\\SelectionSort.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\InsertionSort\\InsertionSort.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BubbleSort\\BubbleSort.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\MergeSort\\MergeSortInformation.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\MergeSort\\MergeSort.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\HeapSort\\HeapSort.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\HeapSort\\HeapSortInformation.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\LinearSearch\\LinearSearchInformation.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\QuickSort\\QuickSort.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\LinearSearch\\LinearSearch.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\DepthFirstSearch\\DepthFirstSearchInformation.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BinarySearch\\BinarySearch.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BinarySearch\\BinarySearchInformation.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BreadthFirstSearch\\BreadthFirstSearchInformation.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\DepthFirstSearch\\DepthFirstSearch.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BreadthFirstSearch\\BreadthFirstSearch.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\BinaryTree\\BinaryTreeDisplay.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Element\\Element.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\Navigation\\NavigationSection.js",[],"C:\\Users\\zack\\source\\repos\\quinten\\web_project\\reactapp\\src\\AvlTree\\AvlTreeInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\index.js",[],["415","416"],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\App.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\List\\ListInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\List\\List.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Array\\ArrayInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Navigation\\Navigation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Array\\Array.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\LinkedList\\LinkedList.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Queue\\Queue.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\ArrayList\\ArrayListInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\LinkedList\\LinkedListInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\ArrayList\\ArrayList.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Stack\\StackInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Queue\\QueueInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BinarySearchTree\\BinarySearchTreeInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Stack\\Stack.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BinaryTree\\BinaryTreeInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BinaryTree\\BinaryTree.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BinarySearchTree\\BinarySearchTree.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BinaryHeap\\BinaryHeap.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\MergeSort\\MergeSort.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\SelectionSort\\SelectionSortInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\InsertionSort\\InsertionSort.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BubbleSort\\BubbleSort.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\QuickSort\\QuickSort.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\SelectionSort\\SelectionSort.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\HeapSort\\HeapSort.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BreadthFirstSearch\\BreadthFirstSearchInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\DepthFirstSearch\\DepthFirstSearchInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\AvlTree\\AvlTreeInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\HashTable\\HashTableInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BinaryHeap\\BinaryHeapInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Set\\SetInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\HashTable\\HashTable.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\AvlTree\\AvlTree.js",["417","418","419","420","421","422"],"import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './AvlTree.scss';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\r\nimport Element from '../Element/Element.js';\r\n\r\n//class for node in binary tree\r\nclass BinaryTreeNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n\r\n}\r\n\r\nfunction getParent(node, tree) {\r\n    var parent = null;\r\n    var cur = tree.root;\r\n    if (node != null) {\r\n\r\n        while (cur != node) {\r\n            if (node.value > cur.value) {\r\n                parent = cur;\r\n                cur = parent.right;\r\n            }\r\n            else {\r\n                parent = cur;\r\n                cur = parent.left;\r\n            }\r\n        }\r\n        return parent;\r\n    }\r\n    else console.log(\"node is null, no parent\")\r\n}\r\n\r\nfunction getHeight(node) {\r\n\r\n    if (typeof node === \"object\" && node != null) {\r\n\r\n        if (getHeight(node.left) > getHeight(node.right)) {\r\n            return 1 + getHeight(node.left);\r\n        }\r\n        else return 1 + getHeight(node.right);\r\n    }\r\n    else return 0;\r\n}\r\n\r\n\r\nfunction getBalance(node) {\r\n    if (node !== null && typeof node != \"undefined\") {\r\n        return getHeight(node.right) - getHeight(node.left);\r\n    }\r\n}\r\n\r\nfunction rotateRight(node, tree) {\r\n    var newRoot = node.left;\r\n    if (node === tree.root) tree.root = newRoot;\r\n    var T2 = newRoot.right;\r\n\r\n    newRoot.right = node;\r\n    node.left = T2;\r\n\r\n}\r\n\r\nfunction rotateLeft(node, tree) {\r\n    var newRoot = node.right;\r\n    if (node === tree.root) tree.root = newRoot;\r\n    var T2 = newRoot.left;\r\n    newRoot.left = node;\r\n    node.right = T2;\r\n}\r\n\r\nfunction getLeftmost(node) {\r\n    var leftmost = node;\r\n    if (leftmost != null) {\r\n        while (leftmost.left != null) {\r\n            leftmost = leftmost.left;\r\n        }\r\n    }\r\n    return leftmost;\r\n}\r\n\r\nfunction getRightMost(node) {\r\n    var rightmost = node;\r\n    if (rightmost != null) {\r\n        while (rightmost.right != null) {\r\n            rightmost = rightmost.right;\r\n        }\r\n    }\r\n    return rightmost;\r\n}\r\n\r\n//class for binary search tree\r\nclass AvlTreeClass {\r\n    constructor() {\r\n        this.root = null;\r\n        this.height = 0;\r\n        this.list = [];\r\n    }\r\n\r\n\r\n\r\n\r\n    inOrder(node) {\r\n        if (node == null) {\r\n            return\r\n        }\r\n        this.inOrder(node.left);\r\n        this.list.push(node.value);\r\n        this.inOrder(node.right);\r\n    }\r\n\r\n    insertWithRot(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        var height = 1;\r\n        while (current != null) {\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n                height++;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n                height++;\r\n            } else\r\n                return;\r\n        }\r\n        if (parent === null)\r\n            this.root = new BinaryTreeNode(value);\r\n        else if (value < parent.value)\r\n            parent.left = new BinaryTreeNode(value);\r\n        else\r\n            parent.right = new BinaryTreeNode(value);\r\n        if (height > this.height)\r\n            this.height = height;\r\n\r\n        //do rotations\r\n    }\r\n\r\n    insert(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        var height = 1;\r\n        while (current != null) {\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n                height++;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n                height++;\r\n            } else\r\n                return;\r\n        }\r\n        if (parent === null)\r\n            this.root = new BinaryTreeNode(value);\r\n        else if (value < parent.value)\r\n            parent.left = new BinaryTreeNode(value);\r\n        else\r\n            parent.right = new BinaryTreeNode(value);\r\n        if (height > this.height)\r\n            this.height = height;\r\n    }\r\n\r\n    remove(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        //find a node equal to value else exit function\r\n        while (true) {\r\n            if (current === null)\r\n                return;\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n            } else\r\n                break;\r\n        }\r\n        //if node has no children set parent child to null\r\n        if (current.left === null && current.right === null) {\r\n            if (parent === null)\r\n                this.root = null;\r\n            else if (value < parent.value)\r\n                parent.left = null;\r\n            else\r\n                parent.right = null;\r\n        }\r\n        //if node has 1 child set parent child to current child\r\n        else if (current.right === null) {\r\n            if (parent === null)\r\n                this.root = current.left;\r\n            else if (value < parent.value)\r\n                parent.left = current.left;\r\n            else\r\n                parent.right = current.left;\r\n        }\r\n        else if (current.left === null) {\r\n            if (parent === null)\r\n                this.root = current.right;\r\n            else if (value < parent.value)\r\n                parent.left = current.right;\r\n            else\r\n                parent.right = current.right;\r\n        }\r\n        //if node has 2 children set parent child to leftmost node of right subtree of current, and delete that\r\n        else {\r\n            //find the leftmost child of right subtree of current, set current to that value\r\n            var leftmostChild = current.right;\r\n            parent = current;\r\n            while (leftmostChild.left !== null) {\r\n                parent = leftmostChild;\r\n                leftmostChild = leftmostChild.left;\r\n            }\r\n            current.value = leftmostChild.value;\r\n            //delete the leftmost child of right subtree\r\n            current = leftmostChild;\r\n            if (current.left === null && current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = null;\r\n                else\r\n                    parent.right = null;\r\n            }\r\n            else if (current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.left;\r\n                else\r\n                    parent.right = current.left;\r\n            }\r\n            else {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.right;\r\n                else\r\n                    parent.right = current.right;\r\n            }\r\n        }\r\n    }\r\n\r\n    treeHeight() {\r\n        return getHeight(this.root);\r\n    }\r\n\r\n}\r\n\r\n//converts sorted array to AVL Tree\r\nfunction sortedArrayToAVL(arr, start, end) {\r\n    if (start > end) {\r\n        return null;\r\n    }\r\n\r\n    var mid = parseInt((start + end) / 2);\r\n    var node = new BinaryTreeNode(arr[mid]);\r\n\r\n    node.left = sortedArrayToAVL(arr, start, mid - 1);\r\n\r\n    node.right = sortedArrayToAVL(arr, mid + 1, end);\r\n    return node;\r\n}\r\n\r\n//react component for binary search tree\r\nconst AvlTree = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [tree, setTree] = useState(new AvlTreeClass());\r\n    const secondRot = useRef(false);\r\n    const familyLine = useRef([]);\r\n    const insertInput = useRef();\r\n    const removeInput = useRef();\r\n    const findInput = useRef();\r\n    const speedSlider = useRef();\r\n    const focus = useRef();\r\n    const green = useRef();\r\n    const pink = useRef();\r\n    const yellow = useRef();\r\n    const interval = useRef();\r\n    const animating = useRef();\r\n    const animationFunction = useRef();\r\n    const animationValue = useRef();\r\n    const status = useRef(\"Tree is balanced\");\r\n\r\n    //We call update on fake state variable to force rerender\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    //function to generate a random BST\r\n    const randomTree = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        const height = randInt(2, 6);\r\n        var newTree = new AvlTreeClass();\r\n        var insertValue = null;\r\n        while (newTree.height <= height) {\r\n            insertValue = randInt(-999, 1000);\r\n            newTree.insert(insertValue);\r\n        }\r\n\r\n        newTree.remove(insertValue);\r\n        newTree.inOrder(newTree.root)\r\n\r\n\r\n        var treeList = newTree.list;\r\n        var n = newTree.list.length;\r\n        newTree.root = sortedArrayToAVL(treeList, 0, n - 1);\r\n\r\n        setTree(newTree);\r\n    }\r\n\r\n\r\n\r\n\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min) + min);\r\n    }\r\n\r\n    //function to pause or continue animation\r\n    const toggleAnimation = useCallback(() => {\r\n\r\n        if (animating.current) {\r\n            clearInterval(interval.current);\r\n            animating.current = false;\r\n            focus.current = null;\r\n            animationFunction.current = null;\r\n            animationValue.current = null;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n            green.current = null;\r\n            yellow.current = null;\r\n            animating.current = true;\r\n        }\r\n    }, []);\r\n\r\n    //initialize the tree to a random BST\r\n    useEffect(randomTree, [toggleAnimation]);\r\n\r\n    //function to insert into the binary search tree on button click\r\n    const insert = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        var data = parseInt(insertInput.current.value);\r\n        if (isNaN(data))\r\n            data = randInt(-999, 1000);\r\n        insertInput.current.value = null;\r\n        if (tree.root === null) {\r\n            tree.insert(data);\r\n            green.current = tree.root;\r\n            forceUpdate();\r\n        } else {\r\n            focus.current = tree.root;\r\n            forceUpdate();\r\n            animationFunction.current = insertStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n        }\r\n        familyLine.current = [];\r\n    }\r\n\r\n    //function to do a single step of insertion animation\r\n    const insertStep = () => {\r\n        status.current = \"Inserting node\";\r\n        forceUpdate();\r\n        if (animationValue.current < focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.left === null) {\r\n                tree.insert(animationValue.current);\r\n                //familyLine.current.push(focus.current);\r\n                green.current = focus.current.left;\r\n                //toggleAnimation();\r\n                //animationFunction.current = rotateStep();\r\n                focus.current = focus.current.left;\r\n            } else\r\n                focus.current = focus.current.left;\r\n\r\n        } else if (animationValue.current > focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.right === null) {\r\n                tree.insert(animationValue.current);\r\n                //familyLine.current.push(focus.current);\r\n                green.current = focus.current.right;\r\n                focus.current = focus.current.right;\r\n                //toggleAnimation();\r\n                //animationFunction.current = rotateStep();\r\n            } else\r\n                focus.current = focus.current.right;\r\n\r\n        } else {\r\n            animationFunction.current = rotateStep;\r\n        }\r\n\r\n    }\r\n\r\n    //function to remove from binary search tree on button click\r\n    const remove = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        if (tree.root !== null) {\r\n            var data = parseInt(removeInput.current.value);\r\n            if (isNaN(data))\r\n                data = tree.root.value;\r\n            focus.current = tree.root;\r\n            if (focus.current.value === data)\r\n                pink.current = focus.current;\r\n            forceUpdate();\r\n            animationFunction.current = removeStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n        }\r\n        removeInput.current.value = null;\r\n        familyLine.current = [];\r\n    }\r\n\r\n    //function to do a single step of remove animation\r\n    const removeStep = () => {\r\n        status.current = \"Removing node\";\r\n        if (animationValue.current < focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.left === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.left;\r\n                if (focus.current.value === animationValue.current)\r\n                    pink.current = focus.current;\r\n            }\r\n        } else if (animationValue.current > focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.right === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.right;\r\n                if (focus.current.value === animationValue.current)\r\n                    pink.current = focus.current;\r\n            }\r\n        } else {\r\n            if (familyLine.current.length === 0) {\r\n                var rightTree = tree.root.right;\r\n                if (rightTree != null) {\r\n                    if (getParent(getLeftmost(rightTree), tree) === tree.root) {\r\n                        tree.remove(animationValue.current);\r\n                        familyLine.current.push(tree.root);\r\n                        pink.current = null;\r\n                        animationFunction.current = rotateStepDelete;\r\n                        return;\r\n                    }\r\n                    else familyLine.current.push(getParent(getLeftmost(rightTree), tree));\r\n\r\n                }\r\n                else {\r\n\r\n                    if (getParent(getRightMost(tree.root.left), tree) === tree.root) {\r\n                        tree.remove(animationValue.current);\r\n                        familyLine.current.push(tree.root);\r\n                        pink.current = null;\r\n                        animationFunction.current = rotateStepDelete;\r\n                        return;\r\n                    }\r\n                    else familyLine.current.push(getParent(getRightMost(tree.root.left), tree));\r\n\r\n                }\r\n            }\r\n            tree.remove(animationValue.current);\r\n\r\n            pink.current = null;\r\n            animationFunction.current = rotateStepDelete;\r\n        }\r\n    }\r\n\r\n\r\n    //function to start find animation\r\n    const find = () => {\r\n        if (animating.current)\r\n            familyLine.current = [];\r\n        toggleAnimation();\r\n        if (tree.root !== null) {\r\n            var data = parseInt(findInput.current.value);\r\n            if (isNaN(data))\r\n                data = tree.root.value;\r\n            focus.current = tree.root;\r\n            animationFunction.current = findStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n            if (focus.current.value === data)\r\n                yellow.current = focus.current;\r\n            forceUpdate();\r\n        }\r\n        findInput.current.value = null;\r\n    }\r\n\r\n    //function to to a single step of find animation\r\n    const findStep = () => {\r\n        if (animationValue.current < focus.current.value) {\r\n            if (focus.current.left === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.left;\r\n                if (focus.current.value === animationValue.current)\r\n                    yellow.current = focus.current;\r\n            }\r\n        } else if (animationValue.current > focus.current.value) {\r\n            if (focus.current.right === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.right;\r\n                if (focus.current.value === animationValue.current)\r\n                    yellow.current = focus.current;\r\n            }\r\n        } else {\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    const rotateStepDelete = () => {\r\n\r\n        var family = [];\r\n        for (var i = 0; i < familyLine.current.length; i++) {\r\n            family.push(familyLine.current[i]);\r\n        }\r\n\r\n        if (family.length === 0) toggleAnimation();\r\n        else {\r\n\r\n            //z is first unbalanced node\r\n\r\n            var z = family.pop();\r\n\r\n\r\n\r\n            while (family.length > 0 && Math.abs(getBalance(z)) < 2) {\r\n                z = family.pop();\r\n\r\n            }\r\n            if (Math.abs(getBalance(z)) < 2) {\r\n                status.current = \"Tree is balanced\";\r\n\r\n                toggleAnimation();\r\n            }\r\n\r\n            familyLine.current = [];\r\n            familyLine.current.push(z);\r\n            //determine largest height child\r\n\r\n            if (z == null || typeof z == \"undefined\") {\r\n                status.current = \"Tree is empty\"\r\n                toggleAnimation();\r\n            }\r\n            else if (z.left != null || z.right != null) {\r\n                var y = null; //largest height child\r\n                if (getHeight(z.left) >= getHeight(z.right)) {\r\n                    y = z.left\r\n\r\n                }\r\n                else y = z.right;\r\n                var x = null;\r\n                if (y != null) {\r\n                    if (y.value < z.value) {\r\n                        if (getHeight(y.left) >= getHeight(y.right)) x = y.left;\r\n                        else x = y.right;\r\n                    }\r\n                    else {\r\n                        if (getHeight(y.left) > getHeight(y.right)) x = y.left;\r\n                        else x = y.right;\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n            ////left left\r\n            if (getBalance(z) < -1 && x.value < y.value) {\r\n                rotateRight(z, tree);\r\n                status.current = \"Rotating Node: \" + z.value + \" right\"\r\n                var parent = getParent(y, tree);\r\n                if (parent != null) {\r\n                    if (parent.value < z.value) {\r\n                        parent.right = y;\r\n                    }\r\n                    else parent.left = y;\r\n                }\r\n                //familyLine.current.shift();\r\n            }\r\n\r\n            ////left right\r\n            if (getBalance(z) < -1 && x.value > y.value) {\r\n\r\n                rotateLeft(y, tree);\r\n                status.current = \"Rotating Node: \" + y.value + \" left\"\r\n                z.left = x;\r\n\r\n\r\n            }\r\n\r\n            ////right left\r\n            if (getBalance(z) > 1 && x.value < y.value) {\r\n\r\n                rotateRight(y, tree);\r\n                status.current = \"Rotating Node: \" + y.value + \" right\"\r\n                z.right = x;\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n            //right right\r\n            if (getBalance(z) > 1 && x.value > y.value) {\r\n                var parent = getParent(z, tree);\r\n                rotateLeft(z, tree);\r\n                status.current = \"Rotating Node: \" + z.value + \" left\"\r\n\r\n                if (parent != null) {\r\n                    if (parent.value < z.value) {\r\n                        parent.right = y;\r\n                    }\r\n                    else parent.left = y;\r\n                }\r\n                else tree.root = y;\r\n\r\n            }\r\n\r\n            forceUpdate();\r\n\r\n\r\n        }\r\n    }\r\n\r\n    const rotateStep = () => {\r\n\r\n        //create new array copy of family line\r\n        var family = [];\r\n        for (var i = 0; i < familyLine.current.length; i++) {\r\n            family.push(familyLine.current[i]);\r\n        }\r\n\r\n\r\n        var inserted = green.current;\r\n\r\n        if (family.length === 0) toggleAnimation();\r\n        else {\r\n            var firstUnbalanced = family.pop();\r\n\r\n            //var child;\r\n\r\n            while (Math.abs(getBalance(firstUnbalanced)) < 2 && family.length > 0) {\r\n                firstUnbalanced = family.pop();\r\n\r\n            }\r\n\r\n\r\n            if (Math.abs(getBalance(firstUnbalanced)) < 2) {\r\n                //tree is balanced \r\n                status.current = \"Tree is balanced\"\r\n                toggleAnimation();\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n            //Left Left case\r\n            if (getBalance(firstUnbalanced) === -2 && getBalance(firstUnbalanced.left) === -1) {\r\n\r\n\r\n                var l = firstUnbalanced.left;\r\n                rotateRight(firstUnbalanced, tree);\r\n                status.current = \"Rotating Node: \" + firstUnbalanced.value + \" right\"\r\n\r\n                //insert on correct side\r\n                var grandP = family.pop();\r\n                if (grandP) {\r\n                    if (grandP.value < firstUnbalanced.value) {\r\n                        grandP.right = l;\r\n                    }\r\n                    else grandP.left = l;\r\n                } else tree.root = l;\r\n                secondRot.current = true;\r\n                familyLine.current.splice(familyLine.current.indexOf(l.right), 1);\r\n\r\n\r\n            }\r\n\r\n\r\n            //Left Right case\r\n            if (getBalance(firstUnbalanced) === -2 && getBalance(firstUnbalanced.left) === 1) {\r\n                var r = firstUnbalanced.left.right;\r\n                rotateLeft(firstUnbalanced.left, tree);\r\n                status.current = \"Rotating Node: \" + firstUnbalanced.left.value + \" left\";\r\n\r\n                firstUnbalanced.left = r;\r\n            }\r\n\r\n            //Right Right case\r\n            if (getBalance(firstUnbalanced) === 2 && getBalance(firstUnbalanced.right) === 1) {\r\n                var r = firstUnbalanced.right;\r\n                rotateLeft(firstUnbalanced, tree);\r\n                status.current = \"Rotating Node: \" + firstUnbalanced.value + \" left\";\r\n                //insert on correct side\r\n                var grandP = family.pop();\r\n                if (grandP) {\r\n                    if (grandP.value < firstUnbalanced.value) {\r\n                        grandP.right = r;\r\n                    }\r\n                    else grandP.left = r;\r\n                } else tree.root = r;\r\n                familyLine.current.splice(familyLine.current.indexOf(firstUnbalanced), 1);\r\n\r\n            }\r\n\r\n            //Right Left Case\r\n            if (getBalance(firstUnbalanced) === 2 && getBalance(firstUnbalanced.right) === -1) {\r\n                var l = firstUnbalanced.right.left;\r\n                rotateRight(firstUnbalanced.right, tree);\r\n                status.current = \"Rotating Node: \" + firstUnbalanced.right + \" right\";\r\n                familyLine.current.pop();\r\n                firstUnbalanced.right = l;\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n        }\r\n        forceUpdate();\r\n\r\n    }\r\n\r\n    //changes the animation speed when the slider changes\r\n    const updateSpeed = () => {\r\n        if (animationFunction.current != null) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-search-tree\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" onClick={randomTree}>Random</button>\r\n                    <br />\r\n                    <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                    <input ref={insertInput} type=\"text\"></input>\r\n                    <br />\r\n                    <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                    <input ref={removeInput} type=\"text\"></input>\r\n                    <br />\r\n                    <button id=\"findButton\" onClick={find}>Find</button>\r\n                    <input ref={findInput} type=\"text\"></input>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <BinaryTreeDisplay tree={tree} border={focus.current} green={green.current} pink={pink.current} yellow={yellow.current} />\r\n\r\n                    <p>{status.current}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element border=\"bordered\"></Element>\r\n                <p>= Current Focus</p>\r\n                <br />\r\n                <Element color=\"green\"></Element>\r\n                <p>= Last Inserted Element</p>\r\n                < br />\r\n                <Element color=\"pink\"></Element>\r\n                <p>= Element to Delete</p>\r\n                <br />\r\n                <Element color=\"yellow\"></Element>\r\n                <p>= Last Found Element</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default AvlTree;","C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Set\\Set.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Map\\Map.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Map\\MapInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\HeapSort\\HeapSortInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\MergeSort\\MergeSortInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BreadthFirstSearch\\BreadthFirstSearch.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\LinearSearch\\LinearSearch.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\DepthFirstSearch\\DepthFirstSearch.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BinarySearch\\BinarySearch.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\LinearSearch\\LinearSearchInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BinarySearch\\BinarySearchInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BinaryTree\\BinaryTreeDisplay.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Element\\Element.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\Navigation\\NavigationSection.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\InsertionSort\\InsertionSortInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\BubbleSort\\BubbleSortInformation.js",[],"C:\\Users\\zack\\source\\repos\\Quinten\\Web_Project\\ReactApp\\src\\QuickSort\\QuickSortInformation.js",[],{"ruleId":"423","severity":1,"message":"424","line":21,"column":20,"nodeType":"425","messageId":"426","endLine":21,"endColumn":22},{"ruleId":"427","severity":1,"message":"428","line":614,"column":21,"nodeType":"429","messageId":"430","endLine":614,"endColumn":27},{"ruleId":"431","severity":1,"message":"432","line":643,"column":13,"nodeType":"429","messageId":"433","endLine":643,"endColumn":21},{"ruleId":"427","severity":1,"message":"434","line":702,"column":21,"nodeType":"429","messageId":"430","endLine":702,"endColumn":22},{"ruleId":"427","severity":1,"message":"435","line":706,"column":21,"nodeType":"429","messageId":"430","endLine":706,"endColumn":27},{"ruleId":"427","severity":1,"message":"436","line":719,"column":21,"nodeType":"429","messageId":"430","endLine":719,"endColumn":22},{"ruleId":"437","replacedBy":"438"},{"ruleId":"439","replacedBy":"440"},{"ruleId":"423","severity":1,"message":"424","line":21,"column":20,"nodeType":"425","messageId":"426","endLine":21,"endColumn":22},{"ruleId":"427","severity":1,"message":"428","line":614,"column":21,"nodeType":"429","messageId":"430","endLine":614,"endColumn":27},{"ruleId":"431","severity":1,"message":"432","line":643,"column":13,"nodeType":"429","messageId":"433","endLine":643,"endColumn":21},{"ruleId":"427","severity":1,"message":"434","line":702,"column":21,"nodeType":"429","messageId":"430","endLine":702,"endColumn":22},{"ruleId":"427","severity":1,"message":"435","line":706,"column":21,"nodeType":"429","messageId":"430","endLine":706,"endColumn":27},{"ruleId":"427","severity":1,"message":"436","line":719,"column":21,"nodeType":"429","messageId":"430","endLine":719,"endColumn":22},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-redeclare","'parent' is already defined.","Identifier","redeclared","no-unused-vars","'inserted' is assigned a value but never used.","unusedVar","'r' is already defined.","'grandP' is already defined.","'l' is already defined.","no-native-reassign",["441"],"no-negated-in-lhs",["442"],"no-global-assign","no-unsafe-negation"]